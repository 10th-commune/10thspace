// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.System.proto

#include "IM.System.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_IM_2eSystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMSysMsgData_IM_2eSystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IM_2eSystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StudyTimeInfo_IM_2eSystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_IM_2eSystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnreadSysMsgCnt_IM_2eSystem_2eproto;
namespace IM {
namespace System {
class UnreadSysMsgCntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnreadSysMsgCnt> _instance;
} _UnreadSysMsgCnt_default_instance_;
class IMSysMsgDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMSysMsgData> _instance;
} _IMSysMsgData_default_instance_;
class IMSendSysMsgReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMSendSysMsgReq> _instance;
} _IMSendSysMsgReq_default_instance_;
class IMSendSysMsgRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMSendSysMsgRsp> _instance;
} _IMSendSysMsgRsp_default_instance_;
class IMSysMsgUnreadCntReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMSysMsgUnreadCntReq> _instance;
} _IMSysMsgUnreadCntReq_default_instance_;
class IMSysMsgUnreadCntRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMSysMsgUnreadCntRsp> _instance;
} _IMSysMsgUnreadCntRsp_default_instance_;
class IMGetSysMsgDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMGetSysMsgDataReq> _instance;
} _IMGetSysMsgDataReq_default_instance_;
class IMGetSysMsgDataRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMGetSysMsgDataRsp> _instance;
} _IMGetSysMsgDataRsp_default_instance_;
class IMSysMsgReadDataAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMSysMsgReadDataAck> _instance;
} _IMSysMsgReadDataAck_default_instance_;
class StudyTimeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StudyTimeInfo> _instance;
} _StudyTimeInfo_default_instance_;
class IMSysGetStudyTimeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMSysGetStudyTimeReq> _instance;
} _IMSysGetStudyTimeReq_default_instance_;
class IMSysGetStudyTimeRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMSysGetStudyTimeRsp> _instance;
} _IMSysGetStudyTimeRsp_default_instance_;
}  // namespace System
}  // namespace IM
static void InitDefaultsscc_info_IMGetSysMsgDataReq_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMGetSysMsgDataReq_default_instance_;
    new (ptr) ::IM::System::IMGetSysMsgDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMGetSysMsgDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMGetSysMsgDataReq_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMGetSysMsgDataReq_IM_2eSystem_2eproto}, {}};

static void InitDefaultsscc_info_IMGetSysMsgDataRsp_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMGetSysMsgDataRsp_default_instance_;
    new (ptr) ::IM::System::IMGetSysMsgDataRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMGetSysMsgDataRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMGetSysMsgDataRsp_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMGetSysMsgDataRsp_IM_2eSystem_2eproto}, {
      &scc_info_IMSysMsgData_IM_2eSystem_2eproto.base,}};

static void InitDefaultsscc_info_IMSendSysMsgReq_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMSendSysMsgReq_default_instance_;
    new (ptr) ::IM::System::IMSendSysMsgReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMSendSysMsgReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMSendSysMsgReq_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMSendSysMsgReq_IM_2eSystem_2eproto}, {
      &scc_info_IMSysMsgData_IM_2eSystem_2eproto.base,}};

static void InitDefaultsscc_info_IMSendSysMsgRsp_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMSendSysMsgRsp_default_instance_;
    new (ptr) ::IM::System::IMSendSysMsgRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMSendSysMsgRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMSendSysMsgRsp_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMSendSysMsgRsp_IM_2eSystem_2eproto}, {
      &scc_info_IMSysMsgData_IM_2eSystem_2eproto.base,}};

static void InitDefaultsscc_info_IMSysGetStudyTimeReq_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMSysGetStudyTimeReq_default_instance_;
    new (ptr) ::IM::System::IMSysGetStudyTimeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMSysGetStudyTimeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMSysGetStudyTimeReq_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMSysGetStudyTimeReq_IM_2eSystem_2eproto}, {}};

static void InitDefaultsscc_info_IMSysGetStudyTimeRsp_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMSysGetStudyTimeRsp_default_instance_;
    new (ptr) ::IM::System::IMSysGetStudyTimeRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMSysGetStudyTimeRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMSysGetStudyTimeRsp_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMSysGetStudyTimeRsp_IM_2eSystem_2eproto}, {
      &scc_info_StudyTimeInfo_IM_2eSystem_2eproto.base,}};

static void InitDefaultsscc_info_IMSysMsgData_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMSysMsgData_default_instance_;
    new (ptr) ::IM::System::IMSysMsgData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMSysMsgData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMSysMsgData_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMSysMsgData_IM_2eSystem_2eproto}, {}};

static void InitDefaultsscc_info_IMSysMsgReadDataAck_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMSysMsgReadDataAck_default_instance_;
    new (ptr) ::IM::System::IMSysMsgReadDataAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMSysMsgReadDataAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMSysMsgReadDataAck_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMSysMsgReadDataAck_IM_2eSystem_2eproto}, {}};

static void InitDefaultsscc_info_IMSysMsgUnreadCntReq_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMSysMsgUnreadCntReq_default_instance_;
    new (ptr) ::IM::System::IMSysMsgUnreadCntReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMSysMsgUnreadCntReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMSysMsgUnreadCntReq_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMSysMsgUnreadCntReq_IM_2eSystem_2eproto}, {}};

static void InitDefaultsscc_info_IMSysMsgUnreadCntRsp_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_IMSysMsgUnreadCntRsp_default_instance_;
    new (ptr) ::IM::System::IMSysMsgUnreadCntRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::IMSysMsgUnreadCntRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMSysMsgUnreadCntRsp_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMSysMsgUnreadCntRsp_IM_2eSystem_2eproto}, {
      &scc_info_UnreadSysMsgCnt_IM_2eSystem_2eproto.base,}};

static void InitDefaultsscc_info_StudyTimeInfo_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_StudyTimeInfo_default_instance_;
    new (ptr) ::IM::System::StudyTimeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::StudyTimeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StudyTimeInfo_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StudyTimeInfo_IM_2eSystem_2eproto}, {}};

static void InitDefaultsscc_info_UnreadSysMsgCnt_IM_2eSystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::System::_UnreadSysMsgCnt_default_instance_;
    new (ptr) ::IM::System::UnreadSysMsgCnt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::System::UnreadSysMsgCnt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnreadSysMsgCnt_IM_2eSystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnreadSysMsgCnt_IM_2eSystem_2eproto}, {}};

namespace IM {
namespace System {
bool SysMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SysMsgType_strings[5] = {};

static const char SysMsgType_names[] =
  "PB3_UNUSE31"
  "SYS_MSG_BLOG"
  "SYS_MSG_BUDDY"
  "SYS_MSG_GROUP"
  "SYS_MSG_SYSTEM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SysMsgType_entries[] = {
  { {SysMsgType_names + 0, 11}, 0 },
  { {SysMsgType_names + 11, 12}, 3 },
  { {SysMsgType_names + 23, 13}, 1 },
  { {SysMsgType_names + 36, 13}, 2 },
  { {SysMsgType_names + 49, 14}, 4 },
};

static const int SysMsgType_entries_by_number[] = {
  0, // 0 -> PB3_UNUSE31
  2, // 1 -> SYS_MSG_BUDDY
  3, // 2 -> SYS_MSG_GROUP
  1, // 3 -> SYS_MSG_BLOG
  4, // 4 -> SYS_MSG_SYSTEM
};

const std::string& SysMsgType_Name(
    SysMsgType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SysMsgType_entries,
          SysMsgType_entries_by_number,
          5, SysMsgType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SysMsgType_entries,
      SysMsgType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SysMsgType_strings[idx].get();
}
bool SysMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysMsgType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SysMsgType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SysMsgType>(int_value);
  }
  return success;
}
bool SysMsgOper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SysMsgOper_strings[10] = {};

static const char SysMsgOper_names[] =
  "ADD_FRIEND_AGREE"
  "ADD_FRIEND_DISAGREE"
  "ADD_FRIEND_REQUEST"
  "ADD_GROUP_AGREE"
  "ADD_GROUP_DISAGREE"
  "ADD_GROUP_REQUEST"
  "PB3_UNUSE32"
  "PUSH_INVITE_ADD_FRIEND_MSG"
  "PUSH_INVITE_ADD_GROUP_MSG"
  "PUSH_SYSTEM_MSG";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SysMsgOper_entries[] = {
  { {SysMsgOper_names + 0, 16}, 2 },
  { {SysMsgOper_names + 16, 19}, 3 },
  { {SysMsgOper_names + 35, 18}, 1 },
  { {SysMsgOper_names + 53, 15}, 5 },
  { {SysMsgOper_names + 68, 18}, 6 },
  { {SysMsgOper_names + 86, 17}, 4 },
  { {SysMsgOper_names + 103, 11}, 0 },
  { {SysMsgOper_names + 114, 26}, 17 },
  { {SysMsgOper_names + 140, 25}, 18 },
  { {SysMsgOper_names + 165, 15}, 16 },
};

static const int SysMsgOper_entries_by_number[] = {
  6, // 0 -> PB3_UNUSE32
  2, // 1 -> ADD_FRIEND_REQUEST
  0, // 2 -> ADD_FRIEND_AGREE
  1, // 3 -> ADD_FRIEND_DISAGREE
  5, // 4 -> ADD_GROUP_REQUEST
  3, // 5 -> ADD_GROUP_AGREE
  4, // 6 -> ADD_GROUP_DISAGREE
  9, // 16 -> PUSH_SYSTEM_MSG
  7, // 17 -> PUSH_INVITE_ADD_FRIEND_MSG
  8, // 18 -> PUSH_INVITE_ADD_GROUP_MSG
};

const std::string& SysMsgOper_Name(
    SysMsgOper value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SysMsgOper_entries,
          SysMsgOper_entries_by_number,
          10, SysMsgOper_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SysMsgOper_entries,
      SysMsgOper_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SysMsgOper_strings[idx].get();
}
bool SysMsgOper_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysMsgOper* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SysMsgOper_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<SysMsgOper>(int_value);
  }
  return success;
}
bool StatisticsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StatisticsType_strings[5] = {};

static const char StatisticsType_names[] =
  "ALL"
  "DAY"
  "MONTH"
  "PB3_UNUSE33"
  "YEAR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StatisticsType_entries[] = {
  { {StatisticsType_names + 0, 3}, 1 },
  { {StatisticsType_names + 3, 3}, 2 },
  { {StatisticsType_names + 6, 5}, 3 },
  { {StatisticsType_names + 11, 11}, 0 },
  { {StatisticsType_names + 22, 4}, 4 },
};

static const int StatisticsType_entries_by_number[] = {
  3, // 0 -> PB3_UNUSE33
  0, // 1 -> ALL
  1, // 2 -> DAY
  2, // 3 -> MONTH
  4, // 4 -> YEAR
};

const std::string& StatisticsType_Name(
    StatisticsType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StatisticsType_entries,
          StatisticsType_entries_by_number,
          5, StatisticsType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StatisticsType_entries,
      StatisticsType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StatisticsType_strings[idx].get();
}
bool StatisticsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatisticsType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StatisticsType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<StatisticsType>(int_value);
  }
  return success;
}

// ===================================================================

void UnreadSysMsgCnt::InitAsDefaultInstance() {
}
class UnreadSysMsgCnt::_Internal {
 public:
};

UnreadSysMsgCnt::UnreadSysMsgCnt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.UnreadSysMsgCnt)
}
UnreadSysMsgCnt::UnreadSysMsgCnt(const UnreadSysMsgCnt& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:IM.System.UnreadSysMsgCnt)
}

void UnreadSysMsgCnt::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(count_));
}

UnreadSysMsgCnt::~UnreadSysMsgCnt() {
  // @@protoc_insertion_point(destructor:IM.System.UnreadSysMsgCnt)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UnreadSysMsgCnt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnreadSysMsgCnt::ArenaDtor(void* object) {
  UnreadSysMsgCnt* _this = reinterpret_cast< UnreadSysMsgCnt* >(object);
  (void)_this;
}
void UnreadSysMsgCnt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnreadSysMsgCnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnreadSysMsgCnt& UnreadSysMsgCnt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnreadSysMsgCnt_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void UnreadSysMsgCnt::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.UnreadSysMsgCnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(count_));
  _internal_metadata_.Clear<std::string>();
}

const char* UnreadSysMsgCnt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IM.System.SysMsgType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::IM::System::SysMsgType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnreadSysMsgCnt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.UnreadSysMsgCnt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.System.SysMsgType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.UnreadSysMsgCnt)
  return target;
}

size_t UnreadSysMsgCnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.UnreadSysMsgCnt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IM.System.SysMsgType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnreadSysMsgCnt::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UnreadSysMsgCnt*>(
      &from));
}

void UnreadSysMsgCnt::MergeFrom(const UnreadSysMsgCnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.UnreadSysMsgCnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void UnreadSysMsgCnt::CopyFrom(const UnreadSysMsgCnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.UnreadSysMsgCnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadSysMsgCnt::IsInitialized() const {
  return true;
}

void UnreadSysMsgCnt::InternalSwap(UnreadSysMsgCnt* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnreadSysMsgCnt, count_)
      + sizeof(UnreadSysMsgCnt::count_)
      - PROTOBUF_FIELD_OFFSET(UnreadSysMsgCnt, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string UnreadSysMsgCnt::GetTypeName() const {
  return "IM.System.UnreadSysMsgCnt";
}


// ===================================================================

void IMSysMsgData::InitAsDefaultInstance() {
}
class IMSysMsgData::_Internal {
 public:
};

IMSysMsgData::IMSysMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMSysMsgData)
}
IMSysMsgData::IMSysMsgData(const IMSysMsgData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  from_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_id().empty()) {
    from_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_id(),
      GetArena());
  }
  to_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_id().empty()) {
    to_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:IM.System.IMSysMsgData)
}

void IMSysMsgData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMSysMsgData_IM_2eSystem_2eproto.base);
  from_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

IMSysMsgData::~IMSysMsgData() {
  // @@protoc_insertion_point(destructor:IM.System.IMSysMsgData)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMSysMsgData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMSysMsgData::ArenaDtor(void* object) {
  IMSysMsgData* _this = reinterpret_cast< IMSysMsgData* >(object);
  (void)_this;
}
void IMSysMsgData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMSysMsgData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMSysMsgData& IMSysMsgData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMSysMsgData_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMSysMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMSysMsgData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* IMSysMsgData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.System.SysMsgOper type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::IM::System::SysMsgOper>(val));
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMSysMsgData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMSysMsgData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_id = 1;
  if (this->from_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_id().data(), static_cast<int>(this->_internal_from_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysMsgData.from_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_id(), target);
  }

  // string to_id = 2;
  if (this->to_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_id().data(), static_cast<int>(this->_internal_to_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysMsgData.to_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_id(), target);
  }

  // .IM.System.SysMsgOper type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMSysMsgData)
  return target;
}

size_t IMSysMsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMSysMsgData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_id = 1;
  if (this->from_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_id());
  }

  // string to_id = 2;
  if (this->to_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.System.SysMsgOper type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSysMsgData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMSysMsgData*>(
      &from));
}

void IMSysMsgData::MergeFrom(const IMSysMsgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMSysMsgData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_id().size() > 0) {
    _internal_set_from_id(from._internal_from_id());
  }
  if (from.to_id().size() > 0) {
    _internal_set_to_id(from._internal_to_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void IMSysMsgData::CopyFrom(const IMSysMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMSysMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSysMsgData::IsInitialized() const {
  return true;
}

void IMSysMsgData::InternalSwap(IMSysMsgData* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  from_id_.Swap(&other->from_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_id_.Swap(&other->to_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string IMSysMsgData::GetTypeName() const {
  return "IM.System.IMSysMsgData";
}


// ===================================================================

void IMSendSysMsgReq::InitAsDefaultInstance() {
  ::IM::System::_IMSendSysMsgReq_default_instance_._instance.get_mutable()->sys_msg_ = const_cast< ::IM::System::IMSysMsgData*>(
      ::IM::System::IMSysMsgData::internal_default_instance());
}
class IMSendSysMsgReq::_Internal {
 public:
  static const ::IM::System::IMSysMsgData& sys_msg(const IMSendSysMsgReq* msg);
};

const ::IM::System::IMSysMsgData&
IMSendSysMsgReq::_Internal::sys_msg(const IMSendSysMsgReq* msg) {
  return *msg->sys_msg_;
}
IMSendSysMsgReq::IMSendSysMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMSendSysMsgReq)
}
IMSendSysMsgReq::IMSendSysMsgReq(const IMSendSysMsgReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  if (from._internal_has_sys_msg()) {
    sys_msg_ = new ::IM::System::IMSysMsgData(*from.sys_msg_);
  } else {
    sys_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IM.System.IMSendSysMsgReq)
}

void IMSendSysMsgReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMSendSysMsgReq_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sys_msg_ = nullptr;
}

IMSendSysMsgReq::~IMSendSysMsgReq() {
  // @@protoc_insertion_point(destructor:IM.System.IMSendSysMsgReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMSendSysMsgReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sys_msg_;
}

void IMSendSysMsgReq::ArenaDtor(void* object) {
  IMSendSysMsgReq* _this = reinterpret_cast< IMSendSysMsgReq* >(object);
  (void)_this;
}
void IMSendSysMsgReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMSendSysMsgReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMSendSysMsgReq& IMSendSysMsgReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMSendSysMsgReq_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMSendSysMsgReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMSendSysMsgReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sys_msg_ != nullptr) {
    delete sys_msg_;
  }
  sys_msg_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* IMSendSysMsgReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.System.IMSysMsgData sys_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMSendSysMsgReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMSendSysMsgReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSendSysMsgReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .IM.System.IMSysMsgData sys_msg = 2;
  if (this->has_sys_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sys_msg(this), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMSendSysMsgReq)
  return target;
}

size_t IMSendSysMsgReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMSendSysMsgReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.System.IMSysMsgData sys_msg = 2;
  if (this->has_sys_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sys_msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSendSysMsgReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMSendSysMsgReq*>(
      &from));
}

void IMSendSysMsgReq::MergeFrom(const IMSendSysMsgReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMSendSysMsgReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.has_sys_msg()) {
    _internal_mutable_sys_msg()->::IM::System::IMSysMsgData::MergeFrom(from._internal_sys_msg());
  }
}

void IMSendSysMsgReq::CopyFrom(const IMSendSysMsgReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMSendSysMsgReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSendSysMsgReq::IsInitialized() const {
  return true;
}

void IMSendSysMsgReq::InternalSwap(IMSendSysMsgReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sys_msg_, other->sys_msg_);
}

std::string IMSendSysMsgReq::GetTypeName() const {
  return "IM.System.IMSendSysMsgReq";
}


// ===================================================================

void IMSendSysMsgRsp::InitAsDefaultInstance() {
  ::IM::System::_IMSendSysMsgRsp_default_instance_._instance.get_mutable()->sys_msg_ = const_cast< ::IM::System::IMSysMsgData*>(
      ::IM::System::IMSysMsgData::internal_default_instance());
}
class IMSendSysMsgRsp::_Internal {
 public:
  static const ::IM::System::IMSysMsgData& sys_msg(const IMSendSysMsgRsp* msg);
};

const ::IM::System::IMSysMsgData&
IMSendSysMsgRsp::_Internal::sys_msg(const IMSendSysMsgRsp* msg) {
  return *msg->sys_msg_;
}
IMSendSysMsgRsp::IMSendSysMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMSendSysMsgRsp)
}
IMSendSysMsgRsp::IMSendSysMsgRsp(const IMSendSysMsgRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  if (from._internal_has_sys_msg()) {
    sys_msg_ = new ::IM::System::IMSysMsgData(*from.sys_msg_);
  } else {
    sys_msg_ = nullptr;
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.System.IMSendSysMsgRsp)
}

void IMSendSysMsgRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMSendSysMsgRsp_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sys_msg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&sys_msg_)) + sizeof(result_code_));
}

IMSendSysMsgRsp::~IMSendSysMsgRsp() {
  // @@protoc_insertion_point(destructor:IM.System.IMSendSysMsgRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMSendSysMsgRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sys_msg_;
}

void IMSendSysMsgRsp::ArenaDtor(void* object) {
  IMSendSysMsgRsp* _this = reinterpret_cast< IMSendSysMsgRsp* >(object);
  (void)_this;
}
void IMSendSysMsgRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMSendSysMsgRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMSendSysMsgRsp& IMSendSysMsgRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMSendSysMsgRsp_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMSendSysMsgRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMSendSysMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && sys_msg_ != nullptr) {
    delete sys_msg_;
  }
  sys_msg_ = nullptr;
  result_code_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMSendSysMsgRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.System.IMSysMsgData sys_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMSendSysMsgRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMSendSysMsgRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSendSysMsgRsp.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  // .IM.System.IMSysMsgData sys_msg = 3;
  if (this->has_sys_msg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sys_msg(this), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMSendSysMsgRsp)
  return target;
}

size_t IMSendSysMsgRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMSendSysMsgRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.System.IMSysMsgData sys_msg = 3;
  if (this->has_sys_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sys_msg_);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSendSysMsgRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMSendSysMsgRsp*>(
      &from));
}

void IMSendSysMsgRsp::MergeFrom(const IMSendSysMsgRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMSendSysMsgRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.has_sys_msg()) {
    _internal_mutable_sys_msg()->::IM::System::IMSysMsgData::MergeFrom(from._internal_sys_msg());
  }
  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void IMSendSysMsgRsp::CopyFrom(const IMSendSysMsgRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMSendSysMsgRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSendSysMsgRsp::IsInitialized() const {
  return true;
}

void IMSendSysMsgRsp::InternalSwap(IMSendSysMsgRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMSendSysMsgRsp, result_code_)
      + sizeof(IMSendSysMsgRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(IMSendSysMsgRsp, sys_msg_)>(
          reinterpret_cast<char*>(&sys_msg_),
          reinterpret_cast<char*>(&other->sys_msg_));
}

std::string IMSendSysMsgRsp::GetTypeName() const {
  return "IM.System.IMSendSysMsgRsp";
}


// ===================================================================

void IMSysMsgUnreadCntReq::InitAsDefaultInstance() {
}
class IMSysMsgUnreadCntReq::_Internal {
 public:
};

IMSysMsgUnreadCntReq::IMSysMsgUnreadCntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMSysMsgUnreadCntReq)
}
IMSysMsgUnreadCntReq::IMSysMsgUnreadCntReq(const IMSysMsgUnreadCntReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.System.IMSysMsgUnreadCntReq)
}

void IMSysMsgUnreadCntReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMSysMsgUnreadCntReq_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMSysMsgUnreadCntReq::~IMSysMsgUnreadCntReq() {
  // @@protoc_insertion_point(destructor:IM.System.IMSysMsgUnreadCntReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMSysMsgUnreadCntReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMSysMsgUnreadCntReq::ArenaDtor(void* object) {
  IMSysMsgUnreadCntReq* _this = reinterpret_cast< IMSysMsgUnreadCntReq* >(object);
  (void)_this;
}
void IMSysMsgUnreadCntReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMSysMsgUnreadCntReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMSysMsgUnreadCntReq& IMSysMsgUnreadCntReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMSysMsgUnreadCntReq_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMSysMsgUnreadCntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMSysMsgUnreadCntReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMSysMsgUnreadCntReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMSysMsgUnreadCntReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMSysMsgUnreadCntReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysMsgUnreadCntReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMSysMsgUnreadCntReq)
  return target;
}

size_t IMSysMsgUnreadCntReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMSysMsgUnreadCntReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSysMsgUnreadCntReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMSysMsgUnreadCntReq*>(
      &from));
}

void IMSysMsgUnreadCntReq::MergeFrom(const IMSysMsgUnreadCntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMSysMsgUnreadCntReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMSysMsgUnreadCntReq::CopyFrom(const IMSysMsgUnreadCntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMSysMsgUnreadCntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSysMsgUnreadCntReq::IsInitialized() const {
  return true;
}

void IMSysMsgUnreadCntReq::InternalSwap(IMSysMsgUnreadCntReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMSysMsgUnreadCntReq::GetTypeName() const {
  return "IM.System.IMSysMsgUnreadCntReq";
}


// ===================================================================

void IMSysMsgUnreadCntRsp::InitAsDefaultInstance() {
}
class IMSysMsgUnreadCntRsp::_Internal {
 public:
};

IMSysMsgUnreadCntRsp::IMSysMsgUnreadCntRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  unread_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMSysMsgUnreadCntRsp)
}
IMSysMsgUnreadCntRsp::IMSysMsgUnreadCntRsp(const IMSysMsgUnreadCntRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      unread_list_(from.unread_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.System.IMSysMsgUnreadCntRsp)
}

void IMSysMsgUnreadCntRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMSysMsgUnreadCntRsp_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMSysMsgUnreadCntRsp::~IMSysMsgUnreadCntRsp() {
  // @@protoc_insertion_point(destructor:IM.System.IMSysMsgUnreadCntRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMSysMsgUnreadCntRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMSysMsgUnreadCntRsp::ArenaDtor(void* object) {
  IMSysMsgUnreadCntRsp* _this = reinterpret_cast< IMSysMsgUnreadCntRsp* >(object);
  (void)_this;
}
void IMSysMsgUnreadCntRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMSysMsgUnreadCntRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMSysMsgUnreadCntRsp& IMSysMsgUnreadCntRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMSysMsgUnreadCntRsp_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMSysMsgUnreadCntRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMSysMsgUnreadCntRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unread_list_.Clear();
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMSysMsgUnreadCntRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IM.System.UnreadSysMsgCnt unread_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unread_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMSysMsgUnreadCntRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMSysMsgUnreadCntRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysMsgUnreadCntRsp.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .IM.System.UnreadSysMsgCnt unread_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unread_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_unread_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMSysMsgUnreadCntRsp)
  return target;
}

size_t IMSysMsgUnreadCntRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMSysMsgUnreadCntRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.System.UnreadSysMsgCnt unread_list = 2;
  total_size += 1UL * this->_internal_unread_list_size();
  for (const auto& msg : this->unread_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSysMsgUnreadCntRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMSysMsgUnreadCntRsp*>(
      &from));
}

void IMSysMsgUnreadCntRsp::MergeFrom(const IMSysMsgUnreadCntRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMSysMsgUnreadCntRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unread_list_.MergeFrom(from.unread_list_);
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMSysMsgUnreadCntRsp::CopyFrom(const IMSysMsgUnreadCntRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMSysMsgUnreadCntRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSysMsgUnreadCntRsp::IsInitialized() const {
  return true;
}

void IMSysMsgUnreadCntRsp::InternalSwap(IMSysMsgUnreadCntRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  unread_list_.InternalSwap(&other->unread_list_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMSysMsgUnreadCntRsp::GetTypeName() const {
  return "IM.System.IMSysMsgUnreadCntRsp";
}


// ===================================================================

void IMGetSysMsgDataReq::InitAsDefaultInstance() {
}
class IMGetSysMsgDataReq::_Internal {
 public:
};

IMGetSysMsgDataReq::IMGetSysMsgDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMGetSysMsgDataReq)
}
IMGetSysMsgDataReq::IMGetSysMsgDataReq(const IMGetSysMsgDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&type_)) + sizeof(msg_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.System.IMGetSysMsgDataReq)
}

void IMGetSysMsgDataReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMGetSysMsgDataReq_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_cnt_) -
      reinterpret_cast<char*>(&type_)) + sizeof(msg_cnt_));
}

IMGetSysMsgDataReq::~IMGetSysMsgDataReq() {
  // @@protoc_insertion_point(destructor:IM.System.IMGetSysMsgDataReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMGetSysMsgDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetSysMsgDataReq::ArenaDtor(void* object) {
  IMGetSysMsgDataReq* _this = reinterpret_cast< IMGetSysMsgDataReq* >(object);
  (void)_this;
}
void IMGetSysMsgDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetSysMsgDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMGetSysMsgDataReq& IMGetSysMsgDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMGetSysMsgDataReq_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMGetSysMsgDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMGetSysMsgDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_cnt_) -
      reinterpret_cast<char*>(&type_)) + sizeof(msg_cnt_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetSysMsgDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.System.SysMsgType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::IM::System::SysMsgType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 msg_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          msg_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMGetSysMsgDataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMGetSysMsgDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMGetSysMsgDataReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .IM.System.SysMsgType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 msg_cnt = 3;
  if (this->msg_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_cnt(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMGetSysMsgDataReq)
  return target;
}

size_t IMGetSysMsgDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMGetSysMsgDataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.System.SysMsgType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 msg_cnt = 3;
  if (this->msg_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetSysMsgDataReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetSysMsgDataReq*>(
      &from));
}

void IMGetSysMsgDataReq::MergeFrom(const IMGetSysMsgDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMGetSysMsgDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.msg_cnt() != 0) {
    _internal_set_msg_cnt(from._internal_msg_cnt());
  }
}

void IMGetSysMsgDataReq::CopyFrom(const IMGetSysMsgDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMGetSysMsgDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetSysMsgDataReq::IsInitialized() const {
  return true;
}

void IMGetSysMsgDataReq::InternalSwap(IMGetSysMsgDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetSysMsgDataReq, msg_cnt_)
      + sizeof(IMGetSysMsgDataReq::msg_cnt_)
      - PROTOBUF_FIELD_OFFSET(IMGetSysMsgDataReq, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string IMGetSysMsgDataReq::GetTypeName() const {
  return "IM.System.IMGetSysMsgDataReq";
}


// ===================================================================

void IMGetSysMsgDataRsp::InitAsDefaultInstance() {
}
class IMGetSysMsgDataRsp::_Internal {
 public:
};

IMGetSysMsgDataRsp::IMGetSysMsgDataRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  msg_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMGetSysMsgDataRsp)
}
IMGetSysMsgDataRsp::IMGetSysMsgDataRsp(const IMGetSysMsgDataRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.System.IMGetSysMsgDataRsp)
}

void IMGetSysMsgDataRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMGetSysMsgDataRsp_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMGetSysMsgDataRsp::~IMGetSysMsgDataRsp() {
  // @@protoc_insertion_point(destructor:IM.System.IMGetSysMsgDataRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMGetSysMsgDataRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetSysMsgDataRsp::ArenaDtor(void* object) {
  IMGetSysMsgDataRsp* _this = reinterpret_cast< IMGetSysMsgDataRsp* >(object);
  (void)_this;
}
void IMGetSysMsgDataRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetSysMsgDataRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMGetSysMsgDataRsp& IMGetSysMsgDataRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMGetSysMsgDataRsp_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMGetSysMsgDataRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMGetSysMsgDataRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetSysMsgDataRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IM.System.IMSysMsgData msg_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMGetSysMsgDataRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMGetSysMsgDataRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMGetSysMsgDataRsp.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .IM.System.IMSysMsgData msg_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_msg_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMGetSysMsgDataRsp)
  return target;
}

size_t IMGetSysMsgDataRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMGetSysMsgDataRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.System.IMSysMsgData msg_list = 2;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetSysMsgDataRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetSysMsgDataRsp*>(
      &from));
}

void IMGetSysMsgDataRsp::MergeFrom(const IMGetSysMsgDataRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMGetSysMsgDataRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMGetSysMsgDataRsp::CopyFrom(const IMGetSysMsgDataRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMGetSysMsgDataRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetSysMsgDataRsp::IsInitialized() const {
  return true;
}

void IMGetSysMsgDataRsp::InternalSwap(IMGetSysMsgDataRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMGetSysMsgDataRsp::GetTypeName() const {
  return "IM.System.IMGetSysMsgDataRsp";
}


// ===================================================================

void IMSysMsgReadDataAck::InitAsDefaultInstance() {
}
class IMSysMsgReadDataAck::_Internal {
 public:
};

IMSysMsgReadDataAck::IMSysMsgReadDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMSysMsgReadDataAck)
}
IMSysMsgReadDataAck::IMSysMsgReadDataAck(const IMSysMsgReadDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:IM.System.IMSysMsgReadDataAck)
}

void IMSysMsgReadDataAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMSysMsgReadDataAck_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

IMSysMsgReadDataAck::~IMSysMsgReadDataAck() {
  // @@protoc_insertion_point(destructor:IM.System.IMSysMsgReadDataAck)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMSysMsgReadDataAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMSysMsgReadDataAck::ArenaDtor(void* object) {
  IMSysMsgReadDataAck* _this = reinterpret_cast< IMSysMsgReadDataAck* >(object);
  (void)_this;
}
void IMSysMsgReadDataAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMSysMsgReadDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMSysMsgReadDataAck& IMSysMsgReadDataAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMSysMsgReadDataAck_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMSysMsgReadDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMSysMsgReadDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* IMSysMsgReadDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.System.SysMsgType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::IM::System::SysMsgType>(val));
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMSysMsgReadDataAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMSysMsgReadDataAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysMsgReadDataAck.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .IM.System.SysMsgType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMSysMsgReadDataAck)
  return target;
}

size_t IMSysMsgReadDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMSysMsgReadDataAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.System.SysMsgType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSysMsgReadDataAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMSysMsgReadDataAck*>(
      &from));
}

void IMSysMsgReadDataAck::MergeFrom(const IMSysMsgReadDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMSysMsgReadDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void IMSysMsgReadDataAck::CopyFrom(const IMSysMsgReadDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMSysMsgReadDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSysMsgReadDataAck::IsInitialized() const {
  return true;
}

void IMSysMsgReadDataAck::InternalSwap(IMSysMsgReadDataAck* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

std::string IMSysMsgReadDataAck::GetTypeName() const {
  return "IM.System.IMSysMsgReadDataAck";
}


// ===================================================================

void StudyTimeInfo::InitAsDefaultInstance() {
}
class StudyTimeInfo::_Internal {
 public:
};

StudyTimeInfo::StudyTimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.StudyTimeInfo)
}
StudyTimeInfo::StudyTimeInfo(const StudyTimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nick_name(),
      GetArena());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
      GetArena());
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&start_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:IM.System.StudyTimeInfo)
}

void StudyTimeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StudyTimeInfo_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&start_)) + sizeof(duration_));
}

StudyTimeInfo::~StudyTimeInfo() {
  // @@protoc_insertion_point(destructor:IM.System.StudyTimeInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void StudyTimeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StudyTimeInfo::ArenaDtor(void* object) {
  StudyTimeInfo* _this = reinterpret_cast< StudyTimeInfo* >(object);
  (void)_this;
}
void StudyTimeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StudyTimeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StudyTimeInfo& StudyTimeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StudyTimeInfo_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void StudyTimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.StudyTimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nick_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&start_)) + sizeof(duration_));
  _internal_metadata_.Clear<std::string>();
}

const char* StudyTimeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StudyTimeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.StudyTimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.StudyTimeInfo.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.StudyTimeInfo.nick_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick_name(), target);
  }

  // string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.StudyTimeInfo.avatar_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avatar_url(), target);
  }

  // uint32 start = 4;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start(), target);
  }

  // uint32 duration = 5;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.StudyTimeInfo)
  return target;
}

size_t StudyTimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.StudyTimeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string nick_name = 2;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string avatar_url = 3;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // uint32 start = 4;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start());
  }

  // uint32 duration = 5;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StudyTimeInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StudyTimeInfo*>(
      &from));
}

void StudyTimeInfo::MergeFrom(const StudyTimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.StudyTimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.avatar_url().size() > 0) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void StudyTimeInfo::CopyFrom(const StudyTimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.StudyTimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StudyTimeInfo::IsInitialized() const {
  return true;
}

void StudyTimeInfo::InternalSwap(StudyTimeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StudyTimeInfo, duration_)
      + sizeof(StudyTimeInfo::duration_)
      - PROTOBUF_FIELD_OFFSET(StudyTimeInfo, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

std::string StudyTimeInfo::GetTypeName() const {
  return "IM.System.StudyTimeInfo";
}


// ===================================================================

void IMSysGetStudyTimeReq::InitAsDefaultInstance() {
}
class IMSysGetStudyTimeReq::_Internal {
 public:
};

IMSysGetStudyTimeReq::IMSysGetStudyTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  target_user_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMSysGetStudyTimeReq)
}
IMSysGetStudyTimeReq::IMSysGetStudyTimeReq(const IMSysGetStudyTimeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      target_user_id_list_(from.target_user_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  statistics_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_statistics_param().empty()) {
    statistics_param_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_statistics_param(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  ::memcpy(&statistics_type_, &from.statistics_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&statistics_type_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:IM.System.IMSysGetStudyTimeReq)
}

void IMSysGetStudyTimeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMSysGetStudyTimeReq_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statistics_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&statistics_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&statistics_type_)) + sizeof(page_size_));
}

IMSysGetStudyTimeReq::~IMSysGetStudyTimeReq() {
  // @@protoc_insertion_point(destructor:IM.System.IMSysGetStudyTimeReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMSysGetStudyTimeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statistics_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMSysGetStudyTimeReq::ArenaDtor(void* object) {
  IMSysGetStudyTimeReq* _this = reinterpret_cast< IMSysGetStudyTimeReq* >(object);
  (void)_this;
}
void IMSysGetStudyTimeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMSysGetStudyTimeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMSysGetStudyTimeReq& IMSysGetStudyTimeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMSysGetStudyTimeReq_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMSysGetStudyTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMSysGetStudyTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_user_id_list_.Clear();
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  statistics_param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&statistics_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&statistics_type_)) + sizeof(page_size_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMSysGetStudyTimeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string target_user_id_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_user_id_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .IM.System.StatisticsType statistics_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_statistics_type(static_cast<::IM::System::StatisticsType>(val));
        } else goto handle_unusual;
        continue;
      // string statistics_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_statistics_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMSysGetStudyTimeReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMSysGetStudyTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysGetStudyTimeReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated string target_user_id_list = 2;
  for (int i = 0, n = this->_internal_target_user_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_target_user_id_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysGetStudyTimeReq.target_user_id_list");
    target = stream->WriteString(2, s, target);
  }

  // .IM.System.StatisticsType statistics_type = 3;
  if (this->statistics_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_statistics_type(), target);
  }

  // string statistics_param = 4;
  if (this->statistics_param().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statistics_param().data(), static_cast<int>(this->_internal_statistics_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysGetStudyTimeReq.statistics_param");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_statistics_param(), target);
  }

  // uint32 page = 5;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_page(), target);
  }

  // uint32 page_size = 6;
  if (this->page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_page_size(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMSysGetStudyTimeReq)
  return target;
}

size_t IMSysGetStudyTimeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMSysGetStudyTimeReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string target_user_id_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_user_id_list_.size());
  for (int i = 0, n = target_user_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_user_id_list_.Get(i));
  }

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string statistics_param = 4;
  if (this->statistics_param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statistics_param());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.System.StatisticsType statistics_type = 3;
  if (this->statistics_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_statistics_type());
  }

  // uint32 page = 5;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 page_size = 6;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSysGetStudyTimeReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMSysGetStudyTimeReq*>(
      &from));
}

void IMSysGetStudyTimeReq::MergeFrom(const IMSysGetStudyTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMSysGetStudyTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_user_id_list_.MergeFrom(from.target_user_id_list_);
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.statistics_param().size() > 0) {
    _internal_set_statistics_param(from._internal_statistics_param());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.statistics_type() != 0) {
    _internal_set_statistics_type(from._internal_statistics_type());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void IMSysGetStudyTimeReq::CopyFrom(const IMSysGetStudyTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMSysGetStudyTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSysGetStudyTimeReq::IsInitialized() const {
  return true;
}

void IMSysGetStudyTimeReq::InternalSwap(IMSysGetStudyTimeReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  target_user_id_list_.InternalSwap(&other->target_user_id_list_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  statistics_param_.Swap(&other->statistics_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMSysGetStudyTimeReq, page_size_)
      + sizeof(IMSysGetStudyTimeReq::page_size_)
      - PROTOBUF_FIELD_OFFSET(IMSysGetStudyTimeReq, statistics_type_)>(
          reinterpret_cast<char*>(&statistics_type_),
          reinterpret_cast<char*>(&other->statistics_type_));
}

std::string IMSysGetStudyTimeReq::GetTypeName() const {
  return "IM.System.IMSysGetStudyTimeReq";
}


// ===================================================================

void IMSysGetStudyTimeRsp::InitAsDefaultInstance() {
}
class IMSysGetStudyTimeRsp::_Internal {
 public:
};

IMSysGetStudyTimeRsp::IMSysGetStudyTimeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  studytime_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.System.IMSysGetStudyTimeRsp)
}
IMSysGetStudyTimeRsp::IMSysGetStudyTimeRsp(const IMSysGetStudyTimeRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      studytime_list_(from.studytime_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.System.IMSysGetStudyTimeRsp)
}

void IMSysGetStudyTimeRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMSysGetStudyTimeRsp_IM_2eSystem_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMSysGetStudyTimeRsp::~IMSysGetStudyTimeRsp() {
  // @@protoc_insertion_point(destructor:IM.System.IMSysGetStudyTimeRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMSysGetStudyTimeRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMSysGetStudyTimeRsp::ArenaDtor(void* object) {
  IMSysGetStudyTimeRsp* _this = reinterpret_cast< IMSysGetStudyTimeRsp* >(object);
  (void)_this;
}
void IMSysGetStudyTimeRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMSysGetStudyTimeRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMSysGetStudyTimeRsp& IMSysGetStudyTimeRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMSysGetStudyTimeRsp_IM_2eSystem_2eproto.base);
  return *internal_default_instance();
}


void IMSysGetStudyTimeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.System.IMSysGetStudyTimeRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  studytime_list_.Clear();
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMSysGetStudyTimeRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IM.System.StudyTimeInfo studytime_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_studytime_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMSysGetStudyTimeRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.System.IMSysGetStudyTimeRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.System.IMSysGetStudyTimeRsp.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .IM.System.StudyTimeInfo studytime_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_studytime_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_studytime_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.System.IMSysGetStudyTimeRsp)
  return target;
}

size_t IMSysGetStudyTimeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.System.IMSysGetStudyTimeRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.System.StudyTimeInfo studytime_list = 2;
  total_size += 1UL * this->_internal_studytime_list_size();
  for (const auto& msg : this->studytime_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMSysGetStudyTimeRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMSysGetStudyTimeRsp*>(
      &from));
}

void IMSysGetStudyTimeRsp::MergeFrom(const IMSysGetStudyTimeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.System.IMSysGetStudyTimeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  studytime_list_.MergeFrom(from.studytime_list_);
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMSysGetStudyTimeRsp::CopyFrom(const IMSysGetStudyTimeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.System.IMSysGetStudyTimeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMSysGetStudyTimeRsp::IsInitialized() const {
  return true;
}

void IMSysGetStudyTimeRsp::InternalSwap(IMSysGetStudyTimeRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  studytime_list_.InternalSwap(&other->studytime_list_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMSysGetStudyTimeRsp::GetTypeName() const {
  return "IM.System.IMSysGetStudyTimeRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace System
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::System::UnreadSysMsgCnt* Arena::CreateMaybeMessage< ::IM::System::UnreadSysMsgCnt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::UnreadSysMsgCnt >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMSysMsgData* Arena::CreateMaybeMessage< ::IM::System::IMSysMsgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMSysMsgData >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMSendSysMsgReq* Arena::CreateMaybeMessage< ::IM::System::IMSendSysMsgReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMSendSysMsgReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMSendSysMsgRsp* Arena::CreateMaybeMessage< ::IM::System::IMSendSysMsgRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMSendSysMsgRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMSysMsgUnreadCntReq* Arena::CreateMaybeMessage< ::IM::System::IMSysMsgUnreadCntReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMSysMsgUnreadCntReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMSysMsgUnreadCntRsp* Arena::CreateMaybeMessage< ::IM::System::IMSysMsgUnreadCntRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMSysMsgUnreadCntRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMGetSysMsgDataReq* Arena::CreateMaybeMessage< ::IM::System::IMGetSysMsgDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMGetSysMsgDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMGetSysMsgDataRsp* Arena::CreateMaybeMessage< ::IM::System::IMGetSysMsgDataRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMGetSysMsgDataRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMSysMsgReadDataAck* Arena::CreateMaybeMessage< ::IM::System::IMSysMsgReadDataAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMSysMsgReadDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::StudyTimeInfo* Arena::CreateMaybeMessage< ::IM::System::StudyTimeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::StudyTimeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMSysGetStudyTimeReq* Arena::CreateMaybeMessage< ::IM::System::IMSysGetStudyTimeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMSysGetStudyTimeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::System::IMSysGetStudyTimeRsp* Arena::CreateMaybeMessage< ::IM::System::IMSysGetStudyTimeRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::System::IMSysGetStudyTimeRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
