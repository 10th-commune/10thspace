// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#include "IM.BaseDefine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_IM_2eBaseDefine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_IM_2eBaseDefine_2eproto;
namespace IM {
namespace BaseDefine {
class IpAddrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpAddr> _instance;
} _IpAddr_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class ContactSessionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContactSessionInfo> _instance;
} _ContactSessionInfo_default_instance_;
class UserStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserStat> _instance;
} _UserStat_default_instance_;
class ServerUserStatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerUserStat> _instance;
} _ServerUserStat_default_instance_;
class UnreadInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnreadInfo> _instance;
} _UnreadInfo_default_instance_;
class MsgInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgInfo> _instance;
} _MsgInfo_default_instance_;
class BlogInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlogInfo> _instance;
} _BlogInfo_default_instance_;
class GroupVersionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupVersionInfo> _instance;
} _GroupVersionInfo_default_instance_;
class GroupInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupInfo> _instance;
} _GroupInfo_default_instance_;
class UserTokenInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserTokenInfo> _instance;
} _UserTokenInfo_default_instance_;
class PushResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushResult> _instance;
} _PushResult_default_instance_;
class ShieldStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShieldStatus> _instance;
} _ShieldStatus_default_instance_;
class OfflineFileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OfflineFileInfo> _instance;
} _OfflineFileInfo_default_instance_;
class DepartInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepartInfo> _instance;
} _DepartInfo_default_instance_;
class PushShieldStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushShieldStatus> _instance;
} _PushShieldStatus_default_instance_;
}  // namespace BaseDefine
}  // namespace IM
static void InitDefaultsscc_info_BlogInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_BlogInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::BlogInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::BlogInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlogInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlogInfo_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_ContactSessionInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_ContactSessionInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::ContactSessionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::ContactSessionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContactSessionInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContactSessionInfo_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_DepartInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_DepartInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::DepartInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::DepartInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepartInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepartInfo_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_GroupInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_GroupInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::GroupInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::GroupInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupInfo_IM_2eBaseDefine_2eproto}, {
      &scc_info_UserInfo_IM_2eBaseDefine_2eproto.base,}};

static void InitDefaultsscc_info_GroupVersionInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_GroupVersionInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::GroupVersionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::GroupVersionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupVersionInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupVersionInfo_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_IpAddr_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_IpAddr_default_instance_;
    new (ptr) ::IM::BaseDefine::IpAddr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::IpAddr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpAddr_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IpAddr_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_MsgInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_MsgInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::MsgInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::MsgInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MsgInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MsgInfo_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_OfflineFileInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_OfflineFileInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::OfflineFileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::OfflineFileInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OfflineFileInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OfflineFileInfo_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_PushResult_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_PushResult_default_instance_;
    new (ptr) ::IM::BaseDefine::PushResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::PushResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushResult_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PushResult_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_PushShieldStatus_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_PushShieldStatus_default_instance_;
    new (ptr) ::IM::BaseDefine::PushShieldStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::PushShieldStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushShieldStatus_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PushShieldStatus_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_ServerUserStat_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_ServerUserStat_default_instance_;
    new (ptr) ::IM::BaseDefine::ServerUserStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::ServerUserStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerUserStat_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerUserStat_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_ShieldStatus_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_ShieldStatus_default_instance_;
    new (ptr) ::IM::BaseDefine::ShieldStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::ShieldStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShieldStatus_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShieldStatus_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_UnreadInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_UnreadInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::UnreadInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::UnreadInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnreadInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnreadInfo_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_UserInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_UserStat_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_UserStat_default_instance_;
    new (ptr) ::IM::BaseDefine::UserStat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::UserStat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserStat_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserStat_IM_2eBaseDefine_2eproto}, {}};

static void InitDefaultsscc_info_UserTokenInfo_IM_2eBaseDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::BaseDefine::_UserTokenInfo_default_instance_;
    new (ptr) ::IM::BaseDefine::UserTokenInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::BaseDefine::UserTokenInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserTokenInfo_IM_2eBaseDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserTokenInfo_IM_2eBaseDefine_2eproto}, {}};

namespace IM {
namespace BaseDefine {
bool ServiceID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServiceID_strings[14] = {};

static const char ServiceID_names[] =
  "PB3_UNUSE"
  "SID_BLOG"
  "SID_BUDDY_LIST"
  "SID_FILE"
  "SID_FRIENDSHIP"
  "SID_GROUP"
  "SID_INTERNAL"
  "SID_LOGIN"
  "SID_MSG"
  "SID_OTHER"
  "SID_REGISTER"
  "SID_SERVER"
  "SID_SWITCH_SERVICE"
  "SID_SYS_MSG";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServiceID_entries[] = {
  { {ServiceID_names + 0, 9}, 0 },
  { {ServiceID_names + 9, 8}, 10 },
  { {ServiceID_names + 17, 14}, 2 },
  { {ServiceID_names + 31, 8}, 5 },
  { {ServiceID_names + 39, 14}, 16 },
  { {ServiceID_names + 53, 9}, 4 },
  { {ServiceID_names + 62, 12}, 8 },
  { {ServiceID_names + 74, 9}, 1 },
  { {ServiceID_names + 83, 7}, 3 },
  { {ServiceID_names + 90, 9}, 7 },
  { {ServiceID_names + 99, 12}, 9 },
  { {ServiceID_names + 111, 10}, 12 },
  { {ServiceID_names + 121, 18}, 6 },
  { {ServiceID_names + 139, 11}, 11 },
};

static const int ServiceID_entries_by_number[] = {
  0, // 0 -> PB3_UNUSE
  7, // 1 -> SID_LOGIN
  2, // 2 -> SID_BUDDY_LIST
  8, // 3 -> SID_MSG
  5, // 4 -> SID_GROUP
  3, // 5 -> SID_FILE
  12, // 6 -> SID_SWITCH_SERVICE
  9, // 7 -> SID_OTHER
  6, // 8 -> SID_INTERNAL
  10, // 9 -> SID_REGISTER
  1, // 10 -> SID_BLOG
  13, // 11 -> SID_SYS_MSG
  11, // 12 -> SID_SERVER
  4, // 16 -> SID_FRIENDSHIP
};

const std::string& ServiceID_Name(
    ServiceID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServiceID_entries,
          ServiceID_entries_by_number,
          14, ServiceID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServiceID_entries,
      ServiceID_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServiceID_strings[idx].get();
}
bool ServiceID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServiceID_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<ServiceID>(int_value);
  }
  return success;
}
bool FriendShipCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4106:
    case 4107:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FriendShipCmdID_strings[12] = {};

static const char FriendShipCmdID_names[] =
  "CID_FRIEND_SHIP_ADD_NOTIFY"
  "CID_FRIEND_SHIP_ADD_REQ"
  "CID_FRIEND_SHIP_ADD_RES"
  "CID_FRIEND_SHIP_GET_UNAGREE_FRIEND_LIST_REQ"
  "CID_FRIEND_SHIP_GET_UNAGREE_FRIEND_LIST_RES"
  "CID_FRIEND_SHIP_LIST_REQ"
  "CID_FRIEND_SHIP_LIST_RES"
  "CID_FRIEND_SHIP_SEARCH_FRIEND_REQ"
  "CID_FRIEND_SHIP_SEARCH_FRIEND_RES"
  "CID_FRIEND_SHIP_UPDATE_RELATION_REQ"
  "CID_FRIEND_SHIP_UPDATE_RELATION_RES"
  "PB3_UNUSE1";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FriendShipCmdID_entries[] = {
  { {FriendShipCmdID_names + 0, 26}, 4099 },
  { {FriendShipCmdID_names + 26, 23}, 4097 },
  { {FriendShipCmdID_names + 49, 23}, 4098 },
  { {FriendShipCmdID_names + 72, 43}, 4104 },
  { {FriendShipCmdID_names + 115, 43}, 4105 },
  { {FriendShipCmdID_names + 158, 24}, 4100 },
  { {FriendShipCmdID_names + 182, 24}, 4101 },
  { {FriendShipCmdID_names + 206, 33}, 4106 },
  { {FriendShipCmdID_names + 239, 33}, 4107 },
  { {FriendShipCmdID_names + 272, 35}, 4102 },
  { {FriendShipCmdID_names + 307, 35}, 4103 },
  { {FriendShipCmdID_names + 342, 10}, 0 },
};

static const int FriendShipCmdID_entries_by_number[] = {
  11, // 0 -> PB3_UNUSE1
  1, // 4097 -> CID_FRIEND_SHIP_ADD_REQ
  2, // 4098 -> CID_FRIEND_SHIP_ADD_RES
  0, // 4099 -> CID_FRIEND_SHIP_ADD_NOTIFY
  5, // 4100 -> CID_FRIEND_SHIP_LIST_REQ
  6, // 4101 -> CID_FRIEND_SHIP_LIST_RES
  9, // 4102 -> CID_FRIEND_SHIP_UPDATE_RELATION_REQ
  10, // 4103 -> CID_FRIEND_SHIP_UPDATE_RELATION_RES
  3, // 4104 -> CID_FRIEND_SHIP_GET_UNAGREE_FRIEND_LIST_REQ
  4, // 4105 -> CID_FRIEND_SHIP_GET_UNAGREE_FRIEND_LIST_RES
  7, // 4106 -> CID_FRIEND_SHIP_SEARCH_FRIEND_REQ
  8, // 4107 -> CID_FRIEND_SHIP_SEARCH_FRIEND_RES
};

const std::string& FriendShipCmdID_Name(
    FriendShipCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FriendShipCmdID_entries,
          FriendShipCmdID_entries_by_number,
          12, FriendShipCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FriendShipCmdID_entries,
      FriendShipCmdID_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FriendShipCmdID_strings[idx].get();
}
bool FriendShipCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FriendShipCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FriendShipCmdID_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<FriendShipCmdID>(int_value);
  }
  return success;
}
bool LoginCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LoginCmdID_strings[16] = {};

static const char LoginCmdID_names[] =
  "CID_LOGIN_KICK_USER"
  "CID_LOGIN_REQ_DEVICETOKEN"
  "CID_LOGIN_REQ_KICKPCCLIENT"
  "CID_LOGIN_REQ_LOGINOUT"
  "CID_LOGIN_REQ_MSGSERVER"
  "CID_LOGIN_REQ_PUSH_SHIELD"
  "CID_LOGIN_REQ_QUERY_PUSH_SHIELD"
  "CID_LOGIN_REQ_USERLOGIN"
  "CID_LOGIN_RES_DEVICETOKEN"
  "CID_LOGIN_RES_KICKPCCLIENT"
  "CID_LOGIN_RES_LOGINOUT"
  "CID_LOGIN_RES_MSGSERVER"
  "CID_LOGIN_RES_PUSH_SHIELD"
  "CID_LOGIN_RES_QUERY_PUSH_SHIELD"
  "CID_LOGIN_RES_USERLOGIN"
  "PB3_UNUSE2";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LoginCmdID_entries[] = {
  { {LoginCmdID_names + 0, 19}, 263 },
  { {LoginCmdID_names + 19, 25}, 264 },
  { {LoginCmdID_names + 44, 26}, 266 },
  { {LoginCmdID_names + 70, 22}, 261 },
  { {LoginCmdID_names + 92, 23}, 257 },
  { {LoginCmdID_names + 115, 25}, 268 },
  { {LoginCmdID_names + 140, 31}, 270 },
  { {LoginCmdID_names + 171, 23}, 259 },
  { {LoginCmdID_names + 194, 25}, 265 },
  { {LoginCmdID_names + 219, 26}, 267 },
  { {LoginCmdID_names + 245, 22}, 262 },
  { {LoginCmdID_names + 267, 23}, 258 },
  { {LoginCmdID_names + 290, 25}, 269 },
  { {LoginCmdID_names + 315, 31}, 271 },
  { {LoginCmdID_names + 346, 23}, 260 },
  { {LoginCmdID_names + 369, 10}, 0 },
};

static const int LoginCmdID_entries_by_number[] = {
  15, // 0 -> PB3_UNUSE2
  4, // 257 -> CID_LOGIN_REQ_MSGSERVER
  11, // 258 -> CID_LOGIN_RES_MSGSERVER
  7, // 259 -> CID_LOGIN_REQ_USERLOGIN
  14, // 260 -> CID_LOGIN_RES_USERLOGIN
  3, // 261 -> CID_LOGIN_REQ_LOGINOUT
  10, // 262 -> CID_LOGIN_RES_LOGINOUT
  0, // 263 -> CID_LOGIN_KICK_USER
  1, // 264 -> CID_LOGIN_REQ_DEVICETOKEN
  8, // 265 -> CID_LOGIN_RES_DEVICETOKEN
  2, // 266 -> CID_LOGIN_REQ_KICKPCCLIENT
  9, // 267 -> CID_LOGIN_RES_KICKPCCLIENT
  5, // 268 -> CID_LOGIN_REQ_PUSH_SHIELD
  12, // 269 -> CID_LOGIN_RES_PUSH_SHIELD
  6, // 270 -> CID_LOGIN_REQ_QUERY_PUSH_SHIELD
  13, // 271 -> CID_LOGIN_RES_QUERY_PUSH_SHIELD
};

const std::string& LoginCmdID_Name(
    LoginCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LoginCmdID_entries,
          LoginCmdID_entries_by_number,
          16, LoginCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LoginCmdID_entries,
      LoginCmdID_entries_by_number,
      16, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LoginCmdID_strings[idx].get();
}
bool LoginCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LoginCmdID_entries, 16, name, &int_value);
  if (success) {
    *value = static_cast<LoginCmdID>(int_value);
  }
  return success;
}
bool BuddyListCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BuddyListCmdID_strings[38] = {};

static const char BuddyListCmdID_names[] =
  "CID_BUDDY_LIST_ALL_ONLINE_USER_CNT_REQUEST"
  "CID_BUDDY_LIST_ALL_ONLINE_USER_CNT_RESPONSE"
  "CID_BUDDY_LIST_ALL_USER_REQUEST"
  "CID_BUDDY_LIST_ALL_USER_RESPONSE"
  "CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY"
  "CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST"
  "CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE"
  "CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST"
  "CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE"
  "CID_BUDDY_LIST_DEL_FOLLOW_USER_REQUEST"
  "CID_BUDDY_LIST_DEL_FOLLOW_USER_RESPONSE"
  "CID_BUDDY_LIST_DEL_FRIEND_REQUEST"
  "CID_BUDDY_LIST_DEL_FRIEND_RESPONSE"
  "CID_BUDDY_LIST_DEPARTMENT_REQUEST"
  "CID_BUDDY_LIST_DEPARTMENT_RESPONSE"
  "CID_BUDDY_LIST_FOLLOW_USER_REQUEST"
  "CID_BUDDY_LIST_FOLLOW_USER_RESPONSE"
  "CID_BUDDY_LIST_GET_ALL_ONLINE_USER_INFO_REQUEST"
  "CID_BUDDY_LIST_GET_ALL_ONLINE_USER_INFO_RESPONSE"
  "CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY"
  "CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST"
  "CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE"
  "CID_BUDDY_LIST_RECOMMEND_LIST_REQUEST"
  "CID_BUDDY_LIST_RECOMMEND_LIST_RESPONSE"
  "CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY"
  "CID_BUDDY_LIST_REMOVE_SESSION_REQ"
  "CID_BUDDY_LIST_REMOVE_SESSION_RES"
  "CID_BUDDY_LIST_SEARCH_USER_REQUEST"
  "CID_BUDDY_LIST_SEARCH_USER_RESPONSE"
  "CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY"
  "CID_BUDDY_LIST_STATUS_NOTIFY"
  "CID_BUDDY_LIST_UPDATE_USER_INFO_REQUEST"
  "CID_BUDDY_LIST_UPDATE_USER_INFO_RESPONSE"
  "CID_BUDDY_LIST_USERS_STATUS_REQUEST"
  "CID_BUDDY_LIST_USERS_STATUS_RESPONSE"
  "CID_BUDDY_LIST_USER_INFO_REQUEST"
  "CID_BUDDY_LIST_USER_INFO_RESPONSE"
  "PB3_UNUSE3";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BuddyListCmdID_entries[] = {
  { {BuddyListCmdID_names + 0, 42}, 552 },
  { {BuddyListCmdID_names + 42, 43}, 553 },
  { {BuddyListCmdID_names + 85, 31}, 520 },
  { {BuddyListCmdID_names + 116, 32}, 521 },
  { {BuddyListCmdID_names + 148, 36}, 530 },
  { {BuddyListCmdID_names + 184, 36}, 524 },
  { {BuddyListCmdID_names + 220, 37}, 525 },
  { {BuddyListCmdID_names + 257, 39}, 531 },
  { {BuddyListCmdID_names + 296, 40}, 532 },
  { {BuddyListCmdID_names + 336, 38}, 548 },
  { {BuddyListCmdID_names + 374, 39}, 549 },
  { {BuddyListCmdID_names + 413, 33}, 546 },
  { {BuddyListCmdID_names + 446, 34}, 547 },
  { {BuddyListCmdID_names + 480, 33}, 528 },
  { {BuddyListCmdID_names + 513, 34}, 529 },
  { {BuddyListCmdID_names + 547, 34}, 544 },
  { {BuddyListCmdID_names + 581, 35}, 545 },
  { {BuddyListCmdID_names + 616, 47}, 558 },
  { {BuddyListCmdID_names + 663, 48}, 559 },
  { {BuddyListCmdID_names + 711, 37}, 526 },
  { {BuddyListCmdID_names + 748, 45}, 513 },
  { {BuddyListCmdID_names + 793, 46}, 514 },
  { {BuddyListCmdID_names + 839, 37}, 556 },
  { {BuddyListCmdID_names + 876, 38}, 557 },
  { {BuddyListCmdID_names + 914, 36}, 527 },
  { {BuddyListCmdID_names + 950, 33}, 518 },
  { {BuddyListCmdID_names + 983, 33}, 519 },
  { {BuddyListCmdID_names + 1016, 34}, 534 },
  { {BuddyListCmdID_names + 1050, 35}, 535 },
  { {BuddyListCmdID_names + 1085, 39}, 533 },
  { {BuddyListCmdID_names + 1124, 28}, 515 },
  { {BuddyListCmdID_names + 1152, 39}, 554 },
  { {BuddyListCmdID_names + 1191, 40}, 555 },
  { {BuddyListCmdID_names + 1231, 35}, 522 },
  { {BuddyListCmdID_names + 1266, 36}, 523 },
  { {BuddyListCmdID_names + 1302, 32}, 516 },
  { {BuddyListCmdID_names + 1334, 33}, 517 },
  { {BuddyListCmdID_names + 1367, 10}, 0 },
};

static const int BuddyListCmdID_entries_by_number[] = {
  37, // 0 -> PB3_UNUSE3
  20, // 513 -> CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST
  21, // 514 -> CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE
  30, // 515 -> CID_BUDDY_LIST_STATUS_NOTIFY
  35, // 516 -> CID_BUDDY_LIST_USER_INFO_REQUEST
  36, // 517 -> CID_BUDDY_LIST_USER_INFO_RESPONSE
  25, // 518 -> CID_BUDDY_LIST_REMOVE_SESSION_REQ
  26, // 519 -> CID_BUDDY_LIST_REMOVE_SESSION_RES
  2, // 520 -> CID_BUDDY_LIST_ALL_USER_REQUEST
  3, // 521 -> CID_BUDDY_LIST_ALL_USER_RESPONSE
  33, // 522 -> CID_BUDDY_LIST_USERS_STATUS_REQUEST
  34, // 523 -> CID_BUDDY_LIST_USERS_STATUS_RESPONSE
  5, // 524 -> CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST
  6, // 525 -> CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE
  19, // 526 -> CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY
  24, // 527 -> CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY
  13, // 528 -> CID_BUDDY_LIST_DEPARTMENT_REQUEST
  14, // 529 -> CID_BUDDY_LIST_DEPARTMENT_RESPONSE
  4, // 530 -> CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY
  7, // 531 -> CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST
  8, // 532 -> CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE
  29, // 533 -> CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY
  27, // 534 -> CID_BUDDY_LIST_SEARCH_USER_REQUEST
  28, // 535 -> CID_BUDDY_LIST_SEARCH_USER_RESPONSE
  15, // 544 -> CID_BUDDY_LIST_FOLLOW_USER_REQUEST
  16, // 545 -> CID_BUDDY_LIST_FOLLOW_USER_RESPONSE
  11, // 546 -> CID_BUDDY_LIST_DEL_FRIEND_REQUEST
  12, // 547 -> CID_BUDDY_LIST_DEL_FRIEND_RESPONSE
  9, // 548 -> CID_BUDDY_LIST_DEL_FOLLOW_USER_REQUEST
  10, // 549 -> CID_BUDDY_LIST_DEL_FOLLOW_USER_RESPONSE
  0, // 552 -> CID_BUDDY_LIST_ALL_ONLINE_USER_CNT_REQUEST
  1, // 553 -> CID_BUDDY_LIST_ALL_ONLINE_USER_CNT_RESPONSE
  31, // 554 -> CID_BUDDY_LIST_UPDATE_USER_INFO_REQUEST
  32, // 555 -> CID_BUDDY_LIST_UPDATE_USER_INFO_RESPONSE
  22, // 556 -> CID_BUDDY_LIST_RECOMMEND_LIST_REQUEST
  23, // 557 -> CID_BUDDY_LIST_RECOMMEND_LIST_RESPONSE
  17, // 558 -> CID_BUDDY_LIST_GET_ALL_ONLINE_USER_INFO_REQUEST
  18, // 559 -> CID_BUDDY_LIST_GET_ALL_ONLINE_USER_INFO_RESPONSE
};

const std::string& BuddyListCmdID_Name(
    BuddyListCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BuddyListCmdID_entries,
          BuddyListCmdID_entries_by_number,
          38, BuddyListCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BuddyListCmdID_entries,
      BuddyListCmdID_entries_by_number,
      38, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BuddyListCmdID_strings[idx].get();
}
bool BuddyListCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuddyListCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BuddyListCmdID_entries, 38, name, &int_value);
  if (success) {
    *value = static_cast<BuddyListCmdID>(int_value);
  }
  return success;
}
bool MessageCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MessageCmdID_strings[15] = {};

static const char MessageCmdID_names[] =
  "CID_MSG_DATA"
  "CID_MSG_DATA_ACK"
  "CID_MSG_GET_BY_MSG_ID_REQ"
  "CID_MSG_GET_BY_MSG_ID_RES"
  "CID_MSG_GET_LATEST_MSG_ID_REQ"
  "CID_MSG_GET_LATEST_MSG_ID_RSP"
  "CID_MSG_LIST_REQUEST"
  "CID_MSG_LIST_RESPONSE"
  "CID_MSG_READ_ACK"
  "CID_MSG_READ_NOTIFY"
  "CID_MSG_TIME_REQUEST"
  "CID_MSG_TIME_RESPONSE"
  "CID_MSG_UNREAD_CNT_REQUEST"
  "CID_MSG_UNREAD_CNT_RESPONSE"
  "PB3_UNUSE4";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MessageCmdID_entries[] = {
  { {MessageCmdID_names + 0, 12}, 769 },
  { {MessageCmdID_names + 12, 16}, 770 },
  { {MessageCmdID_names + 28, 25}, 781 },
  { {MessageCmdID_names + 53, 25}, 782 },
  { {MessageCmdID_names + 78, 29}, 779 },
  { {MessageCmdID_names + 107, 29}, 780 },
  { {MessageCmdID_names + 136, 20}, 777 },
  { {MessageCmdID_names + 156, 21}, 778 },
  { {MessageCmdID_names + 177, 16}, 771 },
  { {MessageCmdID_names + 193, 19}, 772 },
  { {MessageCmdID_names + 212, 20}, 773 },
  { {MessageCmdID_names + 232, 21}, 774 },
  { {MessageCmdID_names + 253, 26}, 775 },
  { {MessageCmdID_names + 279, 27}, 776 },
  { {MessageCmdID_names + 306, 10}, 0 },
};

static const int MessageCmdID_entries_by_number[] = {
  14, // 0 -> PB3_UNUSE4
  0, // 769 -> CID_MSG_DATA
  1, // 770 -> CID_MSG_DATA_ACK
  8, // 771 -> CID_MSG_READ_ACK
  9, // 772 -> CID_MSG_READ_NOTIFY
  10, // 773 -> CID_MSG_TIME_REQUEST
  11, // 774 -> CID_MSG_TIME_RESPONSE
  12, // 775 -> CID_MSG_UNREAD_CNT_REQUEST
  13, // 776 -> CID_MSG_UNREAD_CNT_RESPONSE
  6, // 777 -> CID_MSG_LIST_REQUEST
  7, // 778 -> CID_MSG_LIST_RESPONSE
  4, // 779 -> CID_MSG_GET_LATEST_MSG_ID_REQ
  5, // 780 -> CID_MSG_GET_LATEST_MSG_ID_RSP
  2, // 781 -> CID_MSG_GET_BY_MSG_ID_REQ
  3, // 782 -> CID_MSG_GET_BY_MSG_ID_RES
};

const std::string& MessageCmdID_Name(
    MessageCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MessageCmdID_entries,
          MessageCmdID_entries_by_number,
          15, MessageCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MessageCmdID_entries,
      MessageCmdID_entries_by_number,
      15, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MessageCmdID_strings[idx].get();
}
bool MessageCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MessageCmdID_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<MessageCmdID>(int_value);
  }
  return success;
}
bool GroupCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GroupCmdID_strings[14] = {};

static const char GroupCmdID_names[] =
  "CID_GROUP_CHANGE_MEMBER_NOTIFY"
  "CID_GROUP_CHANGE_MEMBER_REQUEST"
  "CID_GROUP_CHANGE_MEMBER_RESPONSE"
  "CID_GROUP_CREATE_REQUEST"
  "CID_GROUP_CREATE_RESPONSE"
  "CID_GROUP_INFO_REQUEST"
  "CID_GROUP_INFO_RESPONSE"
  "CID_GROUP_NORMAL_LIST_REQUEST"
  "CID_GROUP_NORMAL_LIST_RESPONSE"
  "CID_GROUP_RECOMMAND_LIST_INFO_REQUEST"
  "CID_GROUP_RECOMMAND_LIST_INFO_RESPONSE"
  "CID_GROUP_SHIELD_GROUP_REQUEST"
  "CID_GROUP_SHIELD_GROUP_RESPONSE"
  "PB3_UNUSE5";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GroupCmdID_entries[] = {
  { {GroupCmdID_names + 0, 30}, 1035 },
  { {GroupCmdID_names + 30, 31}, 1031 },
  { {GroupCmdID_names + 61, 32}, 1032 },
  { {GroupCmdID_names + 93, 24}, 1029 },
  { {GroupCmdID_names + 117, 25}, 1030 },
  { {GroupCmdID_names + 142, 22}, 1027 },
  { {GroupCmdID_names + 164, 23}, 1028 },
  { {GroupCmdID_names + 187, 29}, 1025 },
  { {GroupCmdID_names + 216, 30}, 1026 },
  { {GroupCmdID_names + 246, 37}, 1036 },
  { {GroupCmdID_names + 283, 38}, 1037 },
  { {GroupCmdID_names + 321, 30}, 1033 },
  { {GroupCmdID_names + 351, 31}, 1034 },
  { {GroupCmdID_names + 382, 10}, 0 },
};

static const int GroupCmdID_entries_by_number[] = {
  13, // 0 -> PB3_UNUSE5
  7, // 1025 -> CID_GROUP_NORMAL_LIST_REQUEST
  8, // 1026 -> CID_GROUP_NORMAL_LIST_RESPONSE
  5, // 1027 -> CID_GROUP_INFO_REQUEST
  6, // 1028 -> CID_GROUP_INFO_RESPONSE
  3, // 1029 -> CID_GROUP_CREATE_REQUEST
  4, // 1030 -> CID_GROUP_CREATE_RESPONSE
  1, // 1031 -> CID_GROUP_CHANGE_MEMBER_REQUEST
  2, // 1032 -> CID_GROUP_CHANGE_MEMBER_RESPONSE
  11, // 1033 -> CID_GROUP_SHIELD_GROUP_REQUEST
  12, // 1034 -> CID_GROUP_SHIELD_GROUP_RESPONSE
  0, // 1035 -> CID_GROUP_CHANGE_MEMBER_NOTIFY
  9, // 1036 -> CID_GROUP_RECOMMAND_LIST_INFO_REQUEST
  10, // 1037 -> CID_GROUP_RECOMMAND_LIST_INFO_RESPONSE
};

const std::string& GroupCmdID_Name(
    GroupCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GroupCmdID_entries,
          GroupCmdID_entries_by_number,
          14, GroupCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GroupCmdID_entries,
      GroupCmdID_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GroupCmdID_strings[idx].get();
}
bool GroupCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GroupCmdID_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<GroupCmdID>(int_value);
  }
  return success;
}
bool FileCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1281:
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1290:
    case 1291:
    case 1292:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FileCmdID_strings[13] = {};

static const char FileCmdID_names[] =
  "CID_FILE_ADD_OFFLINE_REQ"
  "CID_FILE_DEL_OFFLINE_REQ"
  "CID_FILE_HAS_OFFLINE_REQ"
  "CID_FILE_HAS_OFFLINE_RES"
  "CID_FILE_LOGIN_REQ"
  "CID_FILE_LOGIN_RES"
  "CID_FILE_NOTIFY"
  "CID_FILE_PULL_DATA_REQ"
  "CID_FILE_PULL_DATA_RSP"
  "CID_FILE_REQUEST"
  "CID_FILE_RESPONSE"
  "CID_FILE_STATE"
  "PB3_UNUSE6";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FileCmdID_entries[] = {
  { {FileCmdID_names + 0, 24}, 1291 },
  { {FileCmdID_names + 24, 24}, 1292 },
  { {FileCmdID_names + 48, 24}, 1289 },
  { {FileCmdID_names + 72, 24}, 1290 },
  { {FileCmdID_names + 96, 18}, 1281 },
  { {FileCmdID_names + 114, 18}, 1282 },
  { {FileCmdID_names + 132, 15}, 1288 },
  { {FileCmdID_names + 147, 22}, 1284 },
  { {FileCmdID_names + 169, 22}, 1285 },
  { {FileCmdID_names + 191, 16}, 1286 },
  { {FileCmdID_names + 207, 17}, 1287 },
  { {FileCmdID_names + 224, 14}, 1283 },
  { {FileCmdID_names + 238, 10}, 0 },
};

static const int FileCmdID_entries_by_number[] = {
  12, // 0 -> PB3_UNUSE6
  4, // 1281 -> CID_FILE_LOGIN_REQ
  5, // 1282 -> CID_FILE_LOGIN_RES
  11, // 1283 -> CID_FILE_STATE
  7, // 1284 -> CID_FILE_PULL_DATA_REQ
  8, // 1285 -> CID_FILE_PULL_DATA_RSP
  9, // 1286 -> CID_FILE_REQUEST
  10, // 1287 -> CID_FILE_RESPONSE
  6, // 1288 -> CID_FILE_NOTIFY
  2, // 1289 -> CID_FILE_HAS_OFFLINE_REQ
  3, // 1290 -> CID_FILE_HAS_OFFLINE_RES
  0, // 1291 -> CID_FILE_ADD_OFFLINE_REQ
  1, // 1292 -> CID_FILE_DEL_OFFLINE_REQ
};

const std::string& FileCmdID_Name(
    FileCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FileCmdID_entries,
          FileCmdID_entries_by_number,
          13, FileCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FileCmdID_entries,
      FileCmdID_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FileCmdID_strings[idx].get();
}
bool FileCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FileCmdID_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<FileCmdID>(int_value);
  }
  return success;
}
bool SwitchServiceCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1537:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SwitchServiceCmdID_strings[2] = {};

static const char SwitchServiceCmdID_names[] =
  "CID_SWITCH_P2P_CMD"
  "PB3_UNUSE7";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SwitchServiceCmdID_entries[] = {
  { {SwitchServiceCmdID_names + 0, 18}, 1537 },
  { {SwitchServiceCmdID_names + 18, 10}, 0 },
};

static const int SwitchServiceCmdID_entries_by_number[] = {
  1, // 0 -> PB3_UNUSE7
  0, // 1537 -> CID_SWITCH_P2P_CMD
};

const std::string& SwitchServiceCmdID_Name(
    SwitchServiceCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SwitchServiceCmdID_entries,
          SwitchServiceCmdID_entries_by_number,
          2, SwitchServiceCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SwitchServiceCmdID_entries,
      SwitchServiceCmdID_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SwitchServiceCmdID_strings[idx].get();
}
bool SwitchServiceCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SwitchServiceCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SwitchServiceCmdID_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<SwitchServiceCmdID>(int_value);
  }
  return success;
}
bool OtherCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1793:
    case 1794:
    case 1795:
    case 1796:
    case 1797:
    case 1798:
    case 1799:
    case 1800:
    case 1801:
    case 1802:
    case 1803:
    case 1805:
    case 1806:
    case 1807:
    case 1808:
    case 1809:
    case 1810:
    case 1841:
    case 1842:
    case 1843:
    case 1844:
    case 1845:
    case 1846:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OtherCmdID_strings[24] = {};

static const char OtherCmdID_names[] =
  "CID_OTHER_FILE_SERVER_IP_REQ"
  "CID_OTHER_FILE_SERVER_IP_RSP"
  "CID_OTHER_FILE_TRANSFER_REQ"
  "CID_OTHER_FILE_TRANSFER_RSP"
  "CID_OTHER_GET_DEVICE_TOKEN_REQ"
  "CID_OTHER_GET_DEVICE_TOKEN_RSP"
  "CID_OTHER_GET_SHIELD_REQ"
  "CID_OTHER_GET_SHIELD_RSP"
  "CID_OTHER_HEARTBEAT"
  "CID_OTHER_LOGIN_STATUS_NOTIFY"
  "CID_OTHER_MSG_SERV_INFO"
  "CID_OTHER_ONLINE_USER_INFO"
  "CID_OTHER_PUSH_TO_USER_REQ"
  "CID_OTHER_PUSH_TO_USER_RSP"
  "CID_OTHER_REGISTER_REQ"
  "CID_OTHER_REGISTER_RSP"
  "CID_OTHER_ROLE_SET"
  "CID_OTHER_SERVER_KICK_USER"
  "CID_OTHER_STOP_RECV_PACKET"
  "CID_OTHER_USER_CNT_UPDATE"
  "CID_OTHER_USER_STATUS_UPDATE"
  "CID_OTHER_VALIDATE_REQ"
  "CID_OTHER_VALIDATE_RSP"
  "PB3_UNUSE8";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OtherCmdID_entries[] = {
  { {OtherCmdID_names + 0, 28}, 1843 },
  { {OtherCmdID_names + 28, 28}, 1844 },
  { {OtherCmdID_names + 56, 27}, 1841 },
  { {OtherCmdID_names + 83, 27}, 1842 },
  { {OtherCmdID_names + 110, 30}, 1797 },
  { {OtherCmdID_names + 140, 30}, 1798 },
  { {OtherCmdID_names + 170, 24}, 1809 },
  { {OtherCmdID_names + 194, 24}, 1810 },
  { {OtherCmdID_names + 218, 19}, 1793 },
  { {OtherCmdID_names + 237, 29}, 1806 },
  { {OtherCmdID_names + 266, 23}, 1801 },
  { {OtherCmdID_names + 289, 26}, 1800 },
  { {OtherCmdID_names + 315, 26}, 1807 },
  { {OtherCmdID_names + 341, 26}, 1808 },
  { {OtherCmdID_names + 367, 22}, 1845 },
  { {OtherCmdID_names + 389, 22}, 1846 },
  { {OtherCmdID_names + 411, 18}, 1799 },
  { {OtherCmdID_names + 429, 26}, 1805 },
  { {OtherCmdID_names + 455, 26}, 1794 },
  { {OtherCmdID_names + 481, 25}, 1803 },
  { {OtherCmdID_names + 506, 28}, 1802 },
  { {OtherCmdID_names + 534, 22}, 1795 },
  { {OtherCmdID_names + 556, 22}, 1796 },
  { {OtherCmdID_names + 578, 10}, 0 },
};

static const int OtherCmdID_entries_by_number[] = {
  23, // 0 -> PB3_UNUSE8
  8, // 1793 -> CID_OTHER_HEARTBEAT
  18, // 1794 -> CID_OTHER_STOP_RECV_PACKET
  21, // 1795 -> CID_OTHER_VALIDATE_REQ
  22, // 1796 -> CID_OTHER_VALIDATE_RSP
  4, // 1797 -> CID_OTHER_GET_DEVICE_TOKEN_REQ
  5, // 1798 -> CID_OTHER_GET_DEVICE_TOKEN_RSP
  16, // 1799 -> CID_OTHER_ROLE_SET
  11, // 1800 -> CID_OTHER_ONLINE_USER_INFO
  10, // 1801 -> CID_OTHER_MSG_SERV_INFO
  20, // 1802 -> CID_OTHER_USER_STATUS_UPDATE
  19, // 1803 -> CID_OTHER_USER_CNT_UPDATE
  17, // 1805 -> CID_OTHER_SERVER_KICK_USER
  9, // 1806 -> CID_OTHER_LOGIN_STATUS_NOTIFY
  12, // 1807 -> CID_OTHER_PUSH_TO_USER_REQ
  13, // 1808 -> CID_OTHER_PUSH_TO_USER_RSP
  6, // 1809 -> CID_OTHER_GET_SHIELD_REQ
  7, // 1810 -> CID_OTHER_GET_SHIELD_RSP
  2, // 1841 -> CID_OTHER_FILE_TRANSFER_REQ
  3, // 1842 -> CID_OTHER_FILE_TRANSFER_RSP
  0, // 1843 -> CID_OTHER_FILE_SERVER_IP_REQ
  1, // 1844 -> CID_OTHER_FILE_SERVER_IP_RSP
  14, // 1845 -> CID_OTHER_REGISTER_REQ
  15, // 1846 -> CID_OTHER_REGISTER_RSP
};

const std::string& OtherCmdID_Name(
    OtherCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OtherCmdID_entries,
          OtherCmdID_entries_by_number,
          24, OtherCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OtherCmdID_entries,
      OtherCmdID_entries_by_number,
      24, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OtherCmdID_strings[idx].get();
}
bool OtherCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OtherCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OtherCmdID_entries, 24, name, &int_value);
  if (success) {
    *value = static_cast<OtherCmdID>(int_value);
  }
  return success;
}
bool RegisterCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 2305:
    case 2306:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RegisterCmdID_strings[3] = {};

static const char RegisterCmdID_names[] =
  "CID_REGISTER_REQ"
  "CID_REGISTER_RSP"
  "PB3_UNUSE9";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RegisterCmdID_entries[] = {
  { {RegisterCmdID_names + 0, 16}, 2305 },
  { {RegisterCmdID_names + 16, 16}, 2306 },
  { {RegisterCmdID_names + 32, 10}, 0 },
};

static const int RegisterCmdID_entries_by_number[] = {
  2, // 0 -> PB3_UNUSE9
  0, // 2305 -> CID_REGISTER_REQ
  1, // 2306 -> CID_REGISTER_RSP
};

const std::string& RegisterCmdID_Name(
    RegisterCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RegisterCmdID_entries,
          RegisterCmdID_entries_by_number,
          3, RegisterCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RegisterCmdID_entries,
      RegisterCmdID_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RegisterCmdID_strings[idx].get();
}
bool RegisterCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RegisterCmdID_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<RegisterCmdID>(int_value);
  }
  return success;
}
bool BlogCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BlogCmdID_strings[9] = {};

static const char BlogCmdID_names[] =
  "CID_BLOG_ADD_COMMENT_REQUEST"
  "CID_BLOG_ADD_COMMENT_RESPONSE"
  "CID_BLOG_GET_COMMENT_REQUEST"
  "CID_BLOG_GET_COMMENT_RESPONSE"
  "CID_BLOG_GET_LIST_REQUEST"
  "CID_BLOG_GET_LIST_RESPONSE"
  "CID_BLOG_SEND"
  "CID_BLOG_SEND_ACK"
  "PB3_UNUSE10";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BlogCmdID_entries[] = {
  { {BlogCmdID_names + 0, 28}, 2565 },
  { {BlogCmdID_names + 28, 29}, 2566 },
  { {BlogCmdID_names + 57, 28}, 2567 },
  { {BlogCmdID_names + 85, 29}, 2568 },
  { {BlogCmdID_names + 114, 25}, 2563 },
  { {BlogCmdID_names + 139, 26}, 2564 },
  { {BlogCmdID_names + 165, 13}, 2561 },
  { {BlogCmdID_names + 178, 17}, 2562 },
  { {BlogCmdID_names + 195, 11}, 0 },
};

static const int BlogCmdID_entries_by_number[] = {
  8, // 0 -> PB3_UNUSE10
  6, // 2561 -> CID_BLOG_SEND
  7, // 2562 -> CID_BLOG_SEND_ACK
  4, // 2563 -> CID_BLOG_GET_LIST_REQUEST
  5, // 2564 -> CID_BLOG_GET_LIST_RESPONSE
  0, // 2565 -> CID_BLOG_ADD_COMMENT_REQUEST
  1, // 2566 -> CID_BLOG_ADD_COMMENT_RESPONSE
  2, // 2567 -> CID_BLOG_GET_COMMENT_REQUEST
  3, // 2568 -> CID_BLOG_GET_COMMENT_RESPONSE
};

const std::string& BlogCmdID_Name(
    BlogCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BlogCmdID_entries,
          BlogCmdID_entries_by_number,
          9, BlogCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BlogCmdID_entries,
      BlogCmdID_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BlogCmdID_strings[idx].get();
}
bool BlogCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlogCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BlogCmdID_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<BlogCmdID>(int_value);
  }
  return success;
}
bool SysMsgCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 2817:
    case 2818:
    case 2819:
    case 2820:
    case 2821:
    case 2822:
    case 2823:
    case 2824:
    case 2825:
    case 2826:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SysMsgCmdID_strings[11] = {};

static const char SysMsgCmdID_names[] =
  "CID_SYS_GET_STUDY_TIME_REQUEST"
  "CID_SYS_GET_STUDY_TIME_RESPONSE"
  "CID_SYS_MSG_DATA"
  "CID_SYS_MSG_GET_DATA_REQUEST"
  "CID_SYS_MSG_GET_DATA_RESPONSE"
  "CID_SYS_MSG_GET_UNREAD_CNT_REQUEST"
  "CID_SYS_MSG_GET_UNREAD_CNT_RESPONSE"
  "CID_SYS_MSG_READ_ACK"
  "CID_SYS_MSG_SEND_DATA_REQUEST"
  "CID_SYS_MSG_SEND_DATA_RESPONSE"
  "PB3_UNUSE11";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SysMsgCmdID_entries[] = {
  { {SysMsgCmdID_names + 0, 30}, 2825 },
  { {SysMsgCmdID_names + 30, 31}, 2826 },
  { {SysMsgCmdID_names + 61, 16}, 2819 },
  { {SysMsgCmdID_names + 77, 28}, 2822 },
  { {SysMsgCmdID_names + 105, 29}, 2823 },
  { {SysMsgCmdID_names + 134, 34}, 2820 },
  { {SysMsgCmdID_names + 168, 35}, 2821 },
  { {SysMsgCmdID_names + 203, 20}, 2824 },
  { {SysMsgCmdID_names + 223, 29}, 2817 },
  { {SysMsgCmdID_names + 252, 30}, 2818 },
  { {SysMsgCmdID_names + 282, 11}, 0 },
};

static const int SysMsgCmdID_entries_by_number[] = {
  10, // 0 -> PB3_UNUSE11
  8, // 2817 -> CID_SYS_MSG_SEND_DATA_REQUEST
  9, // 2818 -> CID_SYS_MSG_SEND_DATA_RESPONSE
  2, // 2819 -> CID_SYS_MSG_DATA
  5, // 2820 -> CID_SYS_MSG_GET_UNREAD_CNT_REQUEST
  6, // 2821 -> CID_SYS_MSG_GET_UNREAD_CNT_RESPONSE
  3, // 2822 -> CID_SYS_MSG_GET_DATA_REQUEST
  4, // 2823 -> CID_SYS_MSG_GET_DATA_RESPONSE
  7, // 2824 -> CID_SYS_MSG_READ_ACK
  0, // 2825 -> CID_SYS_GET_STUDY_TIME_REQUEST
  1, // 2826 -> CID_SYS_GET_STUDY_TIME_RESPONSE
};

const std::string& SysMsgCmdID_Name(
    SysMsgCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SysMsgCmdID_entries,
          SysMsgCmdID_entries_by_number,
          11, SysMsgCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SysMsgCmdID_entries,
      SysMsgCmdID_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SysMsgCmdID_strings[idx].get();
}
bool SysMsgCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysMsgCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SysMsgCmdID_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<SysMsgCmdID>(int_value);
  }
  return success;
}
bool ServerCmdID_IsValid(int value) {
  switch (value) {
    case 0:
    case 3073:
    case 3074:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServerCmdID_strings[3] = {};

static const char ServerCmdID_names[] =
  "CID_ONLINEUSER_INFO"
  "CID_SERVER_SAVE_TIME_CMD"
  "PB3_UNUSE12";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServerCmdID_entries[] = {
  { {ServerCmdID_names + 0, 19}, 3074 },
  { {ServerCmdID_names + 19, 24}, 3073 },
  { {ServerCmdID_names + 43, 11}, 0 },
};

static const int ServerCmdID_entries_by_number[] = {
  2, // 0 -> PB3_UNUSE12
  1, // 3073 -> CID_SERVER_SAVE_TIME_CMD
  0, // 3074 -> CID_ONLINEUSER_INFO
};

const std::string& ServerCmdID_Name(
    ServerCmdID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServerCmdID_entries,
          ServerCmdID_entries_by_number,
          3, ServerCmdID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServerCmdID_entries,
      ServerCmdID_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServerCmdID_strings[idx].get();
}
bool ServerCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCmdID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServerCmdID_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ServerCmdID>(int_value);
  }
  return success;
}
bool ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ResultType_strings[8] = {};

static const char ResultType_names[] =
  "REFUSE_REASON_DB_VALIDATE_FAILED"
  "REFUSE_REASON_MSG_SERVER_FULL"
  "REFUSE_REASON_NONE"
  "REFUSE_REASON_NO_DB_SERVER"
  "REFUSE_REASON_NO_LOGIN_SERVER"
  "REFUSE_REASON_NO_MSG_SERVER"
  "REFUSE_REASON_NO_ROUTE_SERVER"
  "REFUSE_REASON_VERSION_TOO_OLD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ResultType_entries[] = {
  { {ResultType_names + 0, 32}, 6 },
  { {ResultType_names + 32, 29}, 2 },
  { {ResultType_names + 61, 18}, 0 },
  { {ResultType_names + 79, 26}, 3 },
  { {ResultType_names + 105, 29}, 4 },
  { {ResultType_names + 134, 27}, 1 },
  { {ResultType_names + 161, 29}, 5 },
  { {ResultType_names + 190, 29}, 7 },
};

static const int ResultType_entries_by_number[] = {
  2, // 0 -> REFUSE_REASON_NONE
  5, // 1 -> REFUSE_REASON_NO_MSG_SERVER
  1, // 2 -> REFUSE_REASON_MSG_SERVER_FULL
  3, // 3 -> REFUSE_REASON_NO_DB_SERVER
  4, // 4 -> REFUSE_REASON_NO_LOGIN_SERVER
  6, // 5 -> REFUSE_REASON_NO_ROUTE_SERVER
  0, // 6 -> REFUSE_REASON_DB_VALIDATE_FAILED
  7, // 7 -> REFUSE_REASON_VERSION_TOO_OLD
};

const std::string& ResultType_Name(
    ResultType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ResultType_entries,
          ResultType_entries_by_number,
          8, ResultType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ResultType_entries,
      ResultType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ResultType_strings[idx].get();
}
bool ResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResultType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ResultType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<ResultType>(int_value);
  }
  return success;
}
bool KickReasonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KickReasonType_strings[3] = {};

static const char KickReasonType_names[] =
  "KICK_REASON_DUPLICATE_USER"
  "KICK_REASON_MOBILE_KICK"
  "PB3_UNUSE13";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KickReasonType_entries[] = {
  { {KickReasonType_names + 0, 26}, 1 },
  { {KickReasonType_names + 26, 23}, 2 },
  { {KickReasonType_names + 49, 11}, 0 },
};

static const int KickReasonType_entries_by_number[] = {
  2, // 0 -> PB3_UNUSE13
  0, // 1 -> KICK_REASON_DUPLICATE_USER
  1, // 2 -> KICK_REASON_MOBILE_KICK
};

const std::string& KickReasonType_Name(
    KickReasonType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KickReasonType_entries,
          KickReasonType_entries_by_number,
          3, KickReasonType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KickReasonType_entries,
      KickReasonType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KickReasonType_strings[idx].get();
}
bool KickReasonType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KickReasonType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KickReasonType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<KickReasonType>(int_value);
  }
  return success;
}
bool OnlineListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> OnlineListType_strings[2] = {};

static const char OnlineListType_names[] =
  "ONLINE_LIST_TYPE_FRIEND_LIST"
  "PB3_UNUSE14";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry OnlineListType_entries[] = {
  { {OnlineListType_names + 0, 28}, 1 },
  { {OnlineListType_names + 28, 11}, 0 },
};

static const int OnlineListType_entries_by_number[] = {
  1, // 0 -> PB3_UNUSE14
  0, // 1 -> ONLINE_LIST_TYPE_FRIEND_LIST
};

const std::string& OnlineListType_Name(
    OnlineListType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          OnlineListType_entries,
          OnlineListType_entries_by_number,
          2, OnlineListType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      OnlineListType_entries,
      OnlineListType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     OnlineListType_strings[idx].get();
}
bool OnlineListType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OnlineListType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      OnlineListType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<OnlineListType>(int_value);
  }
  return success;
}
bool UserStatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserStatType_strings[4] = {};

static const char UserStatType_names[] =
  "PB3_UNUSE15"
  "USER_STATUS_LEAVE"
  "USER_STATUS_OFFLINE"
  "USER_STATUS_ONLINE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserStatType_entries[] = {
  { {UserStatType_names + 0, 11}, 0 },
  { {UserStatType_names + 11, 17}, 3 },
  { {UserStatType_names + 28, 19}, 2 },
  { {UserStatType_names + 47, 18}, 1 },
};

static const int UserStatType_entries_by_number[] = {
  0, // 0 -> PB3_UNUSE15
  3, // 1 -> USER_STATUS_ONLINE
  2, // 2 -> USER_STATUS_OFFLINE
  1, // 3 -> USER_STATUS_LEAVE
};

const std::string& UserStatType_Name(
    UserStatType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserStatType_entries,
          UserStatType_entries_by_number,
          4, UserStatType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserStatType_entries,
      UserStatType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserStatType_strings[idx].get();
}
bool UserStatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserStatType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserStatType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<UserStatType>(int_value);
  }
  return success;
}
bool SessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 32:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SessionType_strings[5] = {};

static const char SessionType_names[] =
  "PB3_UNUSE16"
  "SESSION_TYPE_ERROR_NOT_FRIEND"
  "SESSION_TYPE_GROUP"
  "SESSION_TYPE_SINGLE"
  "SESSION_TYPE_SYSTEM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SessionType_entries[] = {
  { {SessionType_names + 0, 11}, 0 },
  { {SessionType_names + 11, 29}, 32 },
  { {SessionType_names + 40, 18}, 2 },
  { {SessionType_names + 58, 19}, 1 },
  { {SessionType_names + 77, 19}, 3 },
};

static const int SessionType_entries_by_number[] = {
  0, // 0 -> PB3_UNUSE16
  3, // 1 -> SESSION_TYPE_SINGLE
  2, // 2 -> SESSION_TYPE_GROUP
  4, // 3 -> SESSION_TYPE_SYSTEM
  1, // 32 -> SESSION_TYPE_ERROR_NOT_FRIEND
};

const std::string& SessionType_Name(
    SessionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SessionType_entries,
          SessionType_entries_by_number,
          5, SessionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SessionType_entries,
      SessionType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SessionType_strings[idx].get();
}
bool SessionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SessionType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SessionType>(int_value);
  }
  return success;
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 17:
    case 18:
    case 33:
    case 34:
    case 240:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MsgType_strings[8] = {};

static const char MsgType_names[] =
  "MSG_TYPE_ERROR_NOT_FRIEND"
  "MSG_TYPE_GROUP_AUDIO"
  "MSG_TYPE_GROUP_PAY"
  "MSG_TYPE_GROUP_TEXT"
  "MSG_TYPE_SINGLE_AUDIO"
  "MSG_TYPE_SINGLE_PAY"
  "MSG_TYPE_SINGLE_TEXT"
  "PB3_UNUSE17";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MsgType_entries[] = {
  { {MsgType_names + 0, 25}, 240 },
  { {MsgType_names + 25, 20}, 18 },
  { {MsgType_names + 45, 18}, 34 },
  { {MsgType_names + 63, 19}, 17 },
  { {MsgType_names + 82, 21}, 2 },
  { {MsgType_names + 103, 19}, 33 },
  { {MsgType_names + 122, 20}, 1 },
  { {MsgType_names + 142, 11}, 0 },
};

static const int MsgType_entries_by_number[] = {
  7, // 0 -> PB3_UNUSE17
  6, // 1 -> MSG_TYPE_SINGLE_TEXT
  4, // 2 -> MSG_TYPE_SINGLE_AUDIO
  3, // 17 -> MSG_TYPE_GROUP_TEXT
  1, // 18 -> MSG_TYPE_GROUP_AUDIO
  5, // 33 -> MSG_TYPE_SINGLE_PAY
  2, // 34 -> MSG_TYPE_GROUP_PAY
  0, // 240 -> MSG_TYPE_ERROR_NOT_FRIEND
};

const std::string& MsgType_Name(
    MsgType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MsgType_entries,
          MsgType_entries_by_number,
          8, MsgType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MsgType_entries,
      MsgType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MsgType_strings[idx].get();
}
bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MsgType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<MsgType>(int_value);
  }
  return success;
}
bool BlogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BlogType_strings[4] = {};

static const char BlogType_names[] =
  "BLOG_TYPE_FOLLOWUSER"
  "BLOG_TYPE_FRIEND"
  "BLOG_TYPE_RCOMMEND"
  "PB3_UNUSE18";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BlogType_entries[] = {
  { {BlogType_names + 0, 20}, 3 },
  { {BlogType_names + 20, 16}, 2 },
  { {BlogType_names + 36, 18}, 1 },
  { {BlogType_names + 54, 11}, 0 },
};

static const int BlogType_entries_by_number[] = {
  3, // 0 -> PB3_UNUSE18
  2, // 1 -> BLOG_TYPE_RCOMMEND
  1, // 2 -> BLOG_TYPE_FRIEND
  0, // 3 -> BLOG_TYPE_FOLLOWUSER
};

const std::string& BlogType_Name(
    BlogType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BlogType_entries,
          BlogType_entries_by_number,
          4, BlogType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BlogType_entries,
      BlogType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BlogType_strings[idx].get();
}
bool BlogType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlogType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BlogType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BlogType>(int_value);
  }
  return success;
}
bool BlogType2_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BlogType2_strings[3] = {};

static const char BlogType2_names[] =
  "BLOG_TYPE2_BLOG"
  "BLOG_TYPE2_COMMENT"
  "PB3_UNUSE19";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BlogType2_entries[] = {
  { {BlogType2_names + 0, 15}, 1 },
  { {BlogType2_names + 15, 18}, 2 },
  { {BlogType2_names + 33, 11}, 0 },
};

static const int BlogType2_entries_by_number[] = {
  2, // 0 -> PB3_UNUSE19
  0, // 1 -> BLOG_TYPE2_BLOG
  1, // 2 -> BLOG_TYPE2_COMMENT
};

const std::string& BlogType2_Name(
    BlogType2 value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BlogType2_entries,
          BlogType2_entries_by_number,
          3, BlogType2_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BlogType2_entries,
      BlogType2_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BlogType2_strings[idx].get();
}
bool BlogType2_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlogType2* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BlogType2_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BlogType2>(int_value);
  }
  return success;
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientType_strings[5] = {};

static const char ClientType_names[] =
  "CLIENT_TYPE_ANDROID"
  "CLIENT_TYPE_IOS"
  "CLIENT_TYPE_MAC"
  "CLIENT_TYPE_WINDOWS"
  "PB3_UNUSE20";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientType_entries[] = {
  { {ClientType_names + 0, 19}, 18 },
  { {ClientType_names + 19, 15}, 17 },
  { {ClientType_names + 34, 15}, 2 },
  { {ClientType_names + 49, 19}, 1 },
  { {ClientType_names + 68, 11}, 0 },
};

static const int ClientType_entries_by_number[] = {
  4, // 0 -> PB3_UNUSE20
  3, // 1 -> CLIENT_TYPE_WINDOWS
  2, // 2 -> CLIENT_TYPE_MAC
  1, // 17 -> CLIENT_TYPE_IOS
  0, // 18 -> CLIENT_TYPE_ANDROID
};

const std::string& ClientType_Name(
    ClientType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientType_entries,
          ClientType_entries_by_number,
          5, ClientType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientType_entries,
      ClientType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientType_strings[idx].get();
}
bool ClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ClientType>(int_value);
  }
  return success;
}
bool GroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GroupType_strings[4] = {};

static const char GroupType_names[] =
  "GROUP_TYPE_ACTIVE"
  "GROUP_TYPE_NORMAL"
  "GROUP_TYPE_TMP"
  "PB3_UNUSE21";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GroupType_entries[] = {
  { {GroupType_names + 0, 17}, 3 },
  { {GroupType_names + 17, 17}, 1 },
  { {GroupType_names + 34, 14}, 2 },
  { {GroupType_names + 48, 11}, 0 },
};

static const int GroupType_entries_by_number[] = {
  3, // 0 -> PB3_UNUSE21
  1, // 1 -> GROUP_TYPE_NORMAL
  2, // 2 -> GROUP_TYPE_TMP
  0, // 3 -> GROUP_TYPE_ACTIVE
};

const std::string& GroupType_Name(
    GroupType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GroupType_entries,
          GroupType_entries_by_number,
          4, GroupType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GroupType_entries,
      GroupType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GroupType_strings[idx].get();
}
bool GroupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GroupType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GroupType>(int_value);
  }
  return success;
}
bool GroupModifyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GroupModifyType_strings[3] = {};

static const char GroupModifyType_names[] =
  "GROUP_MODIFY_TYPE_ADD"
  "GROUP_MODIFY_TYPE_DEL"
  "PB3_UNUSE22";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GroupModifyType_entries[] = {
  { {GroupModifyType_names + 0, 21}, 1 },
  { {GroupModifyType_names + 21, 21}, 2 },
  { {GroupModifyType_names + 42, 11}, 0 },
};

static const int GroupModifyType_entries_by_number[] = {
  2, // 0 -> PB3_UNUSE22
  0, // 1 -> GROUP_MODIFY_TYPE_ADD
  1, // 2 -> GROUP_MODIFY_TYPE_DEL
};

const std::string& GroupModifyType_Name(
    GroupModifyType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GroupModifyType_entries,
          GroupModifyType_entries_by_number,
          3, GroupModifyType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GroupModifyType_entries,
      GroupModifyType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GroupModifyType_strings[idx].get();
}
bool GroupModifyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupModifyType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GroupModifyType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<GroupModifyType>(int_value);
  }
  return success;
}
bool TransferFileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TransferFileType_strings[3] = {};

static const char TransferFileType_names[] =
  "FILE_TYPE_OFFLINE"
  "FILE_TYPE_ONLINE"
  "PB3_UNUSE23";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TransferFileType_entries[] = {
  { {TransferFileType_names + 0, 17}, 2 },
  { {TransferFileType_names + 17, 16}, 1 },
  { {TransferFileType_names + 33, 11}, 0 },
};

static const int TransferFileType_entries_by_number[] = {
  2, // 0 -> PB3_UNUSE23
  1, // 1 -> FILE_TYPE_ONLINE
  0, // 2 -> FILE_TYPE_OFFLINE
};

const std::string& TransferFileType_Name(
    TransferFileType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TransferFileType_entries,
          TransferFileType_entries_by_number,
          3, TransferFileType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TransferFileType_entries,
      TransferFileType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TransferFileType_strings[idx].get();
}
bool TransferFileType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferFileType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TransferFileType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TransferFileType>(int_value);
  }
  return success;
}
bool ClientFileState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientFileState_strings[4] = {};

static const char ClientFileState_names[] =
  "CLIENT_FILE_CANCEL"
  "CLIENT_FILE_DONE"
  "CLIENT_FILE_PEER_READY"
  "CLIENT_FILE_REFUSE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientFileState_entries[] = {
  { {ClientFileState_names + 0, 18}, 1 },
  { {ClientFileState_names + 18, 16}, 3 },
  { {ClientFileState_names + 34, 22}, 0 },
  { {ClientFileState_names + 56, 18}, 2 },
};

static const int ClientFileState_entries_by_number[] = {
  2, // 0 -> CLIENT_FILE_PEER_READY
  0, // 1 -> CLIENT_FILE_CANCEL
  3, // 2 -> CLIENT_FILE_REFUSE
  1, // 3 -> CLIENT_FILE_DONE
};

const std::string& ClientFileState_Name(
    ClientFileState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientFileState_entries,
          ClientFileState_entries_by_number,
          4, ClientFileState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientFileState_entries,
      ClientFileState_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientFileState_strings[idx].get();
}
bool ClientFileState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientFileState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientFileState_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ClientFileState>(int_value);
  }
  return success;
}
bool ClientFileRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientFileRole_strings[5] = {};

static const char ClientFileRole_names[] =
  "CLIENT_OFFLINE_DOWNLOAD"
  "CLIENT_OFFLINE_UPLOAD"
  "CLIENT_REALTIME_RECVER"
  "CLIENT_REALTIME_SENDER"
  "PB3_UNUSE24";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientFileRole_entries[] = {
  { {ClientFileRole_names + 0, 23}, 4 },
  { {ClientFileRole_names + 23, 21}, 3 },
  { {ClientFileRole_names + 44, 22}, 2 },
  { {ClientFileRole_names + 66, 22}, 1 },
  { {ClientFileRole_names + 88, 11}, 0 },
};

static const int ClientFileRole_entries_by_number[] = {
  4, // 0 -> PB3_UNUSE24
  3, // 1 -> CLIENT_REALTIME_SENDER
  2, // 2 -> CLIENT_REALTIME_RECVER
  1, // 3 -> CLIENT_OFFLINE_UPLOAD
  0, // 4 -> CLIENT_OFFLINE_DOWNLOAD
};

const std::string& ClientFileRole_Name(
    ClientFileRole value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientFileRole_entries,
          ClientFileRole_entries_by_number,
          5, ClientFileRole_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientFileRole_entries,
      ClientFileRole_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientFileRole_strings[idx].get();
}
bool ClientFileRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientFileRole* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientFileRole_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ClientFileRole>(int_value);
  }
  return success;
}
bool FileServerError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FileServerError_strings[13] = {};

static const char FileServerError_names[] =
  "FILE_SERVER_ERRNO_CREATE_TASK_ERROR"
  "FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR"
  "FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK"
  "FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN"
  "FILE_SERVER_ERRNO_OK"
  "FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR"
  "FILE_SERVER_ERRNO_PULL_DATA_FINISHED"
  "FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER"
  "FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR"
  "FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR"
  "FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR"
  "FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR"
  "FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FileServerError_entries[] = {
  { {FileServerError_names + 0, 35}, 2 },
  { {FileServerError_names + 35, 38}, 1 },
  { {FileServerError_names + 73, 39}, 4 },
  { {FileServerError_names + 112, 37}, 3 },
  { {FileServerError_names + 149, 20}, 0 },
  { {FileServerError_names + 169, 43}, 10 },
  { {FileServerError_names + 212, 36}, 12 },
  { {FileServerError_names + 248, 41}, 6 },
  { {FileServerError_names + 289, 39}, 7 },
  { {FileServerError_names + 328, 43}, 8 },
  { {FileServerError_names + 371, 50}, 9 },
  { {FileServerError_names + 421, 45}, 11 },
  { {FileServerError_names + 466, 48}, 5 },
};

static const int FileServerError_entries_by_number[] = {
  4, // 0 -> FILE_SERVER_ERRNO_OK
  1, // 1 -> FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR
  0, // 2 -> FILE_SERVER_ERRNO_CREATE_TASK_ERROR
  3, // 3 -> FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN
  2, // 4 -> FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK
  12, // 5 -> FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID
  7, // 6 -> FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER
  8, // 7 -> FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR
  9, // 8 -> FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR
  10, // 9 -> FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR
  5, // 10 -> FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR
  11, // 11 -> FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR
  6, // 12 -> FILE_SERVER_ERRNO_PULL_DATA_FINISHED
};

const std::string& FileServerError_Name(
    FileServerError value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FileServerError_entries,
          FileServerError_entries_by_number,
          13, FileServerError_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FileServerError_entries,
      FileServerError_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FileServerError_strings[idx].get();
}
bool FileServerError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileServerError* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FileServerError_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<FileServerError>(int_value);
  }
  return success;
}
bool SessionStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SessionStatusType_strings[2] = {};

static const char SessionStatusType_names[] =
  "SESSION_STATUS_DELETE"
  "SESSION_STATUS_OK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SessionStatusType_entries[] = {
  { {SessionStatusType_names + 0, 21}, 1 },
  { {SessionStatusType_names + 21, 17}, 0 },
};

static const int SessionStatusType_entries_by_number[] = {
  1, // 0 -> SESSION_STATUS_OK
  0, // 1 -> SESSION_STATUS_DELETE
};

const std::string& SessionStatusType_Name(
    SessionStatusType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SessionStatusType_entries,
          SessionStatusType_entries_by_number,
          2, SessionStatusType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SessionStatusType_entries,
      SessionStatusType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SessionStatusType_strings[idx].get();
}
bool SessionStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionStatusType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SessionStatusType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<SessionStatusType>(int_value);
  }
  return success;
}
bool DepartmentStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DepartmentStatusType_strings[2] = {};

static const char DepartmentStatusType_names[] =
  "DEPT_STATUS_DELETE"
  "DEPT_STATUS_OK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DepartmentStatusType_entries[] = {
  { {DepartmentStatusType_names + 0, 18}, 1 },
  { {DepartmentStatusType_names + 18, 14}, 0 },
};

static const int DepartmentStatusType_entries_by_number[] = {
  1, // 0 -> DEPT_STATUS_OK
  0, // 1 -> DEPT_STATUS_DELETE
};

const std::string& DepartmentStatusType_Name(
    DepartmentStatusType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DepartmentStatusType_entries,
          DepartmentStatusType_entries_by_number,
          2, DepartmentStatusType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DepartmentStatusType_entries,
      DepartmentStatusType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DepartmentStatusType_strings[idx].get();
}
bool DepartmentStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DepartmentStatusType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DepartmentStatusType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DepartmentStatusType>(int_value);
  }
  return success;
}
bool UserRelationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UserRelationType_strings[4] = {};

static const char UserRelationType_names[] =
  "RELATION_FOLLOW"
  "RELATION_FRIEND"
  "RELATION_RECOMMEND"
  "RELATION_UNCONFIRMED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UserRelationType_entries[] = {
  { {UserRelationType_names + 0, 15}, 2 },
  { {UserRelationType_names + 15, 15}, 1 },
  { {UserRelationType_names + 30, 18}, 0 },
  { {UserRelationType_names + 48, 20}, 3 },
};

static const int UserRelationType_entries_by_number[] = {
  2, // 0 -> RELATION_RECOMMEND
  1, // 1 -> RELATION_FRIEND
  0, // 2 -> RELATION_FOLLOW
  3, // 3 -> RELATION_UNCONFIRMED
};

const std::string& UserRelationType_Name(
    UserRelationType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UserRelationType_entries,
          UserRelationType_entries_by_number,
          4, UserRelationType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UserRelationType_entries,
      UserRelationType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UserRelationType_strings[idx].get();
}
bool UserRelationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserRelationType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UserRelationType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<UserRelationType>(int_value);
  }
  return success;
}

// ===================================================================

void IpAddr::InitAsDefaultInstance() {
}
class IpAddr::_Internal {
 public:
};

IpAddr::IpAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.IpAddr)
}
IpAddr::IpAddr(const IpAddr& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.IpAddr)
}

void IpAddr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpAddr_IM_2eBaseDefine_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

IpAddr::~IpAddr() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.IpAddr)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IpAddr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IpAddr::ArenaDtor(void* object) {
  IpAddr* _this = reinterpret_cast< IpAddr* >(object);
  (void)_this;
}
void IpAddr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IpAddr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpAddr& IpAddr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpAddr_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void IpAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.IpAddr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  port_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IpAddr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpAddr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.IpAddr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.IpAddr.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.IpAddr)
  return target;
}

size_t IpAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.IpAddr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpAddr::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IpAddr*>(
      &from));
}

void IpAddr::MergeFrom(const IpAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.IpAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void IpAddr::CopyFrom(const IpAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.IpAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddr::IsInitialized() const {
  return true;
}

void IpAddr::InternalSwap(IpAddr* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

std::string IpAddr::GetTypeName() const {
  return "IM.BaseDefine.IpAddr";
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_nick_name().empty()) {
    user_nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_nick_name(),
      GetArena());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
      GetArena());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  user_real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_real_name().empty()) {
    user_real_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_real_name(),
      GetArena());
  }
  user_tel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_tel().empty()) {
    user_tel_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_tel(),
      GetArena());
  }
  user_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_domain().empty()) {
    user_domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_domain(),
      GetArena());
  }
  sign_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign_info().empty()) {
    sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sign_info(),
      GetArena());
  }
  user_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_addr().empty()) {
    user_addr_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_addr(),
      GetArena());
  }
  user_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_pubkey().empty()) {
    user_pubkey_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_pubkey(),
      GetArena());
  }
  referral_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_referral_code().empty()) {
    referral_code_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_referral_code(),
      GetArena());
  }
  ::memcpy(&user_gender_, &from.user_gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&fans_cnt_) -
    reinterpret_cast<char*>(&user_gender_)) + sizeof(fans_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_IM_2eBaseDefine_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_tel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referral_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fans_cnt_) -
      reinterpret_cast<char*>(&user_gender_)) + sizeof(fans_cnt_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_tel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referral_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_nick_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_real_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_tel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sign_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_pubkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  referral_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&user_gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fans_cnt_) -
      reinterpret_cast<char*>(&user_gender_)) + sizeof(fans_cnt_));
  _internal_metadata_.Clear<std::string>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 user_gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_nick_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 department_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          department_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_real_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_user_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_tel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_user_tel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_domain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_user_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sign_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sign_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 updated = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.UserRelationType relation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_relation(static_cast<::IM::BaseDefine::UserRelationType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 fans_cnt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          fans_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_addr = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_user_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_pubkey = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_user_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string referral_code = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_referral_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // uint32 user_gender = 2;
  if (this->user_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_gender(), target);
  }

  // string user_nick_name = 3;
  if (this->user_nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_nick_name().data(), static_cast<int>(this->_internal_user_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_nick_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_nick_name(), target);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.avatar_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar_url(), target);
  }

  // uint32 department_id = 5;
  if (this->department_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_department_id(), target);
  }

  // string email = 6;
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.email");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_email(), target);
  }

  // string user_real_name = 7;
  if (this->user_real_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_real_name().data(), static_cast<int>(this->_internal_user_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_real_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_real_name(), target);
  }

  // string user_tel = 8;
  if (this->user_tel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_tel().data(), static_cast<int>(this->_internal_user_tel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_tel");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_user_tel(), target);
  }

  // string user_domain = 9;
  if (this->user_domain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_domain().data(), static_cast<int>(this->_internal_user_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_domain");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_user_domain(), target);
  }

  // uint32 status = 10;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_status(), target);
  }

  // string sign_info = 11;
  if (this->sign_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign_info().data(), static_cast<int>(this->_internal_sign_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.sign_info");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_sign_info(), target);
  }

  // uint32 updated = 12;
  if (this->updated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_updated(), target);
  }

  // .IM.BaseDefine.UserRelationType relation = 13;
  if (this->relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_relation(), target);
  }

  // uint32 fans_cnt = 14;
  if (this->fans_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_fans_cnt(), target);
  }

  // string user_addr = 15;
  if (this->user_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_addr().data(), static_cast<int>(this->_internal_user_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_addr");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_user_addr(), target);
  }

  // string user_pubkey = 16;
  if (this->user_pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_pubkey().data(), static_cast<int>(this->_internal_user_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.user_pubkey");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_user_pubkey(), target);
  }

  // string referral_code = 17;
  if (this->referral_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_referral_code().data(), static_cast<int>(this->_internal_referral_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserInfo.referral_code");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_referral_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string user_nick_name = 3;
  if (this->user_nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_nick_name());
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // string email = 6;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string user_real_name = 7;
  if (this->user_real_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_real_name());
  }

  // string user_tel = 8;
  if (this->user_tel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_tel());
  }

  // string user_domain = 9;
  if (this->user_domain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_domain());
  }

  // string sign_info = 11;
  if (this->sign_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign_info());
  }

  // string user_addr = 15;
  if (this->user_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_addr());
  }

  // string user_pubkey = 16;
  if (this->user_pubkey().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_pubkey());
  }

  // string referral_code = 17;
  if (this->referral_code().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_referral_code());
  }

  // uint32 user_gender = 2;
  if (this->user_gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_gender());
  }

  // uint32 department_id = 5;
  if (this->department_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_department_id());
  }

  // uint32 status = 10;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  // uint32 updated = 12;
  if (this->updated() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated());
  }

  // .IM.BaseDefine.UserRelationType relation = 13;
  if (this->relation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relation());
  }

  // uint32 fans_cnt = 14;
  if (this->fans_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fans_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserInfo*>(
      &from));
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.user_nick_name().size() > 0) {
    _internal_set_user_nick_name(from._internal_user_nick_name());
  }
  if (from.avatar_url().size() > 0) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
  if (from.user_real_name().size() > 0) {
    _internal_set_user_real_name(from._internal_user_real_name());
  }
  if (from.user_tel().size() > 0) {
    _internal_set_user_tel(from._internal_user_tel());
  }
  if (from.user_domain().size() > 0) {
    _internal_set_user_domain(from._internal_user_domain());
  }
  if (from.sign_info().size() > 0) {
    _internal_set_sign_info(from._internal_sign_info());
  }
  if (from.user_addr().size() > 0) {
    _internal_set_user_addr(from._internal_user_addr());
  }
  if (from.user_pubkey().size() > 0) {
    _internal_set_user_pubkey(from._internal_user_pubkey());
  }
  if (from.referral_code().size() > 0) {
    _internal_set_referral_code(from._internal_referral_code());
  }
  if (from.user_gender() != 0) {
    _internal_set_user_gender(from._internal_user_gender());
  }
  if (from.department_id() != 0) {
    _internal_set_department_id(from._internal_department_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.updated() != 0) {
    _internal_set_updated(from._internal_updated());
  }
  if (from.relation() != 0) {
    _internal_set_relation(from._internal_relation());
  }
  if (from.fans_cnt() != 0) {
    _internal_set_fans_cnt(from._internal_fans_cnt());
  }
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_nick_name_.Swap(&other->user_nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_real_name_.Swap(&other->user_real_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_tel_.Swap(&other->user_tel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_domain_.Swap(&other->user_domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sign_info_.Swap(&other->sign_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_addr_.Swap(&other->user_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_pubkey_.Swap(&other->user_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  referral_code_.Swap(&other->referral_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, fans_cnt_)
      + sizeof(UserInfo::fans_cnt_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, user_gender_)>(
          reinterpret_cast<char*>(&user_gender_),
          reinterpret_cast<char*>(&other->user_gender_));
}

std::string UserInfo::GetTypeName() const {
  return "IM.BaseDefine.UserInfo";
}


// ===================================================================

void ContactSessionInfo::InitAsDefaultInstance() {
}
class ContactSessionInfo::_Internal {
 public:
};

ContactSessionInfo::ContactSessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.ContactSessionInfo)
}
ContactSessionInfo::ContactSessionInfo(const ContactSessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session_id(),
      GetArena());
  }
  latest_msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latest_msg_data().empty()) {
    latest_msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_latest_msg_data(),
      GetArena());
  }
  latest_msg_from_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latest_msg_from_user_id().empty()) {
    latest_msg_from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_latest_msg_from_user_id(),
      GetArena());
  }
  ::memcpy(&session_type_, &from.session_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_msg_type_) -
    reinterpret_cast<char*>(&session_type_)) + sizeof(latest_msg_type_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ContactSessionInfo)
}

void ContactSessionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContactSessionInfo_IM_2eBaseDefine_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_msg_from_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_msg_type_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(latest_msg_type_));
}

ContactSessionInfo::~ContactSessionInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ContactSessionInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ContactSessionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_msg_from_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContactSessionInfo::ArenaDtor(void* object) {
  ContactSessionInfo* _this = reinterpret_cast< ContactSessionInfo* >(object);
  (void)_this;
}
void ContactSessionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContactSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContactSessionInfo& ContactSessionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContactSessionInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void ContactSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ContactSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latest_msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latest_msg_from_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_msg_type_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(latest_msg_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* ContactSessionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionStatusType session_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_status(static_cast<::IM::BaseDefine::SessionStatusType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 updated_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          updated_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 latest_msg_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          latest_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes latest_msg_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_latest_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.MsgType latest_msg_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_latest_msg_type(static_cast<::IM::BaseDefine::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // string latest_msg_from_user_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_latest_msg_from_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContactSessionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.ContactSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.ContactSessionInfo.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // .IM.BaseDefine.SessionStatusType session_status = 3;
  if (this->session_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_session_status(), target);
  }

  // uint32 updated_time = 4;
  if (this->updated_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_time(), target);
  }

  // uint32 latest_msg_id = 5;
  if (this->latest_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_latest_msg_id(), target);
  }

  // bytes latest_msg_data = 6;
  if (this->latest_msg_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_latest_msg_data(), target);
  }

  // .IM.BaseDefine.MsgType latest_msg_type = 7;
  if (this->latest_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_latest_msg_type(), target);
  }

  // string latest_msg_from_user_id = 8;
  if (this->latest_msg_from_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latest_msg_from_user_id().data(), static_cast<int>(this->_internal_latest_msg_from_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_latest_msg_from_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.ContactSessionInfo)
  return target;
}

size_t ContactSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ContactSessionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // bytes latest_msg_data = 6;
  if (this->latest_msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latest_msg_data());
  }

  // string latest_msg_from_user_id = 8;
  if (this->latest_msg_from_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latest_msg_from_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // .IM.BaseDefine.SessionStatusType session_status = 3;
  if (this->session_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_status());
  }

  // uint32 updated_time = 4;
  if (this->updated_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updated_time());
  }

  // uint32 latest_msg_id = 5;
  if (this->latest_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_latest_msg_id());
  }

  // .IM.BaseDefine.MsgType latest_msg_type = 7;
  if (this->latest_msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_latest_msg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactSessionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ContactSessionInfo*>(
      &from));
}

void ContactSessionInfo::MergeFrom(const ContactSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ContactSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.latest_msg_data().size() > 0) {
    _internal_set_latest_msg_data(from._internal_latest_msg_data());
  }
  if (from.latest_msg_from_user_id().size() > 0) {
    _internal_set_latest_msg_from_user_id(from._internal_latest_msg_from_user_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.session_status() != 0) {
    _internal_set_session_status(from._internal_session_status());
  }
  if (from.updated_time() != 0) {
    _internal_set_updated_time(from._internal_updated_time());
  }
  if (from.latest_msg_id() != 0) {
    _internal_set_latest_msg_id(from._internal_latest_msg_id());
  }
  if (from.latest_msg_type() != 0) {
    _internal_set_latest_msg_type(from._internal_latest_msg_type());
  }
}

void ContactSessionInfo::CopyFrom(const ContactSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ContactSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactSessionInfo::IsInitialized() const {
  return true;
}

void ContactSessionInfo::InternalSwap(ContactSessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latest_msg_data_.Swap(&other->latest_msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latest_msg_from_user_id_.Swap(&other->latest_msg_from_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContactSessionInfo, latest_msg_type_)
      + sizeof(ContactSessionInfo::latest_msg_type_)
      - PROTOBUF_FIELD_OFFSET(ContactSessionInfo, session_type_)>(
          reinterpret_cast<char*>(&session_type_),
          reinterpret_cast<char*>(&other->session_type_));
}

std::string ContactSessionInfo::GetTypeName() const {
  return "IM.BaseDefine.ContactSessionInfo";
}


// ===================================================================

void UserStat::InitAsDefaultInstance() {
}
class UserStat::_Internal {
 public:
};

UserStat::UserStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.UserStat)
}
UserStat::UserStat(const UserStat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserStat)
}

void UserStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserStat_IM_2eBaseDefine_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

UserStat::~UserStat() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserStat)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UserStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserStat::ArenaDtor(void* object) {
  UserStat* _this = reinterpret_cast< UserStat* >(object);
  (void)_this;
}
void UserStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserStat& UserStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserStat_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void UserStat::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* UserStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.UserStatType status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::IM::BaseDefine::UserStatType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.UserStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserStat.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.UserStatType status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.UserStat)
  return target;
}

size_t UserStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .IM.BaseDefine.UserStatType status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserStat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserStat*>(
      &from));
}

void UserStat::MergeFrom(const UserStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void UserStat::CopyFrom(const UserStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStat::IsInitialized() const {
  return true;
}

void UserStat::InternalSwap(UserStat* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

std::string UserStat::GetTypeName() const {
  return "IM.BaseDefine.UserStat";
}


// ===================================================================

void ServerUserStat::InitAsDefaultInstance() {
}
class ServerUserStat::_Internal {
 public:
};

ServerUserStat::ServerUserStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.ServerUserStat)
}
ServerUserStat::ServerUserStat(const ServerUserStat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ServerUserStat)
}

void ServerUserStat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerUserStat_IM_2eBaseDefine_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(client_type_));
}

ServerUserStat::~ServerUserStat() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ServerUserStat)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ServerUserStat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerUserStat::ArenaDtor(void* object) {
  ServerUserStat* _this = reinterpret_cast< ServerUserStat* >(object);
  (void)_this;
}
void ServerUserStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerUserStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerUserStat& ServerUserStat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerUserStat_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void ServerUserStat::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ServerUserStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(client_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* ServerUserStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.UserStatType status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::IM::BaseDefine::UserStatType>(val));
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.ClientType client_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_client_type(static_cast<::IM::BaseDefine::ClientType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerUserStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.ServerUserStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.ServerUserStat.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.UserStatType status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_client_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.ServerUserStat)
  return target;
}

size_t ServerUserStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ServerUserStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .IM.BaseDefine.UserStatType status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerUserStat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerUserStat*>(
      &from));
}

void ServerUserStat::MergeFrom(const ServerUserStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ServerUserStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.client_type() != 0) {
    _internal_set_client_type(from._internal_client_type());
  }
}

void ServerUserStat::CopyFrom(const ServerUserStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ServerUserStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUserStat::IsInitialized() const {
  return true;
}

void ServerUserStat::InternalSwap(ServerUserStat* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerUserStat, client_type_)
      + sizeof(ServerUserStat::client_type_)
      - PROTOBUF_FIELD_OFFSET(ServerUserStat, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

std::string ServerUserStat::GetTypeName() const {
  return "IM.BaseDefine.ServerUserStat";
}


// ===================================================================

void UnreadInfo::InitAsDefaultInstance() {
}
class UnreadInfo::_Internal {
 public:
};

UnreadInfo::UnreadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  all_pay_msg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.UnreadInfo)
}
UnreadInfo::UnreadInfo(const UnreadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      all_pay_msg_(from.all_pay_msg_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session_id(),
      GetArena());
  }
  latest_msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latest_msg_data().empty()) {
    latest_msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_latest_msg_data(),
      GetArena());
  }
  latest_msg_from_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latest_msg_from_user_id().empty()) {
    latest_msg_from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_latest_msg_from_user_id(),
      GetArena());
  }
  ::memcpy(&session_type_, &from.session_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_msg_type_) -
    reinterpret_cast<char*>(&session_type_)) + sizeof(latest_msg_type_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UnreadInfo)
}

void UnreadInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnreadInfo_IM_2eBaseDefine_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_msg_from_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_msg_type_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(latest_msg_type_));
}

UnreadInfo::~UnreadInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UnreadInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UnreadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_msg_from_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnreadInfo::ArenaDtor(void* object) {
  UnreadInfo* _this = reinterpret_cast< UnreadInfo* >(object);
  (void)_this;
}
void UnreadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnreadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnreadInfo& UnreadInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnreadInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void UnreadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UnreadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  all_pay_msg_.Clear();
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latest_msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latest_msg_from_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_msg_type_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(latest_msg_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* UnreadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 unread_cnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unread_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 latest_msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          latest_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes latest_msg_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_latest_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.MsgType latest_msg_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_latest_msg_type(static_cast<::IM::BaseDefine::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // string latest_msg_from_user_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_latest_msg_from_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes all_pay_msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_all_pay_msg();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnreadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.UnreadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UnreadInfo.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 unread_cnt = 3;
  if (this->unread_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unread_cnt(), target);
  }

  // uint32 latest_msg_id = 4;
  if (this->latest_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_latest_msg_id(), target);
  }

  // bytes latest_msg_data = 5;
  if (this->latest_msg_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_latest_msg_data(), target);
  }

  // .IM.BaseDefine.MsgType latest_msg_type = 6;
  if (this->latest_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_latest_msg_type(), target);
  }

  // string latest_msg_from_user_id = 7;
  if (this->latest_msg_from_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latest_msg_from_user_id().data(), static_cast<int>(this->_internal_latest_msg_from_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UnreadInfo.latest_msg_from_user_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_latest_msg_from_user_id(), target);
  }

  // repeated bytes all_pay_msg = 8;
  for (int i = 0, n = this->_internal_all_pay_msg_size(); i < n; i++) {
    const auto& s = this->_internal_all_pay_msg(i);
    target = stream->WriteBytes(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.UnreadInfo)
  return target;
}

size_t UnreadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UnreadInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes all_pay_msg = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(all_pay_msg_.size());
  for (int i = 0, n = all_pay_msg_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      all_pay_msg_.Get(i));
  }

  // string session_id = 1;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // bytes latest_msg_data = 5;
  if (this->latest_msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_latest_msg_data());
  }

  // string latest_msg_from_user_id = 7;
  if (this->latest_msg_from_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latest_msg_from_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 unread_cnt = 3;
  if (this->unread_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unread_cnt());
  }

  // uint32 latest_msg_id = 4;
  if (this->latest_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_latest_msg_id());
  }

  // .IM.BaseDefine.MsgType latest_msg_type = 6;
  if (this->latest_msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_latest_msg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnreadInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UnreadInfo*>(
      &from));
}

void UnreadInfo::MergeFrom(const UnreadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UnreadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  all_pay_msg_.MergeFrom(from.all_pay_msg_);
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.latest_msg_data().size() > 0) {
    _internal_set_latest_msg_data(from._internal_latest_msg_data());
  }
  if (from.latest_msg_from_user_id().size() > 0) {
    _internal_set_latest_msg_from_user_id(from._internal_latest_msg_from_user_id());
  }
  if (from.session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from.unread_cnt() != 0) {
    _internal_set_unread_cnt(from._internal_unread_cnt());
  }
  if (from.latest_msg_id() != 0) {
    _internal_set_latest_msg_id(from._internal_latest_msg_id());
  }
  if (from.latest_msg_type() != 0) {
    _internal_set_latest_msg_type(from._internal_latest_msg_type());
  }
}

void UnreadInfo::CopyFrom(const UnreadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UnreadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadInfo::IsInitialized() const {
  return true;
}

void UnreadInfo::InternalSwap(UnreadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  all_pay_msg_.InternalSwap(&other->all_pay_msg_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latest_msg_data_.Swap(&other->latest_msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latest_msg_from_user_id_.Swap(&other->latest_msg_from_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnreadInfo, latest_msg_type_)
      + sizeof(UnreadInfo::latest_msg_type_)
      - PROTOBUF_FIELD_OFFSET(UnreadInfo, session_type_)>(
          reinterpret_cast<char*>(&session_type_),
          reinterpret_cast<char*>(&other->session_type_));
}

std::string UnreadInfo::GetTypeName() const {
  return "IM.BaseDefine.UnreadInfo";
}


// ===================================================================

void MsgInfo::InitAsDefaultInstance() {
}
class MsgInfo::_Internal {
 public:
};

MsgInfo::MsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.MsgInfo)
}
MsgInfo::MsgInfo(const MsgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  from_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_session_id().empty()) {
    from_session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_session_id(),
      GetArena());
  }
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg_data(),
      GetArena());
  }
  msg_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_sig().empty()) {
    msg_sig_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg_sig(),
      GetArena());
  }
  ::memcpy(&msg_id_, &from.msg_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.MsgInfo)
}

void MsgInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgInfo_IM_2eBaseDefine_2eproto.base);
  from_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
}

MsgInfo::~MsgInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.MsgInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void MsgInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MsgInfo::ArenaDtor(void* object) {
  MsgInfo* _this = reinterpret_cast< MsgInfo* >(object);
  (void)_this;
}
void MsgInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgInfo& MsgInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void MsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.MsgInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_sig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&msg_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&msg_id_)) + sizeof(msg_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* MsgInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_from_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.MsgType msg_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::IM::BaseDefine::MsgType>(val));
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_sig = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_msg_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.MsgInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_id(), target);
  }

  // string from_session_id = 2;
  if (this->from_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_session_id().data(), static_cast<int>(this->_internal_from_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.MsgInfo.from_session_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_from_session_id(), target);
  }

  // uint32 create_time = 3;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_create_time(), target);
  }

  // .IM.BaseDefine.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_msg_type(), target);
  }

  // bytes msg_data = 5;
  if (this->msg_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_msg_data(), target);
  }

  // bytes msg_sig = 6;
  if (this->msg_sig().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_msg_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.MsgInfo)
  return target;
}

size_t MsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.MsgInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_session_id = 2;
  if (this->from_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_session_id());
  }

  // bytes msg_data = 5;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // bytes msg_sig = 6;
  if (this->msg_sig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_sig());
  }

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msg_id());
  }

  // uint32 create_time = 3;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_create_time());
  }

  // .IM.BaseDefine.MsgType msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MsgInfo*>(
      &from));
}

void MsgInfo::MergeFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.MsgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_session_id().size() > 0) {
    _internal_set_from_session_id(from._internal_from_session_id());
  }
  if (from.msg_data().size() > 0) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (from.msg_sig().size() > 0) {
    _internal_set_msg_sig(from._internal_msg_sig());
  }
  if (from.msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from.msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
}

void MsgInfo::CopyFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.MsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfo::IsInitialized() const {
  return true;
}

void MsgInfo::InternalSwap(MsgInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  from_session_id_.Swap(&other->from_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  msg_sig_.Swap(&other->msg_sig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgInfo, msg_type_)
      + sizeof(MsgInfo::msg_type_)
      - PROTOBUF_FIELD_OFFSET(MsgInfo, msg_id_)>(
          reinterpret_cast<char*>(&msg_id_),
          reinterpret_cast<char*>(&other->msg_id_));
}

std::string MsgInfo::GetTypeName() const {
  return "IM.BaseDefine.MsgInfo";
}


// ===================================================================

void BlogInfo::InitAsDefaultInstance() {
}
class BlogInfo::_Internal {
 public:
};

BlogInfo::BlogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.BlogInfo)
}
BlogInfo::BlogInfo(const BlogInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  writer_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_writer_user_id().empty()) {
    writer_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_writer_user_id(),
      GetArena());
  }
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick_name().empty()) {
    nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nick_name(),
      GetArena());
  }
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_url().empty()) {
    avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
      GetArena());
  }
  blog_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blog_data().empty()) {
    blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_blog_data(),
      GetArena());
  }
  ::memcpy(&blog_id_, &from.blog_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&blog_id_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.BlogInfo)
}

void BlogInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlogInfo_IM_2eBaseDefine_2eproto.base);
  writer_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blog_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blog_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&blog_id_)) + sizeof(create_time_));
}

BlogInfo::~BlogInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.BlogInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void BlogInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  writer_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blog_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlogInfo::ArenaDtor(void* object) {
  BlogInfo* _this = reinterpret_cast< BlogInfo* >(object);
  (void)_this;
}
void BlogInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlogInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlogInfo& BlogInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlogInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void BlogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.BlogInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writer_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nick_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  blog_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&blog_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&blog_id_)) + sizeof(create_time_));
  _internal_metadata_.Clear<std::string>();
}

const char* BlogInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 blog_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blog_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string writer_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_writer_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 like_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          like_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 comment_cnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          comment_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 create_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blog_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_blog_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlogInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.BlogInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 blog_id = 1;
  if (this->blog_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_blog_id(), target);
  }

  // string writer_user_id = 2;
  if (this->writer_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_writer_user_id().data(), static_cast<int>(this->_internal_writer_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.BlogInfo.writer_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_writer_user_id(), target);
  }

  // string nick_name = 3;
  if (this->nick_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick_name().data(), static_cast<int>(this->_internal_nick_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.BlogInfo.nick_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick_name(), target);
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.BlogInfo.avatar_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar_url(), target);
  }

  // uint32 like_cnt = 5;
  if (this->like_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_like_cnt(), target);
  }

  // uint32 comment_cnt = 6;
  if (this->comment_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_comment_cnt(), target);
  }

  // uint32 create_time = 7;
  if (this->create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_create_time(), target);
  }

  // bytes blog_data = 8;
  if (this->blog_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_blog_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.BlogInfo)
  return target;
}

size_t BlogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.BlogInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string writer_user_id = 2;
  if (this->writer_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_writer_user_id());
  }

  // string nick_name = 3;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick_name());
  }

  // string avatar_url = 4;
  if (this->avatar_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // bytes blog_data = 8;
  if (this->blog_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blog_data());
  }

  // uint32 blog_id = 1;
  if (this->blog_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blog_id());
  }

  // uint32 like_cnt = 5;
  if (this->like_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_like_cnt());
  }

  // uint32 comment_cnt = 6;
  if (this->comment_cnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_comment_cnt());
  }

  // uint32 create_time = 7;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_create_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlogInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BlogInfo*>(
      &from));
}

void BlogInfo::MergeFrom(const BlogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.BlogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.writer_user_id().size() > 0) {
    _internal_set_writer_user_id(from._internal_writer_user_id());
  }
  if (from.nick_name().size() > 0) {
    _internal_set_nick_name(from._internal_nick_name());
  }
  if (from.avatar_url().size() > 0) {
    _internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from.blog_data().size() > 0) {
    _internal_set_blog_data(from._internal_blog_data());
  }
  if (from.blog_id() != 0) {
    _internal_set_blog_id(from._internal_blog_id());
  }
  if (from.like_cnt() != 0) {
    _internal_set_like_cnt(from._internal_like_cnt());
  }
  if (from.comment_cnt() != 0) {
    _internal_set_comment_cnt(from._internal_comment_cnt());
  }
  if (from.create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
}

void BlogInfo::CopyFrom(const BlogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.BlogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlogInfo::IsInitialized() const {
  return true;
}

void BlogInfo::InternalSwap(BlogInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  writer_user_id_.Swap(&other->writer_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nick_name_.Swap(&other->nick_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  blog_data_.Swap(&other->blog_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlogInfo, create_time_)
      + sizeof(BlogInfo::create_time_)
      - PROTOBUF_FIELD_OFFSET(BlogInfo, blog_id_)>(
          reinterpret_cast<char*>(&blog_id_),
          reinterpret_cast<char*>(&other->blog_id_));
}

std::string BlogInfo::GetTypeName() const {
  return "IM.BaseDefine.BlogInfo";
}


// ===================================================================

void GroupVersionInfo::InitAsDefaultInstance() {
}
class GroupVersionInfo::_Internal {
 public:
};

GroupVersionInfo::GroupVersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.GroupVersionInfo)
}
GroupVersionInfo::GroupVersionInfo(const GroupVersionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.GroupVersionInfo)
}

void GroupVersionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupVersionInfo_IM_2eBaseDefine_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

GroupVersionInfo::~GroupVersionInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.GroupVersionInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GroupVersionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupVersionInfo::ArenaDtor(void* object) {
  GroupVersionInfo* _this = reinterpret_cast< GroupVersionInfo* >(object);
  (void)_this;
}
void GroupVersionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupVersionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupVersionInfo& GroupVersionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupVersionInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void GroupVersionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.GroupVersionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* GroupVersionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupVersionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.GroupVersionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.GroupVersionInfo.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.GroupVersionInfo)
  return target;
}

size_t GroupVersionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.GroupVersionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupVersionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GroupVersionInfo*>(
      &from));
}

void GroupVersionInfo::MergeFrom(const GroupVersionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.GroupVersionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void GroupVersionInfo::CopyFrom(const GroupVersionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.GroupVersionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupVersionInfo::IsInitialized() const {
  return true;
}

void GroupVersionInfo::InternalSwap(GroupVersionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

std::string GroupVersionInfo::GetTypeName() const {
  return "IM.BaseDefine.GroupVersionInfo";
}


// ===================================================================

void GroupInfo::InitAsDefaultInstance() {
}
class GroupInfo::_Internal {
 public:
};

GroupInfo::GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  group_member_list_(arena),
  group_member_users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.GroupInfo)
}
GroupInfo::GroupInfo(const GroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      group_member_list_(from.group_member_list_),
      group_member_users_(from.group_member_users_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
      GetArena());
  }
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_name().empty()) {
    group_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_name(),
      GetArena());
  }
  group_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_avatar().empty()) {
    group_avatar_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_avatar(),
      GetArena());
  }
  group_creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_creator_id().empty()) {
    group_creator_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_creator_id(),
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&version_)) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.GroupInfo)
}

void GroupInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupInfo_IM_2eBaseDefine_2eproto.base);
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_status_) -
      reinterpret_cast<char*>(&version_)) + sizeof(shield_status_));
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.GroupInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void GroupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_creator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GroupInfo::ArenaDtor(void* object) {
  GroupInfo* _this = reinterpret_cast< GroupInfo* >(object);
  (void)_this;
}
void GroupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupInfo& GroupInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_member_list_.Clear();
  group_member_users_.Clear();
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_creator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_status_) -
      reinterpret_cast<char*>(&version_)) + sizeof(shield_status_));
  _internal_metadata_.Clear<std::string>();
}

const char* GroupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_avatar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_group_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_creator_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_group_creator_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.GroupType group_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_group_type(static_cast<::IM::BaseDefine::GroupType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 shield_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          shield_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string group_member_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_member_list();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.UserInfo group_member_users = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_member_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.GroupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.GroupInfo.group_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group_id(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.GroupInfo.group_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_name(), target);
  }

  // string group_avatar = 4;
  if (this->group_avatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_avatar().data(), static_cast<int>(this->_internal_group_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.GroupInfo.group_avatar");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_group_avatar(), target);
  }

  // string group_creator_id = 5;
  if (this->group_creator_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_creator_id().data(), static_cast<int>(this->_internal_group_creator_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.GroupInfo.group_creator_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_group_creator_id(), target);
  }

  // .IM.BaseDefine.GroupType group_type = 6;
  if (this->group_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_group_type(), target);
  }

  // uint32 shield_status = 7;
  if (this->shield_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_shield_status(), target);
  }

  // repeated string group_member_list = 8;
  for (int i = 0, n = this->_internal_group_member_list_size(); i < n; i++) {
    const auto& s = this->_internal_group_member_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.GroupInfo.group_member_list");
    target = stream->WriteString(8, s, target);
  }

  // repeated .IM.BaseDefine.UserInfo group_member_users = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_member_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_group_member_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.GroupInfo)
  return target;
}

size_t GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.GroupInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string group_member_list = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_member_list_.size());
  for (int i = 0, n = group_member_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_member_list_.Get(i));
  }

  // repeated .IM.BaseDefine.UserInfo group_member_users = 9;
  total_size += 1UL * this->_internal_group_member_users_size();
  for (const auto& msg : this->group_member_users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // string group_name = 3;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // string group_avatar = 4;
  if (this->group_avatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_avatar());
  }

  // string group_creator_id = 5;
  if (this->group_creator_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_creator_id());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // .IM.BaseDefine.GroupType group_type = 6;
  if (this->group_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_group_type());
  }

  // uint32 shield_status = 7;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shield_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GroupInfo*>(
      &from));
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.GroupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_member_list_.MergeFrom(from.group_member_list_);
  group_member_users_.MergeFrom(from.group_member_users_);
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.group_name().size() > 0) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (from.group_avatar().size() > 0) {
    _internal_set_group_avatar(from._internal_group_avatar());
  }
  if (from.group_creator_id().size() > 0) {
    _internal_set_group_creator_id(from._internal_group_creator_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.group_type() != 0) {
    _internal_set_group_type(from._internal_group_type());
  }
  if (from.shield_status() != 0) {
    _internal_set_shield_status(from._internal_shield_status());
  }
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  return true;
}

void GroupInfo::InternalSwap(GroupInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  group_member_list_.InternalSwap(&other->group_member_list_);
  group_member_users_.InternalSwap(&other->group_member_users_);
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_avatar_.Swap(&other->group_avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_creator_id_.Swap(&other->group_creator_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupInfo, shield_status_)
      + sizeof(GroupInfo::shield_status_)
      - PROTOBUF_FIELD_OFFSET(GroupInfo, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

std::string GroupInfo::GetTypeName() const {
  return "IM.BaseDefine.GroupInfo";
}


// ===================================================================

void UserTokenInfo::InitAsDefaultInstance() {
}
class UserTokenInfo::_Internal {
 public:
};

UserTokenInfo::UserTokenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.UserTokenInfo)
}
UserTokenInfo::UserTokenInfo(const UserTokenInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  ::memcpy(&user_type_, &from.user_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&push_type_) -
    reinterpret_cast<char*>(&user_type_)) + sizeof(push_type_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.UserTokenInfo)
}

void UserTokenInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserTokenInfo_IM_2eBaseDefine_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&push_type_) -
      reinterpret_cast<char*>(&user_type_)) + sizeof(push_type_));
}

UserTokenInfo::~UserTokenInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.UserTokenInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void UserTokenInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserTokenInfo::ArenaDtor(void* object) {
  UserTokenInfo* _this = reinterpret_cast< UserTokenInfo* >(object);
  (void)_this;
}
void UserTokenInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserTokenInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserTokenInfo& UserTokenInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserTokenInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void UserTokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.UserTokenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&user_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&push_type_) -
      reinterpret_cast<char*>(&user_type_)) + sizeof(push_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* UserTokenInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.ClientType user_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_user_type(static_cast<::IM::BaseDefine::ClientType>(val));
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 push_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          push_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 push_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          push_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserTokenInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.UserTokenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserTokenInfo.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.ClientType user_type = 2;
  if (this->user_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_user_type(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.UserTokenInfo.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // uint32 push_count = 4;
  if (this->push_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_push_count(), target);
  }

  // uint32 push_type = 5;
  if (this->push_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_push_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.UserTokenInfo)
  return target;
}

size_t UserTokenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.UserTokenInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .IM.BaseDefine.ClientType user_type = 2;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_user_type());
  }

  // uint32 push_count = 4;
  if (this->push_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_push_count());
  }

  // uint32 push_type = 5;
  if (this->push_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_push_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTokenInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UserTokenInfo*>(
      &from));
}

void UserTokenInfo::MergeFrom(const UserTokenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.UserTokenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.user_type() != 0) {
    _internal_set_user_type(from._internal_user_type());
  }
  if (from.push_count() != 0) {
    _internal_set_push_count(from._internal_push_count());
  }
  if (from.push_type() != 0) {
    _internal_set_push_type(from._internal_push_type());
  }
}

void UserTokenInfo::CopyFrom(const UserTokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.UserTokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenInfo::IsInitialized() const {
  return true;
}

void UserTokenInfo::InternalSwap(UserTokenInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserTokenInfo, push_type_)
      + sizeof(UserTokenInfo::push_type_)
      - PROTOBUF_FIELD_OFFSET(UserTokenInfo, user_type_)>(
          reinterpret_cast<char*>(&user_type_),
          reinterpret_cast<char*>(&other->user_type_));
}

std::string UserTokenInfo::GetTypeName() const {
  return "IM.BaseDefine.UserTokenInfo";
}


// ===================================================================

void PushResult::InitAsDefaultInstance() {
}
class PushResult::_Internal {
 public:
};

PushResult::PushResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.PushResult)
}
PushResult::PushResult(const PushResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_token().empty()) {
    user_token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_token(),
      GetArena());
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.PushResult)
}

void PushResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushResult_IM_2eBaseDefine_2eproto.base);
  user_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0u;
}

PushResult::~PushResult() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.PushResult)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PushResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushResult::ArenaDtor(void* object) {
  PushResult* _this = reinterpret_cast< PushResult* >(object);
  (void)_this;
}
void PushResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushResult& PushResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushResult_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void PushResult::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.PushResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_code_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* PushResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.PushResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_token().data(), static_cast<int>(this->_internal_user_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.PushResult.user_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_token(), target);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.PushResult)
  return target;
}

size_t PushResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.PushResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_token = 1;
  if (this->user_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_token());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PushResult*>(
      &from));
}

void PushResult::MergeFrom(const PushResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.PushResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_token().size() > 0) {
    _internal_set_user_token(from._internal_user_token());
  }
  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void PushResult::CopyFrom(const PushResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.PushResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushResult::IsInitialized() const {
  return true;
}

void PushResult::InternalSwap(PushResult* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_token_.Swap(&other->user_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_code_, other->result_code_);
}

std::string PushResult::GetTypeName() const {
  return "IM.BaseDefine.PushResult";
}


// ===================================================================

void ShieldStatus::InitAsDefaultInstance() {
}
class ShieldStatus::_Internal {
 public:
};

ShieldStatus::ShieldStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.ShieldStatus)
}
ShieldStatus::ShieldStatus(const ShieldStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_group_id().empty()) {
    group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
      GetArena());
  }
  shield_status_ = from.shield_status_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.ShieldStatus)
}

void ShieldStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShieldStatus_IM_2eBaseDefine_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shield_status_ = 0u;
}

ShieldStatus::~ShieldStatus() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.ShieldStatus)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void ShieldStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShieldStatus::ArenaDtor(void* object) {
  ShieldStatus* _this = reinterpret_cast< ShieldStatus* >(object);
  (void)_this;
}
void ShieldStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShieldStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShieldStatus& ShieldStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShieldStatus_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void ShieldStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.ShieldStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shield_status_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* ShieldStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shield_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          shield_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShieldStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.ShieldStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.ShieldStatus.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string group_id = 2;
  if (this->group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.ShieldStatus.group_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_id(), target);
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shield_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.ShieldStatus)
  return target;
}

size_t ShieldStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.ShieldStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string group_id = 2;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_id());
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shield_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShieldStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShieldStatus*>(
      &from));
}

void ShieldStatus::MergeFrom(const ShieldStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.ShieldStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.group_id().size() > 0) {
    _internal_set_group_id(from._internal_group_id());
  }
  if (from.shield_status() != 0) {
    _internal_set_shield_status(from._internal_shield_status());
  }
}

void ShieldStatus::CopyFrom(const ShieldStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.ShieldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldStatus::IsInitialized() const {
  return true;
}

void ShieldStatus::InternalSwap(ShieldStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(shield_status_, other->shield_status_);
}

std::string ShieldStatus::GetTypeName() const {
  return "IM.BaseDefine.ShieldStatus";
}


// ===================================================================

void OfflineFileInfo::InitAsDefaultInstance() {
}
class OfflineFileInfo::_Internal {
 public:
};

OfflineFileInfo::OfflineFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.OfflineFileInfo)
}
OfflineFileInfo::OfflineFileInfo(const OfflineFileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  from_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_user_id().empty()) {
    from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_user_id(),
      GetArena());
  }
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_task_id(),
      GetArena());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_name(),
      GetArena());
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.OfflineFileInfo)
}

void OfflineFileInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OfflineFileInfo_IM_2eBaseDefine_2eproto.base);
  from_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_size_ = 0u;
}

OfflineFileInfo::~OfflineFileInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.OfflineFileInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void OfflineFileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OfflineFileInfo::ArenaDtor(void* object) {
  OfflineFileInfo* _this = reinterpret_cast< OfflineFileInfo* >(object);
  (void)_this;
}
void OfflineFileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OfflineFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OfflineFileInfo& OfflineFileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OfflineFileInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void OfflineFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.OfflineFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_size_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* OfflineFileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 file_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OfflineFileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.OfflineFileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_user_id = 1;
  if (this->from_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_user_id().data(), static_cast<int>(this->_internal_from_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.OfflineFileInfo.from_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_user_id(), target);
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.OfflineFileInfo.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.OfflineFileInfo.file_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_name(), target);
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_file_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.OfflineFileInfo)
  return target;
}

size_t OfflineFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.OfflineFileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_user_id = 1;
  if (this->from_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_user_id());
  }

  // string task_id = 2;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_file_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OfflineFileInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const OfflineFileInfo*>(
      &from));
}

void OfflineFileInfo::MergeFrom(const OfflineFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.OfflineFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_user_id().size() > 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from.task_id().size() > 0) {
    _internal_set_task_id(from._internal_task_id());
  }
  if (from.file_name().size() > 0) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from.file_size() != 0) {
    _internal_set_file_size(from._internal_file_size());
  }
}

void OfflineFileInfo::CopyFrom(const OfflineFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.OfflineFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineFileInfo::IsInitialized() const {
  return true;
}

void OfflineFileInfo::InternalSwap(OfflineFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  from_user_id_.Swap(&other->from_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(file_size_, other->file_size_);
}

std::string OfflineFileInfo::GetTypeName() const {
  return "IM.BaseDefine.OfflineFileInfo";
}


// ===================================================================

void DepartInfo::InitAsDefaultInstance() {
}
class DepartInfo::_Internal {
 public:
};

DepartInfo::DepartInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.DepartInfo)
}
DepartInfo::DepartInfo(const DepartInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  dept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dept_name().empty()) {
    dept_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dept_name(),
      GetArena());
  }
  ::memcpy(&dept_id_, &from.dept_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dept_status_) -
    reinterpret_cast<char*>(&dept_id_)) + sizeof(dept_status_));
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.DepartInfo)
}

void DepartInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepartInfo_IM_2eBaseDefine_2eproto.base);
  dept_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dept_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dept_status_) -
      reinterpret_cast<char*>(&dept_id_)) + sizeof(dept_status_));
}

DepartInfo::~DepartInfo() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.DepartInfo)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void DepartInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dept_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DepartInfo::ArenaDtor(void* object) {
  DepartInfo* _this = reinterpret_cast< DepartInfo* >(object);
  (void)_this;
}
void DepartInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepartInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepartInfo& DepartInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepartInfo_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void DepartInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.DepartInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dept_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&dept_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dept_status_) -
      reinterpret_cast<char*>(&dept_id_)) + sizeof(dept_status_));
  _internal_metadata_.Clear<std::string>();
}

const char* DepartInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 dept_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dept_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dept_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dept_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 parent_dept_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parent_dept_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.DepartmentStatusType dept_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dept_status(static_cast<::IM::BaseDefine::DepartmentStatusType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepartInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.DepartInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dept_id = 1;
  if (this->dept_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dept_id(), target);
  }

  // uint32 priority = 2;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_priority(), target);
  }

  // string dept_name = 3;
  if (this->dept_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dept_name().data(), static_cast<int>(this->_internal_dept_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.DepartInfo.dept_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dept_name(), target);
  }

  // uint32 parent_dept_id = 4;
  if (this->parent_dept_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_parent_dept_id(), target);
  }

  // .IM.BaseDefine.DepartmentStatusType dept_status = 5;
  if (this->dept_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dept_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.DepartInfo)
  return target;
}

size_t DepartInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.DepartInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dept_name = 3;
  if (this->dept_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dept_name());
  }

  // uint32 dept_id = 1;
  if (this->dept_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dept_id());
  }

  // uint32 priority = 2;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  // uint32 parent_dept_id = 4;
  if (this->parent_dept_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parent_dept_id());
  }

  // .IM.BaseDefine.DepartmentStatusType dept_status = 5;
  if (this->dept_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dept_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepartInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DepartInfo*>(
      &from));
}

void DepartInfo::MergeFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.DepartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dept_name().size() > 0) {
    _internal_set_dept_name(from._internal_dept_name());
  }
  if (from.dept_id() != 0) {
    _internal_set_dept_id(from._internal_dept_id());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.parent_dept_id() != 0) {
    _internal_set_parent_dept_id(from._internal_parent_dept_id());
  }
  if (from.dept_status() != 0) {
    _internal_set_dept_status(from._internal_dept_status());
  }
}

void DepartInfo::CopyFrom(const DepartInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.DepartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartInfo::IsInitialized() const {
  return true;
}

void DepartInfo::InternalSwap(DepartInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  dept_name_.Swap(&other->dept_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepartInfo, dept_status_)
      + sizeof(DepartInfo::dept_status_)
      - PROTOBUF_FIELD_OFFSET(DepartInfo, dept_id_)>(
          reinterpret_cast<char*>(&dept_id_),
          reinterpret_cast<char*>(&other->dept_id_));
}

std::string DepartInfo::GetTypeName() const {
  return "IM.BaseDefine.DepartInfo";
}


// ===================================================================

void PushShieldStatus::InitAsDefaultInstance() {
}
class PushShieldStatus::_Internal {
 public:
};

PushShieldStatus::PushShieldStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.BaseDefine.PushShieldStatus)
}
PushShieldStatus::PushShieldStatus(const PushShieldStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  shield_status_ = from.shield_status_;
  // @@protoc_insertion_point(copy_constructor:IM.BaseDefine.PushShieldStatus)
}

void PushShieldStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushShieldStatus_IM_2eBaseDefine_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shield_status_ = 0u;
}

PushShieldStatus::~PushShieldStatus() {
  // @@protoc_insertion_point(destructor:IM.BaseDefine.PushShieldStatus)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void PushShieldStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushShieldStatus::ArenaDtor(void* object) {
  PushShieldStatus* _this = reinterpret_cast< PushShieldStatus* >(object);
  (void)_this;
}
void PushShieldStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushShieldStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushShieldStatus& PushShieldStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushShieldStatus_IM_2eBaseDefine_2eproto.base);
  return *internal_default_instance();
}


void PushShieldStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.BaseDefine.PushShieldStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shield_status_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* PushShieldStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shield_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          shield_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushShieldStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.BaseDefine.PushShieldStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.BaseDefine.PushShieldStatus.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shield_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.BaseDefine.PushShieldStatus)
  return target;
}

size_t PushShieldStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.BaseDefine.PushShieldStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shield_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushShieldStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PushShieldStatus*>(
      &from));
}

void PushShieldStatus::MergeFrom(const PushShieldStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.BaseDefine.PushShieldStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.shield_status() != 0) {
    _internal_set_shield_status(from._internal_shield_status());
  }
}

void PushShieldStatus::CopyFrom(const PushShieldStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.BaseDefine.PushShieldStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushShieldStatus::IsInitialized() const {
  return true;
}

void PushShieldStatus::InternalSwap(PushShieldStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(shield_status_, other->shield_status_);
}

std::string PushShieldStatus::GetTypeName() const {
  return "IM.BaseDefine.PushShieldStatus";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BaseDefine
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::IpAddr* Arena::CreateMaybeMessage< ::IM::BaseDefine::IpAddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::IpAddr >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::UserInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::ContactSessionInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::ContactSessionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::ContactSessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::UserStat* Arena::CreateMaybeMessage< ::IM::BaseDefine::UserStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::UserStat >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::ServerUserStat* Arena::CreateMaybeMessage< ::IM::BaseDefine::ServerUserStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::ServerUserStat >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::UnreadInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::UnreadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::UnreadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::MsgInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::MsgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::MsgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::BlogInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::BlogInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::BlogInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::GroupVersionInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::GroupVersionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::GroupVersionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::GroupInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::GroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::GroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::UserTokenInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::UserTokenInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::UserTokenInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::PushResult* Arena::CreateMaybeMessage< ::IM::BaseDefine::PushResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::PushResult >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::ShieldStatus* Arena::CreateMaybeMessage< ::IM::BaseDefine::ShieldStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::ShieldStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::OfflineFileInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::OfflineFileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::OfflineFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::DepartInfo* Arena::CreateMaybeMessage< ::IM::BaseDefine::DepartInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::DepartInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::BaseDefine::PushShieldStatus* Arena::CreateMaybeMessage< ::IM::BaseDefine::PushShieldStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::BaseDefine::PushShieldStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
