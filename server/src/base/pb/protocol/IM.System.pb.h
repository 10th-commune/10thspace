// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.System.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eSystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eSystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eSystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eSystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace System {
class IMGetSysMsgDataReq;
class IMGetSysMsgDataReqDefaultTypeInternal;
extern IMGetSysMsgDataReqDefaultTypeInternal _IMGetSysMsgDataReq_default_instance_;
class IMGetSysMsgDataRsp;
class IMGetSysMsgDataRspDefaultTypeInternal;
extern IMGetSysMsgDataRspDefaultTypeInternal _IMGetSysMsgDataRsp_default_instance_;
class IMSendSysMsgReq;
class IMSendSysMsgReqDefaultTypeInternal;
extern IMSendSysMsgReqDefaultTypeInternal _IMSendSysMsgReq_default_instance_;
class IMSendSysMsgRsp;
class IMSendSysMsgRspDefaultTypeInternal;
extern IMSendSysMsgRspDefaultTypeInternal _IMSendSysMsgRsp_default_instance_;
class IMSysGetStudyTimeReq;
class IMSysGetStudyTimeReqDefaultTypeInternal;
extern IMSysGetStudyTimeReqDefaultTypeInternal _IMSysGetStudyTimeReq_default_instance_;
class IMSysGetStudyTimeRsp;
class IMSysGetStudyTimeRspDefaultTypeInternal;
extern IMSysGetStudyTimeRspDefaultTypeInternal _IMSysGetStudyTimeRsp_default_instance_;
class IMSysMsgData;
class IMSysMsgDataDefaultTypeInternal;
extern IMSysMsgDataDefaultTypeInternal _IMSysMsgData_default_instance_;
class IMSysMsgReadDataAck;
class IMSysMsgReadDataAckDefaultTypeInternal;
extern IMSysMsgReadDataAckDefaultTypeInternal _IMSysMsgReadDataAck_default_instance_;
class IMSysMsgUnreadCntReq;
class IMSysMsgUnreadCntReqDefaultTypeInternal;
extern IMSysMsgUnreadCntReqDefaultTypeInternal _IMSysMsgUnreadCntReq_default_instance_;
class IMSysMsgUnreadCntRsp;
class IMSysMsgUnreadCntRspDefaultTypeInternal;
extern IMSysMsgUnreadCntRspDefaultTypeInternal _IMSysMsgUnreadCntRsp_default_instance_;
class StudyTimeInfo;
class StudyTimeInfoDefaultTypeInternal;
extern StudyTimeInfoDefaultTypeInternal _StudyTimeInfo_default_instance_;
class UnreadSysMsgCnt;
class UnreadSysMsgCntDefaultTypeInternal;
extern UnreadSysMsgCntDefaultTypeInternal _UnreadSysMsgCnt_default_instance_;
}  // namespace System
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::System::IMGetSysMsgDataReq* Arena::CreateMaybeMessage<::IM::System::IMGetSysMsgDataReq>(Arena*);
template<> ::IM::System::IMGetSysMsgDataRsp* Arena::CreateMaybeMessage<::IM::System::IMGetSysMsgDataRsp>(Arena*);
template<> ::IM::System::IMSendSysMsgReq* Arena::CreateMaybeMessage<::IM::System::IMSendSysMsgReq>(Arena*);
template<> ::IM::System::IMSendSysMsgRsp* Arena::CreateMaybeMessage<::IM::System::IMSendSysMsgRsp>(Arena*);
template<> ::IM::System::IMSysGetStudyTimeReq* Arena::CreateMaybeMessage<::IM::System::IMSysGetStudyTimeReq>(Arena*);
template<> ::IM::System::IMSysGetStudyTimeRsp* Arena::CreateMaybeMessage<::IM::System::IMSysGetStudyTimeRsp>(Arena*);
template<> ::IM::System::IMSysMsgData* Arena::CreateMaybeMessage<::IM::System::IMSysMsgData>(Arena*);
template<> ::IM::System::IMSysMsgReadDataAck* Arena::CreateMaybeMessage<::IM::System::IMSysMsgReadDataAck>(Arena*);
template<> ::IM::System::IMSysMsgUnreadCntReq* Arena::CreateMaybeMessage<::IM::System::IMSysMsgUnreadCntReq>(Arena*);
template<> ::IM::System::IMSysMsgUnreadCntRsp* Arena::CreateMaybeMessage<::IM::System::IMSysMsgUnreadCntRsp>(Arena*);
template<> ::IM::System::StudyTimeInfo* Arena::CreateMaybeMessage<::IM::System::StudyTimeInfo>(Arena*);
template<> ::IM::System::UnreadSysMsgCnt* Arena::CreateMaybeMessage<::IM::System::UnreadSysMsgCnt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace System {

enum SysMsgType : int {
  PB3_UNUSE31 = 0,
  SYS_MSG_BUDDY = 1,
  SYS_MSG_GROUP = 2,
  SYS_MSG_BLOG = 3,
  SYS_MSG_SYSTEM = 4,
  SysMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SysMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SysMsgType_IsValid(int value);
constexpr SysMsgType SysMsgType_MIN = PB3_UNUSE31;
constexpr SysMsgType SysMsgType_MAX = SYS_MSG_SYSTEM;
constexpr int SysMsgType_ARRAYSIZE = SysMsgType_MAX + 1;

const std::string& SysMsgType_Name(SysMsgType value);
template<typename T>
inline const std::string& SysMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SysMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SysMsgType_Name.");
  return SysMsgType_Name(static_cast<SysMsgType>(enum_t_value));
}
bool SysMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysMsgType* value);
enum SysMsgOper : int {
  PB3_UNUSE32 = 0,
  ADD_FRIEND_REQUEST = 1,
  ADD_FRIEND_AGREE = 2,
  ADD_FRIEND_DISAGREE = 3,
  ADD_GROUP_REQUEST = 4,
  ADD_GROUP_AGREE = 5,
  ADD_GROUP_DISAGREE = 6,
  PUSH_SYSTEM_MSG = 16,
  PUSH_INVITE_ADD_FRIEND_MSG = 17,
  PUSH_INVITE_ADD_GROUP_MSG = 18,
  SysMsgOper_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SysMsgOper_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SysMsgOper_IsValid(int value);
constexpr SysMsgOper SysMsgOper_MIN = PB3_UNUSE32;
constexpr SysMsgOper SysMsgOper_MAX = PUSH_INVITE_ADD_GROUP_MSG;
constexpr int SysMsgOper_ARRAYSIZE = SysMsgOper_MAX + 1;

const std::string& SysMsgOper_Name(SysMsgOper value);
template<typename T>
inline const std::string& SysMsgOper_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SysMsgOper>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SysMsgOper_Name.");
  return SysMsgOper_Name(static_cast<SysMsgOper>(enum_t_value));
}
bool SysMsgOper_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysMsgOper* value);
enum StatisticsType : int {
  PB3_UNUSE33 = 0,
  ALL = 1,
  DAY = 2,
  MONTH = 3,
  YEAR = 4,
  StatisticsType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatisticsType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatisticsType_IsValid(int value);
constexpr StatisticsType StatisticsType_MIN = PB3_UNUSE33;
constexpr StatisticsType StatisticsType_MAX = YEAR;
constexpr int StatisticsType_ARRAYSIZE = StatisticsType_MAX + 1;

const std::string& StatisticsType_Name(StatisticsType value);
template<typename T>
inline const std::string& StatisticsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatisticsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatisticsType_Name.");
  return StatisticsType_Name(static_cast<StatisticsType>(enum_t_value));
}
bool StatisticsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatisticsType* value);
// ===================================================================

class UnreadSysMsgCnt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.UnreadSysMsgCnt) */ {
 public:
  inline UnreadSysMsgCnt() : UnreadSysMsgCnt(nullptr) {};
  virtual ~UnreadSysMsgCnt();

  UnreadSysMsgCnt(const UnreadSysMsgCnt& from);
  UnreadSysMsgCnt(UnreadSysMsgCnt&& from) noexcept
    : UnreadSysMsgCnt() {
    *this = ::std::move(from);
  }

  inline UnreadSysMsgCnt& operator=(const UnreadSysMsgCnt& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnreadSysMsgCnt& operator=(UnreadSysMsgCnt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UnreadSysMsgCnt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnreadSysMsgCnt* internal_default_instance() {
    return reinterpret_cast<const UnreadSysMsgCnt*>(
               &_UnreadSysMsgCnt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UnreadSysMsgCnt& a, UnreadSysMsgCnt& b) {
    a.Swap(&b);
  }
  inline void Swap(UnreadSysMsgCnt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnreadSysMsgCnt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnreadSysMsgCnt* New() const final {
    return CreateMaybeMessage<UnreadSysMsgCnt>(nullptr);
  }

  UnreadSysMsgCnt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnreadSysMsgCnt>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UnreadSysMsgCnt& from);
  void MergeFrom(const UnreadSysMsgCnt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnreadSysMsgCnt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.UnreadSysMsgCnt";
  }
  protected:
  explicit UnreadSysMsgCnt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .IM.System.SysMsgType type = 1;
  void clear_type();
  ::IM::System::SysMsgType type() const;
  void set_type(::IM::System::SysMsgType value);
  private:
  ::IM::System::SysMsgType _internal_type() const;
  void _internal_set_type(::IM::System::SysMsgType value);
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.System.UnreadSysMsgCnt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMSysMsgData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMSysMsgData) */ {
 public:
  inline IMSysMsgData() : IMSysMsgData(nullptr) {};
  virtual ~IMSysMsgData();

  IMSysMsgData(const IMSysMsgData& from);
  IMSysMsgData(IMSysMsgData&& from) noexcept
    : IMSysMsgData() {
    *this = ::std::move(from);
  }

  inline IMSysMsgData& operator=(const IMSysMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSysMsgData& operator=(IMSysMsgData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSysMsgData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSysMsgData* internal_default_instance() {
    return reinterpret_cast<const IMSysMsgData*>(
               &_IMSysMsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMSysMsgData& a, IMSysMsgData& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSysMsgData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSysMsgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSysMsgData* New() const final {
    return CreateMaybeMessage<IMSysMsgData>(nullptr);
  }

  IMSysMsgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSysMsgData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSysMsgData& from);
  void MergeFrom(const IMSysMsgData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSysMsgData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMSysMsgData";
  }
  protected:
  explicit IMSysMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kTypeFieldNumber = 3,
  };
  // string from_id = 1;
  void clear_from_id();
  const std::string& from_id() const;
  void set_from_id(const std::string& value);
  void set_from_id(std::string&& value);
  void set_from_id(const char* value);
  void set_from_id(const char* value, size_t size);
  std::string* mutable_from_id();
  std::string* release_from_id();
  void set_allocated_from_id(std::string* from_id);
  private:
  const std::string& _internal_from_id() const;
  void _internal_set_from_id(const std::string& value);
  std::string* _internal_mutable_from_id();
  public:

  // string to_id = 2;
  void clear_to_id();
  const std::string& to_id() const;
  void set_to_id(const std::string& value);
  void set_to_id(std::string&& value);
  void set_to_id(const char* value);
  void set_to_id(const char* value, size_t size);
  std::string* mutable_to_id();
  std::string* release_to_id();
  void set_allocated_to_id(std::string* to_id);
  private:
  const std::string& _internal_to_id() const;
  void _internal_set_to_id(const std::string& value);
  std::string* _internal_mutable_to_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.System.SysMsgOper type = 3;
  void clear_type();
  ::IM::System::SysMsgOper type() const;
  void set_type(::IM::System::SysMsgOper value);
  private:
  ::IM::System::SysMsgOper _internal_type() const;
  void _internal_set_type(::IM::System::SysMsgOper value);
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMSysMsgData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMSendSysMsgReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMSendSysMsgReq) */ {
 public:
  inline IMSendSysMsgReq() : IMSendSysMsgReq(nullptr) {};
  virtual ~IMSendSysMsgReq();

  IMSendSysMsgReq(const IMSendSysMsgReq& from);
  IMSendSysMsgReq(IMSendSysMsgReq&& from) noexcept
    : IMSendSysMsgReq() {
    *this = ::std::move(from);
  }

  inline IMSendSysMsgReq& operator=(const IMSendSysMsgReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSendSysMsgReq& operator=(IMSendSysMsgReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSendSysMsgReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSendSysMsgReq* internal_default_instance() {
    return reinterpret_cast<const IMSendSysMsgReq*>(
               &_IMSendSysMsgReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMSendSysMsgReq& a, IMSendSysMsgReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSendSysMsgReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSendSysMsgReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSendSysMsgReq* New() const final {
    return CreateMaybeMessage<IMSendSysMsgReq>(nullptr);
  }

  IMSendSysMsgReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSendSysMsgReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSendSysMsgReq& from);
  void MergeFrom(const IMSendSysMsgReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSendSysMsgReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMSendSysMsgReq";
  }
  protected:
  explicit IMSendSysMsgReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kSysMsgFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.System.IMSysMsgData sys_msg = 2;
  bool has_sys_msg() const;
  private:
  bool _internal_has_sys_msg() const;
  public:
  void clear_sys_msg();
  const ::IM::System::IMSysMsgData& sys_msg() const;
  ::IM::System::IMSysMsgData* release_sys_msg();
  ::IM::System::IMSysMsgData* mutable_sys_msg();
  void set_allocated_sys_msg(::IM::System::IMSysMsgData* sys_msg);
  private:
  const ::IM::System::IMSysMsgData& _internal_sys_msg() const;
  ::IM::System::IMSysMsgData* _internal_mutable_sys_msg();
  public:
  void unsafe_arena_set_allocated_sys_msg(
      ::IM::System::IMSysMsgData* sys_msg);
  ::IM::System::IMSysMsgData* unsafe_arena_release_sys_msg();

  // @@protoc_insertion_point(class_scope:IM.System.IMSendSysMsgReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::IM::System::IMSysMsgData* sys_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMSendSysMsgRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMSendSysMsgRsp) */ {
 public:
  inline IMSendSysMsgRsp() : IMSendSysMsgRsp(nullptr) {};
  virtual ~IMSendSysMsgRsp();

  IMSendSysMsgRsp(const IMSendSysMsgRsp& from);
  IMSendSysMsgRsp(IMSendSysMsgRsp&& from) noexcept
    : IMSendSysMsgRsp() {
    *this = ::std::move(from);
  }

  inline IMSendSysMsgRsp& operator=(const IMSendSysMsgRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSendSysMsgRsp& operator=(IMSendSysMsgRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSendSysMsgRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSendSysMsgRsp* internal_default_instance() {
    return reinterpret_cast<const IMSendSysMsgRsp*>(
               &_IMSendSysMsgRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMSendSysMsgRsp& a, IMSendSysMsgRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSendSysMsgRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSendSysMsgRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSendSysMsgRsp* New() const final {
    return CreateMaybeMessage<IMSendSysMsgRsp>(nullptr);
  }

  IMSendSysMsgRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSendSysMsgRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSendSysMsgRsp& from);
  void MergeFrom(const IMSendSysMsgRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSendSysMsgRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMSendSysMsgRsp";
  }
  protected:
  explicit IMSendSysMsgRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kSysMsgFieldNumber = 3,
    kResultCodeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.System.IMSysMsgData sys_msg = 3;
  bool has_sys_msg() const;
  private:
  bool _internal_has_sys_msg() const;
  public:
  void clear_sys_msg();
  const ::IM::System::IMSysMsgData& sys_msg() const;
  ::IM::System::IMSysMsgData* release_sys_msg();
  ::IM::System::IMSysMsgData* mutable_sys_msg();
  void set_allocated_sys_msg(::IM::System::IMSysMsgData* sys_msg);
  private:
  const ::IM::System::IMSysMsgData& _internal_sys_msg() const;
  ::IM::System::IMSysMsgData* _internal_mutable_sys_msg();
  public:
  void unsafe_arena_set_allocated_sys_msg(
      ::IM::System::IMSysMsgData* sys_msg);
  ::IM::System::IMSysMsgData* unsafe_arena_release_sys_msg();

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMSendSysMsgRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::IM::System::IMSysMsgData* sys_msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMSysMsgUnreadCntReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMSysMsgUnreadCntReq) */ {
 public:
  inline IMSysMsgUnreadCntReq() : IMSysMsgUnreadCntReq(nullptr) {};
  virtual ~IMSysMsgUnreadCntReq();

  IMSysMsgUnreadCntReq(const IMSysMsgUnreadCntReq& from);
  IMSysMsgUnreadCntReq(IMSysMsgUnreadCntReq&& from) noexcept
    : IMSysMsgUnreadCntReq() {
    *this = ::std::move(from);
  }

  inline IMSysMsgUnreadCntReq& operator=(const IMSysMsgUnreadCntReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSysMsgUnreadCntReq& operator=(IMSysMsgUnreadCntReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSysMsgUnreadCntReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSysMsgUnreadCntReq* internal_default_instance() {
    return reinterpret_cast<const IMSysMsgUnreadCntReq*>(
               &_IMSysMsgUnreadCntReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMSysMsgUnreadCntReq& a, IMSysMsgUnreadCntReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSysMsgUnreadCntReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSysMsgUnreadCntReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSysMsgUnreadCntReq* New() const final {
    return CreateMaybeMessage<IMSysMsgUnreadCntReq>(nullptr);
  }

  IMSysMsgUnreadCntReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSysMsgUnreadCntReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSysMsgUnreadCntReq& from);
  void MergeFrom(const IMSysMsgUnreadCntReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSysMsgUnreadCntReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMSysMsgUnreadCntReq";
  }
  protected:
  explicit IMSysMsgUnreadCntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMSysMsgUnreadCntReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMSysMsgUnreadCntRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMSysMsgUnreadCntRsp) */ {
 public:
  inline IMSysMsgUnreadCntRsp() : IMSysMsgUnreadCntRsp(nullptr) {};
  virtual ~IMSysMsgUnreadCntRsp();

  IMSysMsgUnreadCntRsp(const IMSysMsgUnreadCntRsp& from);
  IMSysMsgUnreadCntRsp(IMSysMsgUnreadCntRsp&& from) noexcept
    : IMSysMsgUnreadCntRsp() {
    *this = ::std::move(from);
  }

  inline IMSysMsgUnreadCntRsp& operator=(const IMSysMsgUnreadCntRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSysMsgUnreadCntRsp& operator=(IMSysMsgUnreadCntRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSysMsgUnreadCntRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSysMsgUnreadCntRsp* internal_default_instance() {
    return reinterpret_cast<const IMSysMsgUnreadCntRsp*>(
               &_IMSysMsgUnreadCntRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IMSysMsgUnreadCntRsp& a, IMSysMsgUnreadCntRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSysMsgUnreadCntRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSysMsgUnreadCntRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSysMsgUnreadCntRsp* New() const final {
    return CreateMaybeMessage<IMSysMsgUnreadCntRsp>(nullptr);
  }

  IMSysMsgUnreadCntRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSysMsgUnreadCntRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSysMsgUnreadCntRsp& from);
  void MergeFrom(const IMSysMsgUnreadCntRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSysMsgUnreadCntRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMSysMsgUnreadCntRsp";
  }
  protected:
  explicit IMSysMsgUnreadCntRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnreadListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.System.UnreadSysMsgCnt unread_list = 2;
  int unread_list_size() const;
  private:
  int _internal_unread_list_size() const;
  public:
  void clear_unread_list();
  ::IM::System::UnreadSysMsgCnt* mutable_unread_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::UnreadSysMsgCnt >*
      mutable_unread_list();
  private:
  const ::IM::System::UnreadSysMsgCnt& _internal_unread_list(int index) const;
  ::IM::System::UnreadSysMsgCnt* _internal_add_unread_list();
  public:
  const ::IM::System::UnreadSysMsgCnt& unread_list(int index) const;
  ::IM::System::UnreadSysMsgCnt* add_unread_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::UnreadSysMsgCnt >&
      unread_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMSysMsgUnreadCntRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::UnreadSysMsgCnt > unread_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMGetSysMsgDataReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMGetSysMsgDataReq) */ {
 public:
  inline IMGetSysMsgDataReq() : IMGetSysMsgDataReq(nullptr) {};
  virtual ~IMGetSysMsgDataReq();

  IMGetSysMsgDataReq(const IMGetSysMsgDataReq& from);
  IMGetSysMsgDataReq(IMGetSysMsgDataReq&& from) noexcept
    : IMGetSysMsgDataReq() {
    *this = ::std::move(from);
  }

  inline IMGetSysMsgDataReq& operator=(const IMGetSysMsgDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetSysMsgDataReq& operator=(IMGetSysMsgDataReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMGetSysMsgDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMGetSysMsgDataReq* internal_default_instance() {
    return reinterpret_cast<const IMGetSysMsgDataReq*>(
               &_IMGetSysMsgDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMGetSysMsgDataReq& a, IMGetSysMsgDataReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetSysMsgDataReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetSysMsgDataReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetSysMsgDataReq* New() const final {
    return CreateMaybeMessage<IMGetSysMsgDataReq>(nullptr);
  }

  IMGetSysMsgDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetSysMsgDataReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMGetSysMsgDataReq& from);
  void MergeFrom(const IMGetSysMsgDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMGetSysMsgDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMGetSysMsgDataReq";
  }
  protected:
  explicit IMGetSysMsgDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kTypeFieldNumber = 2,
    kMsgCntFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.System.SysMsgType type = 2;
  void clear_type();
  ::IM::System::SysMsgType type() const;
  void set_type(::IM::System::SysMsgType value);
  private:
  ::IM::System::SysMsgType _internal_type() const;
  void _internal_set_type(::IM::System::SysMsgType value);
  public:

  // uint32 msg_cnt = 3;
  void clear_msg_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_cnt() const;
  void set_msg_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_cnt() const;
  void _internal_set_msg_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMGetSysMsgDataReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMGetSysMsgDataRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMGetSysMsgDataRsp) */ {
 public:
  inline IMGetSysMsgDataRsp() : IMGetSysMsgDataRsp(nullptr) {};
  virtual ~IMGetSysMsgDataRsp();

  IMGetSysMsgDataRsp(const IMGetSysMsgDataRsp& from);
  IMGetSysMsgDataRsp(IMGetSysMsgDataRsp&& from) noexcept
    : IMGetSysMsgDataRsp() {
    *this = ::std::move(from);
  }

  inline IMGetSysMsgDataRsp& operator=(const IMGetSysMsgDataRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetSysMsgDataRsp& operator=(IMGetSysMsgDataRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMGetSysMsgDataRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMGetSysMsgDataRsp* internal_default_instance() {
    return reinterpret_cast<const IMGetSysMsgDataRsp*>(
               &_IMGetSysMsgDataRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IMGetSysMsgDataRsp& a, IMGetSysMsgDataRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetSysMsgDataRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetSysMsgDataRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetSysMsgDataRsp* New() const final {
    return CreateMaybeMessage<IMGetSysMsgDataRsp>(nullptr);
  }

  IMGetSysMsgDataRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetSysMsgDataRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMGetSysMsgDataRsp& from);
  void MergeFrom(const IMGetSysMsgDataRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMGetSysMsgDataRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMGetSysMsgDataRsp";
  }
  protected:
  explicit IMGetSysMsgDataRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.System.IMSysMsgData msg_list = 2;
  int msg_list_size() const;
  private:
  int _internal_msg_list_size() const;
  public:
  void clear_msg_list();
  ::IM::System::IMSysMsgData* mutable_msg_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::IMSysMsgData >*
      mutable_msg_list();
  private:
  const ::IM::System::IMSysMsgData& _internal_msg_list(int index) const;
  ::IM::System::IMSysMsgData* _internal_add_msg_list();
  public:
  const ::IM::System::IMSysMsgData& msg_list(int index) const;
  ::IM::System::IMSysMsgData* add_msg_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::IMSysMsgData >&
      msg_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMGetSysMsgDataRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::IMSysMsgData > msg_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMSysMsgReadDataAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMSysMsgReadDataAck) */ {
 public:
  inline IMSysMsgReadDataAck() : IMSysMsgReadDataAck(nullptr) {};
  virtual ~IMSysMsgReadDataAck();

  IMSysMsgReadDataAck(const IMSysMsgReadDataAck& from);
  IMSysMsgReadDataAck(IMSysMsgReadDataAck&& from) noexcept
    : IMSysMsgReadDataAck() {
    *this = ::std::move(from);
  }

  inline IMSysMsgReadDataAck& operator=(const IMSysMsgReadDataAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSysMsgReadDataAck& operator=(IMSysMsgReadDataAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSysMsgReadDataAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSysMsgReadDataAck* internal_default_instance() {
    return reinterpret_cast<const IMSysMsgReadDataAck*>(
               &_IMSysMsgReadDataAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IMSysMsgReadDataAck& a, IMSysMsgReadDataAck& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSysMsgReadDataAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSysMsgReadDataAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSysMsgReadDataAck* New() const final {
    return CreateMaybeMessage<IMSysMsgReadDataAck>(nullptr);
  }

  IMSysMsgReadDataAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSysMsgReadDataAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSysMsgReadDataAck& from);
  void MergeFrom(const IMSysMsgReadDataAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSysMsgReadDataAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMSysMsgReadDataAck";
  }
  protected:
  explicit IMSysMsgReadDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kTypeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.System.SysMsgType type = 2;
  void clear_type();
  ::IM::System::SysMsgType type() const;
  void set_type(::IM::System::SysMsgType value);
  private:
  ::IM::System::SysMsgType _internal_type() const;
  void _internal_set_type(::IM::System::SysMsgType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMSysMsgReadDataAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class StudyTimeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.StudyTimeInfo) */ {
 public:
  inline StudyTimeInfo() : StudyTimeInfo(nullptr) {};
  virtual ~StudyTimeInfo();

  StudyTimeInfo(const StudyTimeInfo& from);
  StudyTimeInfo(StudyTimeInfo&& from) noexcept
    : StudyTimeInfo() {
    *this = ::std::move(from);
  }

  inline StudyTimeInfo& operator=(const StudyTimeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudyTimeInfo& operator=(StudyTimeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const StudyTimeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudyTimeInfo* internal_default_instance() {
    return reinterpret_cast<const StudyTimeInfo*>(
               &_StudyTimeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StudyTimeInfo& a, StudyTimeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StudyTimeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudyTimeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudyTimeInfo* New() const final {
    return CreateMaybeMessage<StudyTimeInfo>(nullptr);
  }

  StudyTimeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudyTimeInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StudyTimeInfo& from);
  void MergeFrom(const StudyTimeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StudyTimeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.StudyTimeInfo";
  }
  protected:
  explicit StudyTimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kNickNameFieldNumber = 2,
    kAvatarUrlFieldNumber = 3,
    kStartFieldNumber = 4,
    kDurationFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string nick_name = 2;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // string avatar_url = 3;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // uint32 start = 4;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 duration = 5;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.System.StudyTimeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMSysGetStudyTimeReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMSysGetStudyTimeReq) */ {
 public:
  inline IMSysGetStudyTimeReq() : IMSysGetStudyTimeReq(nullptr) {};
  virtual ~IMSysGetStudyTimeReq();

  IMSysGetStudyTimeReq(const IMSysGetStudyTimeReq& from);
  IMSysGetStudyTimeReq(IMSysGetStudyTimeReq&& from) noexcept
    : IMSysGetStudyTimeReq() {
    *this = ::std::move(from);
  }

  inline IMSysGetStudyTimeReq& operator=(const IMSysGetStudyTimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSysGetStudyTimeReq& operator=(IMSysGetStudyTimeReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSysGetStudyTimeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSysGetStudyTimeReq* internal_default_instance() {
    return reinterpret_cast<const IMSysGetStudyTimeReq*>(
               &_IMSysGetStudyTimeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IMSysGetStudyTimeReq& a, IMSysGetStudyTimeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSysGetStudyTimeReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSysGetStudyTimeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSysGetStudyTimeReq* New() const final {
    return CreateMaybeMessage<IMSysGetStudyTimeReq>(nullptr);
  }

  IMSysGetStudyTimeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSysGetStudyTimeReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSysGetStudyTimeReq& from);
  void MergeFrom(const IMSysGetStudyTimeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSysGetStudyTimeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMSysGetStudyTimeReq";
  }
  protected:
  explicit IMSysGetStudyTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUserIdListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kStatisticsParamFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kStatisticsTypeFieldNumber = 3,
    kPageFieldNumber = 5,
    kPageSizeFieldNumber = 6,
  };
  // repeated string target_user_id_list = 2;
  int target_user_id_list_size() const;
  private:
  int _internal_target_user_id_list_size() const;
  public:
  void clear_target_user_id_list();
  const std::string& target_user_id_list(int index) const;
  std::string* mutable_target_user_id_list(int index);
  void set_target_user_id_list(int index, const std::string& value);
  void set_target_user_id_list(int index, std::string&& value);
  void set_target_user_id_list(int index, const char* value);
  void set_target_user_id_list(int index, const char* value, size_t size);
  std::string* add_target_user_id_list();
  void add_target_user_id_list(const std::string& value);
  void add_target_user_id_list(std::string&& value);
  void add_target_user_id_list(const char* value);
  void add_target_user_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_user_id_list();
  private:
  const std::string& _internal_target_user_id_list(int index) const;
  std::string* _internal_add_target_user_id_list();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string statistics_param = 4;
  void clear_statistics_param();
  const std::string& statistics_param() const;
  void set_statistics_param(const std::string& value);
  void set_statistics_param(std::string&& value);
  void set_statistics_param(const char* value);
  void set_statistics_param(const char* value, size_t size);
  std::string* mutable_statistics_param();
  std::string* release_statistics_param();
  void set_allocated_statistics_param(std::string* statistics_param);
  private:
  const std::string& _internal_statistics_param() const;
  void _internal_set_statistics_param(const std::string& value);
  std::string* _internal_mutable_statistics_param();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.System.StatisticsType statistics_type = 3;
  void clear_statistics_type();
  ::IM::System::StatisticsType statistics_type() const;
  void set_statistics_type(::IM::System::StatisticsType value);
  private:
  ::IM::System::StatisticsType _internal_statistics_type() const;
  void _internal_set_statistics_type(::IM::System::StatisticsType value);
  public:

  // uint32 page = 5;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 page_size = 6;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMSysGetStudyTimeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_user_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr statistics_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  int statistics_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// -------------------------------------------------------------------

class IMSysGetStudyTimeRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.System.IMSysGetStudyTimeRsp) */ {
 public:
  inline IMSysGetStudyTimeRsp() : IMSysGetStudyTimeRsp(nullptr) {};
  virtual ~IMSysGetStudyTimeRsp();

  IMSysGetStudyTimeRsp(const IMSysGetStudyTimeRsp& from);
  IMSysGetStudyTimeRsp(IMSysGetStudyTimeRsp&& from) noexcept
    : IMSysGetStudyTimeRsp() {
    *this = ::std::move(from);
  }

  inline IMSysGetStudyTimeRsp& operator=(const IMSysGetStudyTimeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSysGetStudyTimeRsp& operator=(IMSysGetStudyTimeRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSysGetStudyTimeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSysGetStudyTimeRsp* internal_default_instance() {
    return reinterpret_cast<const IMSysGetStudyTimeRsp*>(
               &_IMSysGetStudyTimeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IMSysGetStudyTimeRsp& a, IMSysGetStudyTimeRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSysGetStudyTimeRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSysGetStudyTimeRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSysGetStudyTimeRsp* New() const final {
    return CreateMaybeMessage<IMSysGetStudyTimeRsp>(nullptr);
  }

  IMSysGetStudyTimeRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSysGetStudyTimeRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSysGetStudyTimeRsp& from);
  void MergeFrom(const IMSysGetStudyTimeRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSysGetStudyTimeRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.System.IMSysGetStudyTimeRsp";
  }
  protected:
  explicit IMSysGetStudyTimeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudytimeListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.System.StudyTimeInfo studytime_list = 2;
  int studytime_list_size() const;
  private:
  int _internal_studytime_list_size() const;
  public:
  void clear_studytime_list();
  ::IM::System::StudyTimeInfo* mutable_studytime_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::StudyTimeInfo >*
      mutable_studytime_list();
  private:
  const ::IM::System::StudyTimeInfo& _internal_studytime_list(int index) const;
  ::IM::System::StudyTimeInfo* _internal_add_studytime_list();
  public:
  const ::IM::System::StudyTimeInfo& studytime_list(int index) const;
  ::IM::System::StudyTimeInfo* add_studytime_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::StudyTimeInfo >&
      studytime_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.System.IMSysGetStudyTimeRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::StudyTimeInfo > studytime_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eSystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnreadSysMsgCnt

// .IM.System.SysMsgType type = 1;
inline void UnreadSysMsgCnt::clear_type() {
  type_ = 0;
}
inline ::IM::System::SysMsgType UnreadSysMsgCnt::_internal_type() const {
  return static_cast< ::IM::System::SysMsgType >(type_);
}
inline ::IM::System::SysMsgType UnreadSysMsgCnt::type() const {
  // @@protoc_insertion_point(field_get:IM.System.UnreadSysMsgCnt.type)
  return _internal_type();
}
inline void UnreadSysMsgCnt::_internal_set_type(::IM::System::SysMsgType value) {
  
  type_ = value;
}
inline void UnreadSysMsgCnt::set_type(::IM::System::SysMsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:IM.System.UnreadSysMsgCnt.type)
}

// uint32 count = 2;
inline void UnreadSysMsgCnt::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnreadSysMsgCnt::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnreadSysMsgCnt::count() const {
  // @@protoc_insertion_point(field_get:IM.System.UnreadSysMsgCnt.count)
  return _internal_count();
}
inline void UnreadSysMsgCnt::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void UnreadSysMsgCnt::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:IM.System.UnreadSysMsgCnt.count)
}

// -------------------------------------------------------------------

// IMSysMsgData

// string from_id = 1;
inline void IMSysMsgData::clear_from_id() {
  from_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgData::from_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgData.from_id)
  return _internal_from_id();
}
inline void IMSysMsgData::set_from_id(const std::string& value) {
  _internal_set_from_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgData.from_id)
}
inline std::string* IMSysMsgData::mutable_from_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgData.from_id)
  return _internal_mutable_from_id();
}
inline const std::string& IMSysMsgData::_internal_from_id() const {
  return from_id_.Get();
}
inline void IMSysMsgData::_internal_set_from_id(const std::string& value) {
  
  from_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgData::set_from_id(std::string&& value) {
  
  from_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgData.from_id)
}
inline void IMSysMsgData::set_from_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgData.from_id)
}
inline void IMSysMsgData::set_from_id(const char* value,
    size_t size) {
  
  from_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgData.from_id)
}
inline std::string* IMSysMsgData::_internal_mutable_from_id() {
  
  return from_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgData::release_from_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgData.from_id)
  return from_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgData::set_allocated_from_id(std::string* from_id) {
  if (from_id != nullptr) {
    
  } else {
    
  }
  from_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgData.from_id)
}

// string to_id = 2;
inline void IMSysMsgData::clear_to_id() {
  to_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgData::to_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgData.to_id)
  return _internal_to_id();
}
inline void IMSysMsgData::set_to_id(const std::string& value) {
  _internal_set_to_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgData.to_id)
}
inline std::string* IMSysMsgData::mutable_to_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgData.to_id)
  return _internal_mutable_to_id();
}
inline const std::string& IMSysMsgData::_internal_to_id() const {
  return to_id_.Get();
}
inline void IMSysMsgData::_internal_set_to_id(const std::string& value) {
  
  to_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgData::set_to_id(std::string&& value) {
  
  to_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgData.to_id)
}
inline void IMSysMsgData::set_to_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgData.to_id)
}
inline void IMSysMsgData::set_to_id(const char* value,
    size_t size) {
  
  to_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgData.to_id)
}
inline std::string* IMSysMsgData::_internal_mutable_to_id() {
  
  return to_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgData::release_to_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgData.to_id)
  return to_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgData::set_allocated_to_id(std::string* to_id) {
  if (to_id != nullptr) {
    
  } else {
    
  }
  to_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgData.to_id)
}

// .IM.System.SysMsgOper type = 3;
inline void IMSysMsgData::clear_type() {
  type_ = 0;
}
inline ::IM::System::SysMsgOper IMSysMsgData::_internal_type() const {
  return static_cast< ::IM::System::SysMsgOper >(type_);
}
inline ::IM::System::SysMsgOper IMSysMsgData::type() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgData.type)
  return _internal_type();
}
inline void IMSysMsgData::_internal_set_type(::IM::System::SysMsgOper value) {
  
  type_ = value;
}
inline void IMSysMsgData::set_type(::IM::System::SysMsgOper value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgData.type)
}

// bytes attach_data = 20;
inline void IMSysMsgData::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgData::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgData.attach_data)
  return _internal_attach_data();
}
inline void IMSysMsgData::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgData.attach_data)
}
inline std::string* IMSysMsgData::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgData.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSysMsgData::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSysMsgData::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgData::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgData.attach_data)
}
inline void IMSysMsgData::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgData.attach_data)
}
inline void IMSysMsgData::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgData.attach_data)
}
inline std::string* IMSysMsgData::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgData::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgData.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgData::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgData.attach_data)
}

// -------------------------------------------------------------------

// IMSendSysMsgReq

// string user_id = 1;
inline void IMSendSysMsgReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSendSysMsgReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSendSysMsgReq.user_id)
  return _internal_user_id();
}
inline void IMSendSysMsgReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSendSysMsgReq.user_id)
}
inline std::string* IMSendSysMsgReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSendSysMsgReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSendSysMsgReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSendSysMsgReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSendSysMsgReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSendSysMsgReq.user_id)
}
inline void IMSendSysMsgReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSendSysMsgReq.user_id)
}
inline void IMSendSysMsgReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSendSysMsgReq.user_id)
}
inline std::string* IMSendSysMsgReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSendSysMsgReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSendSysMsgReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSendSysMsgReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSendSysMsgReq.user_id)
}

// .IM.System.IMSysMsgData sys_msg = 2;
inline bool IMSendSysMsgReq::_internal_has_sys_msg() const {
  return this != internal_default_instance() && sys_msg_ != nullptr;
}
inline bool IMSendSysMsgReq::has_sys_msg() const {
  return _internal_has_sys_msg();
}
inline void IMSendSysMsgReq::clear_sys_msg() {
  if (GetArena() == nullptr && sys_msg_ != nullptr) {
    delete sys_msg_;
  }
  sys_msg_ = nullptr;
}
inline const ::IM::System::IMSysMsgData& IMSendSysMsgReq::_internal_sys_msg() const {
  const ::IM::System::IMSysMsgData* p = sys_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::System::IMSysMsgData*>(
      &::IM::System::_IMSysMsgData_default_instance_);
}
inline const ::IM::System::IMSysMsgData& IMSendSysMsgReq::sys_msg() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSendSysMsgReq.sys_msg)
  return _internal_sys_msg();
}
inline void IMSendSysMsgReq::unsafe_arena_set_allocated_sys_msg(
    ::IM::System::IMSysMsgData* sys_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_msg_);
  }
  sys_msg_ = sys_msg;
  if (sys_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.System.IMSendSysMsgReq.sys_msg)
}
inline ::IM::System::IMSysMsgData* IMSendSysMsgReq::release_sys_msg() {
  
  ::IM::System::IMSysMsgData* temp = sys_msg_;
  sys_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IM::System::IMSysMsgData* IMSendSysMsgReq::unsafe_arena_release_sys_msg() {
  // @@protoc_insertion_point(field_release:IM.System.IMSendSysMsgReq.sys_msg)
  
  ::IM::System::IMSysMsgData* temp = sys_msg_;
  sys_msg_ = nullptr;
  return temp;
}
inline ::IM::System::IMSysMsgData* IMSendSysMsgReq::_internal_mutable_sys_msg() {
  
  if (sys_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::System::IMSysMsgData>(GetArena());
    sys_msg_ = p;
  }
  return sys_msg_;
}
inline ::IM::System::IMSysMsgData* IMSendSysMsgReq::mutable_sys_msg() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSendSysMsgReq.sys_msg)
  return _internal_mutable_sys_msg();
}
inline void IMSendSysMsgReq::set_allocated_sys_msg(::IM::System::IMSysMsgData* sys_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sys_msg_;
  }
  if (sys_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sys_msg);
    if (message_arena != submessage_arena) {
      sys_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_msg, submessage_arena);
    }
    
  } else {
    
  }
  sys_msg_ = sys_msg;
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSendSysMsgReq.sys_msg)
}

// bytes attach_data = 20;
inline void IMSendSysMsgReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSendSysMsgReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSendSysMsgReq.attach_data)
  return _internal_attach_data();
}
inline void IMSendSysMsgReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSendSysMsgReq.attach_data)
}
inline std::string* IMSendSysMsgReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSendSysMsgReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSendSysMsgReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSendSysMsgReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSendSysMsgReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSendSysMsgReq.attach_data)
}
inline void IMSendSysMsgReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSendSysMsgReq.attach_data)
}
inline void IMSendSysMsgReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSendSysMsgReq.attach_data)
}
inline std::string* IMSendSysMsgReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSendSysMsgReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMSendSysMsgReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSendSysMsgReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSendSysMsgReq.attach_data)
}

// -------------------------------------------------------------------

// IMSendSysMsgRsp

// string user_id = 1;
inline void IMSendSysMsgRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSendSysMsgRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSendSysMsgRsp.user_id)
  return _internal_user_id();
}
inline void IMSendSysMsgRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSendSysMsgRsp.user_id)
}
inline std::string* IMSendSysMsgRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSendSysMsgRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSendSysMsgRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSendSysMsgRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSendSysMsgRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSendSysMsgRsp.user_id)
}
inline void IMSendSysMsgRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSendSysMsgRsp.user_id)
}
inline void IMSendSysMsgRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSendSysMsgRsp.user_id)
}
inline std::string* IMSendSysMsgRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSendSysMsgRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSendSysMsgRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSendSysMsgRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSendSysMsgRsp.user_id)
}

// uint32 result_code = 2;
inline void IMSendSysMsgRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSendSysMsgRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSendSysMsgRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSendSysMsgRsp.result_code)
  return _internal_result_code();
}
inline void IMSendSysMsgRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMSendSysMsgRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSendSysMsgRsp.result_code)
}

// .IM.System.IMSysMsgData sys_msg = 3;
inline bool IMSendSysMsgRsp::_internal_has_sys_msg() const {
  return this != internal_default_instance() && sys_msg_ != nullptr;
}
inline bool IMSendSysMsgRsp::has_sys_msg() const {
  return _internal_has_sys_msg();
}
inline void IMSendSysMsgRsp::clear_sys_msg() {
  if (GetArena() == nullptr && sys_msg_ != nullptr) {
    delete sys_msg_;
  }
  sys_msg_ = nullptr;
}
inline const ::IM::System::IMSysMsgData& IMSendSysMsgRsp::_internal_sys_msg() const {
  const ::IM::System::IMSysMsgData* p = sys_msg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::System::IMSysMsgData*>(
      &::IM::System::_IMSysMsgData_default_instance_);
}
inline const ::IM::System::IMSysMsgData& IMSendSysMsgRsp::sys_msg() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSendSysMsgRsp.sys_msg)
  return _internal_sys_msg();
}
inline void IMSendSysMsgRsp::unsafe_arena_set_allocated_sys_msg(
    ::IM::System::IMSysMsgData* sys_msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_msg_);
  }
  sys_msg_ = sys_msg;
  if (sys_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.System.IMSendSysMsgRsp.sys_msg)
}
inline ::IM::System::IMSysMsgData* IMSendSysMsgRsp::release_sys_msg() {
  
  ::IM::System::IMSysMsgData* temp = sys_msg_;
  sys_msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IM::System::IMSysMsgData* IMSendSysMsgRsp::unsafe_arena_release_sys_msg() {
  // @@protoc_insertion_point(field_release:IM.System.IMSendSysMsgRsp.sys_msg)
  
  ::IM::System::IMSysMsgData* temp = sys_msg_;
  sys_msg_ = nullptr;
  return temp;
}
inline ::IM::System::IMSysMsgData* IMSendSysMsgRsp::_internal_mutable_sys_msg() {
  
  if (sys_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::System::IMSysMsgData>(GetArena());
    sys_msg_ = p;
  }
  return sys_msg_;
}
inline ::IM::System::IMSysMsgData* IMSendSysMsgRsp::mutable_sys_msg() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSendSysMsgRsp.sys_msg)
  return _internal_mutable_sys_msg();
}
inline void IMSendSysMsgRsp::set_allocated_sys_msg(::IM::System::IMSysMsgData* sys_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sys_msg_;
  }
  if (sys_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sys_msg);
    if (message_arena != submessage_arena) {
      sys_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_msg, submessage_arena);
    }
    
  } else {
    
  }
  sys_msg_ = sys_msg;
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSendSysMsgRsp.sys_msg)
}

// bytes attach_data = 20;
inline void IMSendSysMsgRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSendSysMsgRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSendSysMsgRsp.attach_data)
  return _internal_attach_data();
}
inline void IMSendSysMsgRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSendSysMsgRsp.attach_data)
}
inline std::string* IMSendSysMsgRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSendSysMsgRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSendSysMsgRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSendSysMsgRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSendSysMsgRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSendSysMsgRsp.attach_data)
}
inline void IMSendSysMsgRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSendSysMsgRsp.attach_data)
}
inline void IMSendSysMsgRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSendSysMsgRsp.attach_data)
}
inline std::string* IMSendSysMsgRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSendSysMsgRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMSendSysMsgRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSendSysMsgRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSendSysMsgRsp.attach_data)
}

// -------------------------------------------------------------------

// IMSysMsgUnreadCntReq

// string user_id = 1;
inline void IMSysMsgUnreadCntReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgUnreadCntReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgUnreadCntReq.user_id)
  return _internal_user_id();
}
inline void IMSysMsgUnreadCntReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgUnreadCntReq.user_id)
}
inline std::string* IMSysMsgUnreadCntReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgUnreadCntReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSysMsgUnreadCntReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSysMsgUnreadCntReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgUnreadCntReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgUnreadCntReq.user_id)
}
inline void IMSysMsgUnreadCntReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgUnreadCntReq.user_id)
}
inline void IMSysMsgUnreadCntReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgUnreadCntReq.user_id)
}
inline std::string* IMSysMsgUnreadCntReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgUnreadCntReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgUnreadCntReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgUnreadCntReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgUnreadCntReq.user_id)
}

// bytes attach_data = 20;
inline void IMSysMsgUnreadCntReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgUnreadCntReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgUnreadCntReq.attach_data)
  return _internal_attach_data();
}
inline void IMSysMsgUnreadCntReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgUnreadCntReq.attach_data)
}
inline std::string* IMSysMsgUnreadCntReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgUnreadCntReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSysMsgUnreadCntReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSysMsgUnreadCntReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgUnreadCntReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgUnreadCntReq.attach_data)
}
inline void IMSysMsgUnreadCntReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgUnreadCntReq.attach_data)
}
inline void IMSysMsgUnreadCntReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgUnreadCntReq.attach_data)
}
inline std::string* IMSysMsgUnreadCntReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgUnreadCntReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgUnreadCntReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgUnreadCntReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgUnreadCntReq.attach_data)
}

// -------------------------------------------------------------------

// IMSysMsgUnreadCntRsp

// string user_id = 1;
inline void IMSysMsgUnreadCntRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgUnreadCntRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgUnreadCntRsp.user_id)
  return _internal_user_id();
}
inline void IMSysMsgUnreadCntRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgUnreadCntRsp.user_id)
}
inline std::string* IMSysMsgUnreadCntRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgUnreadCntRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSysMsgUnreadCntRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSysMsgUnreadCntRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgUnreadCntRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgUnreadCntRsp.user_id)
}
inline void IMSysMsgUnreadCntRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgUnreadCntRsp.user_id)
}
inline void IMSysMsgUnreadCntRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgUnreadCntRsp.user_id)
}
inline std::string* IMSysMsgUnreadCntRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgUnreadCntRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgUnreadCntRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgUnreadCntRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgUnreadCntRsp.user_id)
}

// repeated .IM.System.UnreadSysMsgCnt unread_list = 2;
inline int IMSysMsgUnreadCntRsp::_internal_unread_list_size() const {
  return unread_list_.size();
}
inline int IMSysMsgUnreadCntRsp::unread_list_size() const {
  return _internal_unread_list_size();
}
inline void IMSysMsgUnreadCntRsp::clear_unread_list() {
  unread_list_.Clear();
}
inline ::IM::System::UnreadSysMsgCnt* IMSysMsgUnreadCntRsp::mutable_unread_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgUnreadCntRsp.unread_list)
  return unread_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::UnreadSysMsgCnt >*
IMSysMsgUnreadCntRsp::mutable_unread_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.System.IMSysMsgUnreadCntRsp.unread_list)
  return &unread_list_;
}
inline const ::IM::System::UnreadSysMsgCnt& IMSysMsgUnreadCntRsp::_internal_unread_list(int index) const {
  return unread_list_.Get(index);
}
inline const ::IM::System::UnreadSysMsgCnt& IMSysMsgUnreadCntRsp::unread_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgUnreadCntRsp.unread_list)
  return _internal_unread_list(index);
}
inline ::IM::System::UnreadSysMsgCnt* IMSysMsgUnreadCntRsp::_internal_add_unread_list() {
  return unread_list_.Add();
}
inline ::IM::System::UnreadSysMsgCnt* IMSysMsgUnreadCntRsp::add_unread_list() {
  // @@protoc_insertion_point(field_add:IM.System.IMSysMsgUnreadCntRsp.unread_list)
  return _internal_add_unread_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::UnreadSysMsgCnt >&
IMSysMsgUnreadCntRsp::unread_list() const {
  // @@protoc_insertion_point(field_list:IM.System.IMSysMsgUnreadCntRsp.unread_list)
  return unread_list_;
}

// bytes attach_data = 20;
inline void IMSysMsgUnreadCntRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgUnreadCntRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgUnreadCntRsp.attach_data)
  return _internal_attach_data();
}
inline void IMSysMsgUnreadCntRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgUnreadCntRsp.attach_data)
}
inline std::string* IMSysMsgUnreadCntRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgUnreadCntRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSysMsgUnreadCntRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSysMsgUnreadCntRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgUnreadCntRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgUnreadCntRsp.attach_data)
}
inline void IMSysMsgUnreadCntRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgUnreadCntRsp.attach_data)
}
inline void IMSysMsgUnreadCntRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgUnreadCntRsp.attach_data)
}
inline std::string* IMSysMsgUnreadCntRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgUnreadCntRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgUnreadCntRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgUnreadCntRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgUnreadCntRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetSysMsgDataReq

// string user_id = 1;
inline void IMGetSysMsgDataReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMGetSysMsgDataReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMGetSysMsgDataReq.user_id)
  return _internal_user_id();
}
inline void IMGetSysMsgDataReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMGetSysMsgDataReq.user_id)
}
inline std::string* IMGetSysMsgDataReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMGetSysMsgDataReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMGetSysMsgDataReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMGetSysMsgDataReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMGetSysMsgDataReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMGetSysMsgDataReq.user_id)
}
inline void IMGetSysMsgDataReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMGetSysMsgDataReq.user_id)
}
inline void IMGetSysMsgDataReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMGetSysMsgDataReq.user_id)
}
inline std::string* IMGetSysMsgDataReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMGetSysMsgDataReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMGetSysMsgDataReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMGetSysMsgDataReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMGetSysMsgDataReq.user_id)
}

// .IM.System.SysMsgType type = 2;
inline void IMGetSysMsgDataReq::clear_type() {
  type_ = 0;
}
inline ::IM::System::SysMsgType IMGetSysMsgDataReq::_internal_type() const {
  return static_cast< ::IM::System::SysMsgType >(type_);
}
inline ::IM::System::SysMsgType IMGetSysMsgDataReq::type() const {
  // @@protoc_insertion_point(field_get:IM.System.IMGetSysMsgDataReq.type)
  return _internal_type();
}
inline void IMGetSysMsgDataReq::_internal_set_type(::IM::System::SysMsgType value) {
  
  type_ = value;
}
inline void IMGetSysMsgDataReq::set_type(::IM::System::SysMsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:IM.System.IMGetSysMsgDataReq.type)
}

// uint32 msg_cnt = 3;
inline void IMGetSysMsgDataReq::clear_msg_cnt() {
  msg_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetSysMsgDataReq::_internal_msg_cnt() const {
  return msg_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMGetSysMsgDataReq::msg_cnt() const {
  // @@protoc_insertion_point(field_get:IM.System.IMGetSysMsgDataReq.msg_cnt)
  return _internal_msg_cnt();
}
inline void IMGetSysMsgDataReq::_internal_set_msg_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_cnt_ = value;
}
inline void IMGetSysMsgDataReq::set_msg_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_cnt(value);
  // @@protoc_insertion_point(field_set:IM.System.IMGetSysMsgDataReq.msg_cnt)
}

// bytes attach_data = 20;
inline void IMGetSysMsgDataReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMGetSysMsgDataReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMGetSysMsgDataReq.attach_data)
  return _internal_attach_data();
}
inline void IMGetSysMsgDataReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMGetSysMsgDataReq.attach_data)
}
inline std::string* IMGetSysMsgDataReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMGetSysMsgDataReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMGetSysMsgDataReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetSysMsgDataReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMGetSysMsgDataReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMGetSysMsgDataReq.attach_data)
}
inline void IMGetSysMsgDataReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMGetSysMsgDataReq.attach_data)
}
inline void IMGetSysMsgDataReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMGetSysMsgDataReq.attach_data)
}
inline std::string* IMGetSysMsgDataReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMGetSysMsgDataReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMGetSysMsgDataReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMGetSysMsgDataReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMGetSysMsgDataReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetSysMsgDataRsp

// string user_id = 1;
inline void IMGetSysMsgDataRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMGetSysMsgDataRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMGetSysMsgDataRsp.user_id)
  return _internal_user_id();
}
inline void IMGetSysMsgDataRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMGetSysMsgDataRsp.user_id)
}
inline std::string* IMGetSysMsgDataRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMGetSysMsgDataRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMGetSysMsgDataRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMGetSysMsgDataRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMGetSysMsgDataRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMGetSysMsgDataRsp.user_id)
}
inline void IMGetSysMsgDataRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMGetSysMsgDataRsp.user_id)
}
inline void IMGetSysMsgDataRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMGetSysMsgDataRsp.user_id)
}
inline std::string* IMGetSysMsgDataRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMGetSysMsgDataRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMGetSysMsgDataRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMGetSysMsgDataRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMGetSysMsgDataRsp.user_id)
}

// repeated .IM.System.IMSysMsgData msg_list = 2;
inline int IMGetSysMsgDataRsp::_internal_msg_list_size() const {
  return msg_list_.size();
}
inline int IMGetSysMsgDataRsp::msg_list_size() const {
  return _internal_msg_list_size();
}
inline void IMGetSysMsgDataRsp::clear_msg_list() {
  msg_list_.Clear();
}
inline ::IM::System::IMSysMsgData* IMGetSysMsgDataRsp::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.System.IMGetSysMsgDataRsp.msg_list)
  return msg_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::IMSysMsgData >*
IMGetSysMsgDataRsp::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.System.IMGetSysMsgDataRsp.msg_list)
  return &msg_list_;
}
inline const ::IM::System::IMSysMsgData& IMGetSysMsgDataRsp::_internal_msg_list(int index) const {
  return msg_list_.Get(index);
}
inline const ::IM::System::IMSysMsgData& IMGetSysMsgDataRsp::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.System.IMGetSysMsgDataRsp.msg_list)
  return _internal_msg_list(index);
}
inline ::IM::System::IMSysMsgData* IMGetSysMsgDataRsp::_internal_add_msg_list() {
  return msg_list_.Add();
}
inline ::IM::System::IMSysMsgData* IMGetSysMsgDataRsp::add_msg_list() {
  // @@protoc_insertion_point(field_add:IM.System.IMGetSysMsgDataRsp.msg_list)
  return _internal_add_msg_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::IMSysMsgData >&
IMGetSysMsgDataRsp::msg_list() const {
  // @@protoc_insertion_point(field_list:IM.System.IMGetSysMsgDataRsp.msg_list)
  return msg_list_;
}

// bytes attach_data = 20;
inline void IMGetSysMsgDataRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMGetSysMsgDataRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMGetSysMsgDataRsp.attach_data)
  return _internal_attach_data();
}
inline void IMGetSysMsgDataRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMGetSysMsgDataRsp.attach_data)
}
inline std::string* IMGetSysMsgDataRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMGetSysMsgDataRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMGetSysMsgDataRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetSysMsgDataRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMGetSysMsgDataRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMGetSysMsgDataRsp.attach_data)
}
inline void IMGetSysMsgDataRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMGetSysMsgDataRsp.attach_data)
}
inline void IMGetSysMsgDataRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMGetSysMsgDataRsp.attach_data)
}
inline std::string* IMGetSysMsgDataRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMGetSysMsgDataRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMGetSysMsgDataRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMGetSysMsgDataRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMGetSysMsgDataRsp.attach_data)
}

// -------------------------------------------------------------------

// IMSysMsgReadDataAck

// string user_id = 1;
inline void IMSysMsgReadDataAck::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgReadDataAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgReadDataAck.user_id)
  return _internal_user_id();
}
inline void IMSysMsgReadDataAck::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgReadDataAck.user_id)
}
inline std::string* IMSysMsgReadDataAck::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgReadDataAck.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSysMsgReadDataAck::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSysMsgReadDataAck::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgReadDataAck::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgReadDataAck.user_id)
}
inline void IMSysMsgReadDataAck::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgReadDataAck.user_id)
}
inline void IMSysMsgReadDataAck::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgReadDataAck.user_id)
}
inline std::string* IMSysMsgReadDataAck::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgReadDataAck::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgReadDataAck.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgReadDataAck::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgReadDataAck.user_id)
}

// .IM.System.SysMsgType type = 2;
inline void IMSysMsgReadDataAck::clear_type() {
  type_ = 0;
}
inline ::IM::System::SysMsgType IMSysMsgReadDataAck::_internal_type() const {
  return static_cast< ::IM::System::SysMsgType >(type_);
}
inline ::IM::System::SysMsgType IMSysMsgReadDataAck::type() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgReadDataAck.type)
  return _internal_type();
}
inline void IMSysMsgReadDataAck::_internal_set_type(::IM::System::SysMsgType value) {
  
  type_ = value;
}
inline void IMSysMsgReadDataAck::set_type(::IM::System::SysMsgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgReadDataAck.type)
}

// bytes attach_data = 20;
inline void IMSysMsgReadDataAck::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysMsgReadDataAck::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysMsgReadDataAck.attach_data)
  return _internal_attach_data();
}
inline void IMSysMsgReadDataAck::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysMsgReadDataAck.attach_data)
}
inline std::string* IMSysMsgReadDataAck::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysMsgReadDataAck.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSysMsgReadDataAck::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSysMsgReadDataAck::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysMsgReadDataAck::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysMsgReadDataAck.attach_data)
}
inline void IMSysMsgReadDataAck::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysMsgReadDataAck.attach_data)
}
inline void IMSysMsgReadDataAck::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysMsgReadDataAck.attach_data)
}
inline std::string* IMSysMsgReadDataAck::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysMsgReadDataAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysMsgReadDataAck.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysMsgReadDataAck::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysMsgReadDataAck.attach_data)
}

// -------------------------------------------------------------------

// StudyTimeInfo

// string user_id = 1;
inline void StudyTimeInfo::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StudyTimeInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.StudyTimeInfo.user_id)
  return _internal_user_id();
}
inline void StudyTimeInfo::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.StudyTimeInfo.user_id)
}
inline std::string* StudyTimeInfo::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.StudyTimeInfo.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& StudyTimeInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void StudyTimeInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StudyTimeInfo::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.StudyTimeInfo.user_id)
}
inline void StudyTimeInfo::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.StudyTimeInfo.user_id)
}
inline void StudyTimeInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.StudyTimeInfo.user_id)
}
inline std::string* StudyTimeInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StudyTimeInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.StudyTimeInfo.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StudyTimeInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.StudyTimeInfo.user_id)
}

// string nick_name = 2;
inline void StudyTimeInfo::clear_nick_name() {
  nick_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StudyTimeInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:IM.System.StudyTimeInfo.nick_name)
  return _internal_nick_name();
}
inline void StudyTimeInfo::set_nick_name(const std::string& value) {
  _internal_set_nick_name(value);
  // @@protoc_insertion_point(field_set:IM.System.StudyTimeInfo.nick_name)
}
inline std::string* StudyTimeInfo::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:IM.System.StudyTimeInfo.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& StudyTimeInfo::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void StudyTimeInfo::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StudyTimeInfo::set_nick_name(std::string&& value) {
  
  nick_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.StudyTimeInfo.nick_name)
}
inline void StudyTimeInfo::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.StudyTimeInfo.nick_name)
}
inline void StudyTimeInfo::set_nick_name(const char* value,
    size_t size) {
  
  nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.StudyTimeInfo.nick_name)
}
inline std::string* StudyTimeInfo::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StudyTimeInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:IM.System.StudyTimeInfo.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StudyTimeInfo::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.StudyTimeInfo.nick_name)
}

// string avatar_url = 3;
inline void StudyTimeInfo::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StudyTimeInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.System.StudyTimeInfo.avatar_url)
  return _internal_avatar_url();
}
inline void StudyTimeInfo::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:IM.System.StudyTimeInfo.avatar_url)
}
inline std::string* StudyTimeInfo::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:IM.System.StudyTimeInfo.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& StudyTimeInfo::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void StudyTimeInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StudyTimeInfo::set_avatar_url(std::string&& value) {
  
  avatar_url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.StudyTimeInfo.avatar_url)
}
inline void StudyTimeInfo::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.StudyTimeInfo.avatar_url)
}
inline void StudyTimeInfo::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.StudyTimeInfo.avatar_url)
}
inline std::string* StudyTimeInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StudyTimeInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.System.StudyTimeInfo.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StudyTimeInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.StudyTimeInfo.avatar_url)
}

// uint32 start = 4;
inline void StudyTimeInfo::clear_start() {
  start_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StudyTimeInfo::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StudyTimeInfo::start() const {
  // @@protoc_insertion_point(field_get:IM.System.StudyTimeInfo.start)
  return _internal_start();
}
inline void StudyTimeInfo::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_ = value;
}
inline void StudyTimeInfo::set_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:IM.System.StudyTimeInfo.start)
}

// uint32 duration = 5;
inline void StudyTimeInfo::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StudyTimeInfo::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StudyTimeInfo::duration() const {
  // @@protoc_insertion_point(field_get:IM.System.StudyTimeInfo.duration)
  return _internal_duration();
}
inline void StudyTimeInfo::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void StudyTimeInfo::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:IM.System.StudyTimeInfo.duration)
}

// -------------------------------------------------------------------

// IMSysGetStudyTimeReq

// string user_id = 1;
inline void IMSysGetStudyTimeReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysGetStudyTimeReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeReq.user_id)
  return _internal_user_id();
}
inline void IMSysGetStudyTimeReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeReq.user_id)
}
inline std::string* IMSysGetStudyTimeReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysGetStudyTimeReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSysGetStudyTimeReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSysGetStudyTimeReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysGetStudyTimeReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysGetStudyTimeReq.user_id)
}
inline void IMSysGetStudyTimeReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysGetStudyTimeReq.user_id)
}
inline void IMSysGetStudyTimeReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysGetStudyTimeReq.user_id)
}
inline std::string* IMSysGetStudyTimeReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysGetStudyTimeReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysGetStudyTimeReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysGetStudyTimeReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysGetStudyTimeReq.user_id)
}

// repeated string target_user_id_list = 2;
inline int IMSysGetStudyTimeReq::_internal_target_user_id_list_size() const {
  return target_user_id_list_.size();
}
inline int IMSysGetStudyTimeReq::target_user_id_list_size() const {
  return _internal_target_user_id_list_size();
}
inline void IMSysGetStudyTimeReq::clear_target_user_id_list() {
  target_user_id_list_.Clear();
}
inline std::string* IMSysGetStudyTimeReq::add_target_user_id_list() {
  // @@protoc_insertion_point(field_add_mutable:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
  return _internal_add_target_user_id_list();
}
inline const std::string& IMSysGetStudyTimeReq::_internal_target_user_id_list(int index) const {
  return target_user_id_list_.Get(index);
}
inline const std::string& IMSysGetStudyTimeReq::target_user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
  return _internal_target_user_id_list(index);
}
inline std::string* IMSysGetStudyTimeReq::mutable_target_user_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
  return target_user_id_list_.Mutable(index);
}
inline void IMSysGetStudyTimeReq::set_target_user_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
  target_user_id_list_.Mutable(index)->assign(value);
}
inline void IMSysGetStudyTimeReq::set_target_user_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
  target_user_id_list_.Mutable(index)->assign(std::move(value));
}
inline void IMSysGetStudyTimeReq::set_target_user_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_user_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
}
inline void IMSysGetStudyTimeReq::set_target_user_id_list(int index, const char* value, size_t size) {
  target_user_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
}
inline std::string* IMSysGetStudyTimeReq::_internal_add_target_user_id_list() {
  return target_user_id_list_.Add();
}
inline void IMSysGetStudyTimeReq::add_target_user_id_list(const std::string& value) {
  target_user_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
}
inline void IMSysGetStudyTimeReq::add_target_user_id_list(std::string&& value) {
  target_user_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
}
inline void IMSysGetStudyTimeReq::add_target_user_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_user_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
}
inline void IMSysGetStudyTimeReq::add_target_user_id_list(const char* value, size_t size) {
  target_user_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IMSysGetStudyTimeReq::target_user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
  return target_user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IMSysGetStudyTimeReq::mutable_target_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.System.IMSysGetStudyTimeReq.target_user_id_list)
  return &target_user_id_list_;
}

// .IM.System.StatisticsType statistics_type = 3;
inline void IMSysGetStudyTimeReq::clear_statistics_type() {
  statistics_type_ = 0;
}
inline ::IM::System::StatisticsType IMSysGetStudyTimeReq::_internal_statistics_type() const {
  return static_cast< ::IM::System::StatisticsType >(statistics_type_);
}
inline ::IM::System::StatisticsType IMSysGetStudyTimeReq::statistics_type() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeReq.statistics_type)
  return _internal_statistics_type();
}
inline void IMSysGetStudyTimeReq::_internal_set_statistics_type(::IM::System::StatisticsType value) {
  
  statistics_type_ = value;
}
inline void IMSysGetStudyTimeReq::set_statistics_type(::IM::System::StatisticsType value) {
  _internal_set_statistics_type(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeReq.statistics_type)
}

// string statistics_param = 4;
inline void IMSysGetStudyTimeReq::clear_statistics_param() {
  statistics_param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysGetStudyTimeReq::statistics_param() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeReq.statistics_param)
  return _internal_statistics_param();
}
inline void IMSysGetStudyTimeReq::set_statistics_param(const std::string& value) {
  _internal_set_statistics_param(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeReq.statistics_param)
}
inline std::string* IMSysGetStudyTimeReq::mutable_statistics_param() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysGetStudyTimeReq.statistics_param)
  return _internal_mutable_statistics_param();
}
inline const std::string& IMSysGetStudyTimeReq::_internal_statistics_param() const {
  return statistics_param_.Get();
}
inline void IMSysGetStudyTimeReq::_internal_set_statistics_param(const std::string& value) {
  
  statistics_param_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysGetStudyTimeReq::set_statistics_param(std::string&& value) {
  
  statistics_param_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysGetStudyTimeReq.statistics_param)
}
inline void IMSysGetStudyTimeReq::set_statistics_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  statistics_param_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysGetStudyTimeReq.statistics_param)
}
inline void IMSysGetStudyTimeReq::set_statistics_param(const char* value,
    size_t size) {
  
  statistics_param_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysGetStudyTimeReq.statistics_param)
}
inline std::string* IMSysGetStudyTimeReq::_internal_mutable_statistics_param() {
  
  return statistics_param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysGetStudyTimeReq::release_statistics_param() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysGetStudyTimeReq.statistics_param)
  return statistics_param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysGetStudyTimeReq::set_allocated_statistics_param(std::string* statistics_param) {
  if (statistics_param != nullptr) {
    
  } else {
    
  }
  statistics_param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), statistics_param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysGetStudyTimeReq.statistics_param)
}

// uint32 page = 5;
inline void IMSysGetStudyTimeReq::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSysGetStudyTimeReq::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSysGetStudyTimeReq::page() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeReq.page)
  return _internal_page();
}
inline void IMSysGetStudyTimeReq::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void IMSysGetStudyTimeReq::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeReq.page)
}

// uint32 page_size = 6;
inline void IMSysGetStudyTimeReq::clear_page_size() {
  page_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSysGetStudyTimeReq::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMSysGetStudyTimeReq::page_size() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeReq.page_size)
  return _internal_page_size();
}
inline void IMSysGetStudyTimeReq::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_size_ = value;
}
inline void IMSysGetStudyTimeReq::set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeReq.page_size)
}

// bytes attach_data = 20;
inline void IMSysGetStudyTimeReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysGetStudyTimeReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeReq.attach_data)
  return _internal_attach_data();
}
inline void IMSysGetStudyTimeReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeReq.attach_data)
}
inline std::string* IMSysGetStudyTimeReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysGetStudyTimeReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSysGetStudyTimeReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSysGetStudyTimeReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysGetStudyTimeReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysGetStudyTimeReq.attach_data)
}
inline void IMSysGetStudyTimeReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysGetStudyTimeReq.attach_data)
}
inline void IMSysGetStudyTimeReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysGetStudyTimeReq.attach_data)
}
inline std::string* IMSysGetStudyTimeReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysGetStudyTimeReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysGetStudyTimeReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysGetStudyTimeReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysGetStudyTimeReq.attach_data)
}

// -------------------------------------------------------------------

// IMSysGetStudyTimeRsp

// string user_id = 1;
inline void IMSysGetStudyTimeRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysGetStudyTimeRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeRsp.user_id)
  return _internal_user_id();
}
inline void IMSysGetStudyTimeRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeRsp.user_id)
}
inline std::string* IMSysGetStudyTimeRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysGetStudyTimeRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSysGetStudyTimeRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSysGetStudyTimeRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysGetStudyTimeRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysGetStudyTimeRsp.user_id)
}
inline void IMSysGetStudyTimeRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysGetStudyTimeRsp.user_id)
}
inline void IMSysGetStudyTimeRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysGetStudyTimeRsp.user_id)
}
inline std::string* IMSysGetStudyTimeRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysGetStudyTimeRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysGetStudyTimeRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysGetStudyTimeRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysGetStudyTimeRsp.user_id)
}

// repeated .IM.System.StudyTimeInfo studytime_list = 2;
inline int IMSysGetStudyTimeRsp::_internal_studytime_list_size() const {
  return studytime_list_.size();
}
inline int IMSysGetStudyTimeRsp::studytime_list_size() const {
  return _internal_studytime_list_size();
}
inline void IMSysGetStudyTimeRsp::clear_studytime_list() {
  studytime_list_.Clear();
}
inline ::IM::System::StudyTimeInfo* IMSysGetStudyTimeRsp::mutable_studytime_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysGetStudyTimeRsp.studytime_list)
  return studytime_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::StudyTimeInfo >*
IMSysGetStudyTimeRsp::mutable_studytime_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.System.IMSysGetStudyTimeRsp.studytime_list)
  return &studytime_list_;
}
inline const ::IM::System::StudyTimeInfo& IMSysGetStudyTimeRsp::_internal_studytime_list(int index) const {
  return studytime_list_.Get(index);
}
inline const ::IM::System::StudyTimeInfo& IMSysGetStudyTimeRsp::studytime_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeRsp.studytime_list)
  return _internal_studytime_list(index);
}
inline ::IM::System::StudyTimeInfo* IMSysGetStudyTimeRsp::_internal_add_studytime_list() {
  return studytime_list_.Add();
}
inline ::IM::System::StudyTimeInfo* IMSysGetStudyTimeRsp::add_studytime_list() {
  // @@protoc_insertion_point(field_add:IM.System.IMSysGetStudyTimeRsp.studytime_list)
  return _internal_add_studytime_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::System::StudyTimeInfo >&
IMSysGetStudyTimeRsp::studytime_list() const {
  // @@protoc_insertion_point(field_list:IM.System.IMSysGetStudyTimeRsp.studytime_list)
  return studytime_list_;
}

// bytes attach_data = 20;
inline void IMSysGetStudyTimeRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSysGetStudyTimeRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.System.IMSysGetStudyTimeRsp.attach_data)
  return _internal_attach_data();
}
inline void IMSysGetStudyTimeRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.System.IMSysGetStudyTimeRsp.attach_data)
}
inline std::string* IMSysGetStudyTimeRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.System.IMSysGetStudyTimeRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSysGetStudyTimeRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSysGetStudyTimeRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSysGetStudyTimeRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.System.IMSysGetStudyTimeRsp.attach_data)
}
inline void IMSysGetStudyTimeRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.System.IMSysGetStudyTimeRsp.attach_data)
}
inline void IMSysGetStudyTimeRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.System.IMSysGetStudyTimeRsp.attach_data)
}
inline std::string* IMSysGetStudyTimeRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSysGetStudyTimeRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.System.IMSysGetStudyTimeRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSysGetStudyTimeRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.System.IMSysGetStudyTimeRsp.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace System
}  // namespace IM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::IM::System::SysMsgType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::System::SysMsgOper> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::System::StatisticsType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eSystem_2eproto
