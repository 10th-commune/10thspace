// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Blog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eBlog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eBlog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eBlog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eBlog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace Blog {
class IMBlogAddCommentReq;
class IMBlogAddCommentReqDefaultTypeInternal;
extern IMBlogAddCommentReqDefaultTypeInternal _IMBlogAddCommentReq_default_instance_;
class IMBlogAddCommentRsp;
class IMBlogAddCommentRspDefaultTypeInternal;
extern IMBlogAddCommentRspDefaultTypeInternal _IMBlogAddCommentRsp_default_instance_;
class IMBlogGetCommentReq;
class IMBlogGetCommentReqDefaultTypeInternal;
extern IMBlogGetCommentReqDefaultTypeInternal _IMBlogGetCommentReq_default_instance_;
class IMBlogGetCommentRsp;
class IMBlogGetCommentRspDefaultTypeInternal;
extern IMBlogGetCommentRspDefaultTypeInternal _IMBlogGetCommentRsp_default_instance_;
class IMBlogGetListReq;
class IMBlogGetListReqDefaultTypeInternal;
extern IMBlogGetListReqDefaultTypeInternal _IMBlogGetListReq_default_instance_;
class IMBlogGetListRsp;
class IMBlogGetListRspDefaultTypeInternal;
extern IMBlogGetListRspDefaultTypeInternal _IMBlogGetListRsp_default_instance_;
class IMBlogSend;
class IMBlogSendDefaultTypeInternal;
extern IMBlogSendDefaultTypeInternal _IMBlogSend_default_instance_;
class IMBlogSendAck;
class IMBlogSendAckDefaultTypeInternal;
extern IMBlogSendAckDefaultTypeInternal _IMBlogSendAck_default_instance_;
}  // namespace Blog
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Blog::IMBlogAddCommentReq* Arena::CreateMaybeMessage<::IM::Blog::IMBlogAddCommentReq>(Arena*);
template<> ::IM::Blog::IMBlogAddCommentRsp* Arena::CreateMaybeMessage<::IM::Blog::IMBlogAddCommentRsp>(Arena*);
template<> ::IM::Blog::IMBlogGetCommentReq* Arena::CreateMaybeMessage<::IM::Blog::IMBlogGetCommentReq>(Arena*);
template<> ::IM::Blog::IMBlogGetCommentRsp* Arena::CreateMaybeMessage<::IM::Blog::IMBlogGetCommentRsp>(Arena*);
template<> ::IM::Blog::IMBlogGetListReq* Arena::CreateMaybeMessage<::IM::Blog::IMBlogGetListReq>(Arena*);
template<> ::IM::Blog::IMBlogGetListRsp* Arena::CreateMaybeMessage<::IM::Blog::IMBlogGetListRsp>(Arena*);
template<> ::IM::Blog::IMBlogSend* Arena::CreateMaybeMessage<::IM::Blog::IMBlogSend>(Arena*);
template<> ::IM::Blog::IMBlogSendAck* Arena::CreateMaybeMessage<::IM::Blog::IMBlogSendAck>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Blog {

// ===================================================================

class IMBlogSend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Blog.IMBlogSend) */ {
 public:
  inline IMBlogSend() : IMBlogSend(nullptr) {};
  virtual ~IMBlogSend();

  IMBlogSend(const IMBlogSend& from);
  IMBlogSend(IMBlogSend&& from) noexcept
    : IMBlogSend() {
    *this = ::std::move(from);
  }

  inline IMBlogSend& operator=(const IMBlogSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMBlogSend& operator=(IMBlogSend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMBlogSend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMBlogSend* internal_default_instance() {
    return reinterpret_cast<const IMBlogSend*>(
               &_IMBlogSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMBlogSend& a, IMBlogSend& b) {
    a.Swap(&b);
  }
  inline void Swap(IMBlogSend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMBlogSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMBlogSend* New() const final {
    return CreateMaybeMessage<IMBlogSend>(nullptr);
  }

  IMBlogSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMBlogSend>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMBlogSend& from);
  void MergeFrom(const IMBlogSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMBlogSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Blog.IMBlogSend";
  }
  protected:
  explicit IMBlogSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kBlogDataFieldNumber = 2,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes blog_data = 2;
  void clear_blog_data();
  const std::string& blog_data() const;
  void set_blog_data(const std::string& value);
  void set_blog_data(std::string&& value);
  void set_blog_data(const char* value);
  void set_blog_data(const void* value, size_t size);
  std::string* mutable_blog_data();
  std::string* release_blog_data();
  void set_allocated_blog_data(std::string* blog_data);
  private:
  const std::string& _internal_blog_data() const;
  void _internal_set_blog_data(const std::string& value);
  std::string* _internal_mutable_blog_data();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blog_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBlog_2eproto;
};
// -------------------------------------------------------------------

class IMBlogSendAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Blog.IMBlogSendAck) */ {
 public:
  inline IMBlogSendAck() : IMBlogSendAck(nullptr) {};
  virtual ~IMBlogSendAck();

  IMBlogSendAck(const IMBlogSendAck& from);
  IMBlogSendAck(IMBlogSendAck&& from) noexcept
    : IMBlogSendAck() {
    *this = ::std::move(from);
  }

  inline IMBlogSendAck& operator=(const IMBlogSendAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMBlogSendAck& operator=(IMBlogSendAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMBlogSendAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMBlogSendAck* internal_default_instance() {
    return reinterpret_cast<const IMBlogSendAck*>(
               &_IMBlogSendAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMBlogSendAck& a, IMBlogSendAck& b) {
    a.Swap(&b);
  }
  inline void Swap(IMBlogSendAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMBlogSendAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMBlogSendAck* New() const final {
    return CreateMaybeMessage<IMBlogSendAck>(nullptr);
  }

  IMBlogSendAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMBlogSendAck>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMBlogSendAck& from);
  void MergeFrom(const IMBlogSendAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMBlogSendAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Blog.IMBlogSendAck";
  }
  protected:
  explicit IMBlogSendAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kBlogIdFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 blog_id = 2;
  void clear_blog_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id() const;
  void set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blog_id() const;
  void _internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 update_time = 3;
  void clear_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time() const;
  void set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_time() const;
  void _internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogSendAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBlog_2eproto;
};
// -------------------------------------------------------------------

class IMBlogGetListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Blog.IMBlogGetListReq) */ {
 public:
  inline IMBlogGetListReq() : IMBlogGetListReq(nullptr) {};
  virtual ~IMBlogGetListReq();

  IMBlogGetListReq(const IMBlogGetListReq& from);
  IMBlogGetListReq(IMBlogGetListReq&& from) noexcept
    : IMBlogGetListReq() {
    *this = ::std::move(from);
  }

  inline IMBlogGetListReq& operator=(const IMBlogGetListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMBlogGetListReq& operator=(IMBlogGetListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMBlogGetListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMBlogGetListReq* internal_default_instance() {
    return reinterpret_cast<const IMBlogGetListReq*>(
               &_IMBlogGetListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMBlogGetListReq& a, IMBlogGetListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMBlogGetListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMBlogGetListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMBlogGetListReq* New() const final {
    return CreateMaybeMessage<IMBlogGetListReq>(nullptr);
  }

  IMBlogGetListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMBlogGetListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMBlogGetListReq& from);
  void MergeFrom(const IMBlogGetListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMBlogGetListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Blog.IMBlogGetListReq";
  }
  protected:
  explicit IMBlogGetListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kUpdateTimeFieldNumber = 2,
    kBlogTypeFieldNumber = 3,
    kPageFieldNumber = 4,
    kPageSizeFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 update_time = 2;
  void clear_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time() const;
  void set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_time() const;
  void _internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.BlogType blog_type = 3;
  void clear_blog_type();
  ::IM::BaseDefine::BlogType blog_type() const;
  void set_blog_type(::IM::BaseDefine::BlogType value);
  private:
  ::IM::BaseDefine::BlogType _internal_blog_type() const;
  void _internal_set_blog_type(::IM::BaseDefine::BlogType value);
  public:

  // uint32 page = 4;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 page_size = 5;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogGetListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time_;
  int blog_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBlog_2eproto;
};
// -------------------------------------------------------------------

class IMBlogGetListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Blog.IMBlogGetListRsp) */ {
 public:
  inline IMBlogGetListRsp() : IMBlogGetListRsp(nullptr) {};
  virtual ~IMBlogGetListRsp();

  IMBlogGetListRsp(const IMBlogGetListRsp& from);
  IMBlogGetListRsp(IMBlogGetListRsp&& from) noexcept
    : IMBlogGetListRsp() {
    *this = ::std::move(from);
  }

  inline IMBlogGetListRsp& operator=(const IMBlogGetListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMBlogGetListRsp& operator=(IMBlogGetListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMBlogGetListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMBlogGetListRsp* internal_default_instance() {
    return reinterpret_cast<const IMBlogGetListRsp*>(
               &_IMBlogGetListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMBlogGetListRsp& a, IMBlogGetListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMBlogGetListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMBlogGetListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMBlogGetListRsp* New() const final {
    return CreateMaybeMessage<IMBlogGetListRsp>(nullptr);
  }

  IMBlogGetListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMBlogGetListRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMBlogGetListRsp& from);
  void MergeFrom(const IMBlogGetListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMBlogGetListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Blog.IMBlogGetListRsp";
  }
  protected:
  explicit IMBlogGetListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlogListFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kBlogTypeFieldNumber = 2,
    kPageFieldNumber = 3,
    kPageSizeFieldNumber = 4,
  };
  // repeated .IM.BaseDefine.BlogInfo blog_list = 5;
  int blog_list_size() const;
  private:
  int _internal_blog_list_size() const;
  public:
  void clear_blog_list();
  ::IM::BaseDefine::BlogInfo* mutable_blog_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >*
      mutable_blog_list();
  private:
  const ::IM::BaseDefine::BlogInfo& _internal_blog_list(int index) const;
  ::IM::BaseDefine::BlogInfo* _internal_add_blog_list();
  public:
  const ::IM::BaseDefine::BlogInfo& blog_list(int index) const;
  ::IM::BaseDefine::BlogInfo* add_blog_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >&
      blog_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.BaseDefine.BlogType blog_type = 2;
  void clear_blog_type();
  ::IM::BaseDefine::BlogType blog_type() const;
  void set_blog_type(::IM::BaseDefine::BlogType value);
  private:
  ::IM::BaseDefine::BlogType _internal_blog_type() const;
  void _internal_set_blog_type(::IM::BaseDefine::BlogType value);
  public:

  // uint32 page = 3;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 page_size = 4;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogGetListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo > blog_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  int blog_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBlog_2eproto;
};
// -------------------------------------------------------------------

class IMBlogAddCommentReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Blog.IMBlogAddCommentReq) */ {
 public:
  inline IMBlogAddCommentReq() : IMBlogAddCommentReq(nullptr) {};
  virtual ~IMBlogAddCommentReq();

  IMBlogAddCommentReq(const IMBlogAddCommentReq& from);
  IMBlogAddCommentReq(IMBlogAddCommentReq&& from) noexcept
    : IMBlogAddCommentReq() {
    *this = ::std::move(from);
  }

  inline IMBlogAddCommentReq& operator=(const IMBlogAddCommentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMBlogAddCommentReq& operator=(IMBlogAddCommentReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMBlogAddCommentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMBlogAddCommentReq* internal_default_instance() {
    return reinterpret_cast<const IMBlogAddCommentReq*>(
               &_IMBlogAddCommentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMBlogAddCommentReq& a, IMBlogAddCommentReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMBlogAddCommentReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMBlogAddCommentReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMBlogAddCommentReq* New() const final {
    return CreateMaybeMessage<IMBlogAddCommentReq>(nullptr);
  }

  IMBlogAddCommentReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMBlogAddCommentReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMBlogAddCommentReq& from);
  void MergeFrom(const IMBlogAddCommentReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMBlogAddCommentReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Blog.IMBlogAddCommentReq";
  }
  protected:
  explicit IMBlogAddCommentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kBlogDataFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kBlogIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes blog_data = 3;
  void clear_blog_data();
  const std::string& blog_data() const;
  void set_blog_data(const std::string& value);
  void set_blog_data(std::string&& value);
  void set_blog_data(const char* value);
  void set_blog_data(const void* value, size_t size);
  std::string* mutable_blog_data();
  std::string* release_blog_data();
  void set_allocated_blog_data(std::string* blog_data);
  private:
  const std::string& _internal_blog_data() const;
  void _internal_set_blog_data(const std::string& value);
  std::string* _internal_mutable_blog_data();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 blog_id = 2;
  void clear_blog_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id() const;
  void set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blog_id() const;
  void _internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogAddCommentReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blog_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBlog_2eproto;
};
// -------------------------------------------------------------------

class IMBlogAddCommentRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Blog.IMBlogAddCommentRsp) */ {
 public:
  inline IMBlogAddCommentRsp() : IMBlogAddCommentRsp(nullptr) {};
  virtual ~IMBlogAddCommentRsp();

  IMBlogAddCommentRsp(const IMBlogAddCommentRsp& from);
  IMBlogAddCommentRsp(IMBlogAddCommentRsp&& from) noexcept
    : IMBlogAddCommentRsp() {
    *this = ::std::move(from);
  }

  inline IMBlogAddCommentRsp& operator=(const IMBlogAddCommentRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMBlogAddCommentRsp& operator=(IMBlogAddCommentRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMBlogAddCommentRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMBlogAddCommentRsp* internal_default_instance() {
    return reinterpret_cast<const IMBlogAddCommentRsp*>(
               &_IMBlogAddCommentRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IMBlogAddCommentRsp& a, IMBlogAddCommentRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMBlogAddCommentRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMBlogAddCommentRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMBlogAddCommentRsp* New() const final {
    return CreateMaybeMessage<IMBlogAddCommentRsp>(nullptr);
  }

  IMBlogAddCommentRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMBlogAddCommentRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMBlogAddCommentRsp& from);
  void MergeFrom(const IMBlogAddCommentRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMBlogAddCommentRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Blog.IMBlogAddCommentRsp";
  }
  protected:
  explicit IMBlogAddCommentRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kCommentIdFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
    kResultCodeFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 comment_id = 2;
  void clear_comment_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 comment_id() const;
  void set_comment_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_comment_id() const;
  void _internal_set_comment_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 update_time = 3;
  void clear_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time() const;
  void set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_time() const;
  void _internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 result_code = 4;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogAddCommentRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 comment_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBlog_2eproto;
};
// -------------------------------------------------------------------

class IMBlogGetCommentReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Blog.IMBlogGetCommentReq) */ {
 public:
  inline IMBlogGetCommentReq() : IMBlogGetCommentReq(nullptr) {};
  virtual ~IMBlogGetCommentReq();

  IMBlogGetCommentReq(const IMBlogGetCommentReq& from);
  IMBlogGetCommentReq(IMBlogGetCommentReq&& from) noexcept
    : IMBlogGetCommentReq() {
    *this = ::std::move(from);
  }

  inline IMBlogGetCommentReq& operator=(const IMBlogGetCommentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMBlogGetCommentReq& operator=(IMBlogGetCommentReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMBlogGetCommentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMBlogGetCommentReq* internal_default_instance() {
    return reinterpret_cast<const IMBlogGetCommentReq*>(
               &_IMBlogGetCommentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMBlogGetCommentReq& a, IMBlogGetCommentReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMBlogGetCommentReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMBlogGetCommentReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMBlogGetCommentReq* New() const final {
    return CreateMaybeMessage<IMBlogGetCommentReq>(nullptr);
  }

  IMBlogGetCommentReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMBlogGetCommentReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMBlogGetCommentReq& from);
  void MergeFrom(const IMBlogGetCommentReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMBlogGetCommentReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Blog.IMBlogGetCommentReq";
  }
  protected:
  explicit IMBlogGetCommentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kBlogIdFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 blog_id = 2;
  void clear_blog_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id() const;
  void set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blog_id() const;
  void _internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 update_time = 3;
  void clear_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time() const;
  void set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_time() const;
  void _internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogGetCommentReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBlog_2eproto;
};
// -------------------------------------------------------------------

class IMBlogGetCommentRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Blog.IMBlogGetCommentRsp) */ {
 public:
  inline IMBlogGetCommentRsp() : IMBlogGetCommentRsp(nullptr) {};
  virtual ~IMBlogGetCommentRsp();

  IMBlogGetCommentRsp(const IMBlogGetCommentRsp& from);
  IMBlogGetCommentRsp(IMBlogGetCommentRsp&& from) noexcept
    : IMBlogGetCommentRsp() {
    *this = ::std::move(from);
  }

  inline IMBlogGetCommentRsp& operator=(const IMBlogGetCommentRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMBlogGetCommentRsp& operator=(IMBlogGetCommentRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMBlogGetCommentRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMBlogGetCommentRsp* internal_default_instance() {
    return reinterpret_cast<const IMBlogGetCommentRsp*>(
               &_IMBlogGetCommentRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IMBlogGetCommentRsp& a, IMBlogGetCommentRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMBlogGetCommentRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMBlogGetCommentRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMBlogGetCommentRsp* New() const final {
    return CreateMaybeMessage<IMBlogGetCommentRsp>(nullptr);
  }

  IMBlogGetCommentRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMBlogGetCommentRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMBlogGetCommentRsp& from);
  void MergeFrom(const IMBlogGetCommentRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMBlogGetCommentRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Blog.IMBlogGetCommentRsp";
  }
  protected:
  explicit IMBlogGetCommentRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentListFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kBlogIdFieldNumber = 2,
    kUpdateTimeFieldNumber = 3,
  };
  // repeated .IM.BaseDefine.BlogInfo comment_list = 4;
  int comment_list_size() const;
  private:
  int _internal_comment_list_size() const;
  public:
  void clear_comment_list();
  ::IM::BaseDefine::BlogInfo* mutable_comment_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >*
      mutable_comment_list();
  private:
  const ::IM::BaseDefine::BlogInfo& _internal_comment_list(int index) const;
  ::IM::BaseDefine::BlogInfo* _internal_add_comment_list();
  public:
  const ::IM::BaseDefine::BlogInfo& comment_list(int index) const;
  ::IM::BaseDefine::BlogInfo* add_comment_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >&
      comment_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 blog_id = 2;
  void clear_blog_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id() const;
  void set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blog_id() const;
  void _internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 update_time = 3;
  void clear_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time() const;
  void set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_time() const;
  void _internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogGetCommentRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo > comment_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBlog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMBlogSend

// string user_id = 1;
inline void IMBlogSend::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogSend::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSend.user_id)
  return _internal_user_id();
}
inline void IMBlogSend::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSend.user_id)
}
inline std::string* IMBlogSend::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogSend.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMBlogSend::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMBlogSend::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogSend::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogSend.user_id)
}
inline void IMBlogSend::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogSend.user_id)
}
inline void IMBlogSend::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogSend.user_id)
}
inline std::string* IMBlogSend::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogSend::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogSend.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogSend::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogSend.user_id)
}

// bytes blog_data = 2;
inline void IMBlogSend::clear_blog_data() {
  blog_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogSend::blog_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSend.blog_data)
  return _internal_blog_data();
}
inline void IMBlogSend::set_blog_data(const std::string& value) {
  _internal_set_blog_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSend.blog_data)
}
inline std::string* IMBlogSend::mutable_blog_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogSend.blog_data)
  return _internal_mutable_blog_data();
}
inline const std::string& IMBlogSend::_internal_blog_data() const {
  return blog_data_.Get();
}
inline void IMBlogSend::_internal_set_blog_data(const std::string& value) {
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogSend::set_blog_data(std::string&& value) {
  
  blog_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogSend.blog_data)
}
inline void IMBlogSend::set_blog_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogSend.blog_data)
}
inline void IMBlogSend::set_blog_data(const void* value,
    size_t size) {
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogSend.blog_data)
}
inline std::string* IMBlogSend::_internal_mutable_blog_data() {
  
  return blog_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogSend::release_blog_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogSend.blog_data)
  return blog_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogSend::set_allocated_blog_data(std::string* blog_data) {
  if (blog_data != nullptr) {
    
  } else {
    
  }
  blog_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blog_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogSend.blog_data)
}

// bytes attach_data = 20;
inline void IMBlogSend::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogSend::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSend.attach_data)
  return _internal_attach_data();
}
inline void IMBlogSend::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSend.attach_data)
}
inline std::string* IMBlogSend::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogSend.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMBlogSend::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMBlogSend::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogSend::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogSend.attach_data)
}
inline void IMBlogSend::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogSend.attach_data)
}
inline void IMBlogSend::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogSend.attach_data)
}
inline std::string* IMBlogSend::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogSend::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogSend.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogSend::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogSend.attach_data)
}

// -------------------------------------------------------------------

// IMBlogSendAck

// string user_id = 1;
inline void IMBlogSendAck::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogSendAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSendAck.user_id)
  return _internal_user_id();
}
inline void IMBlogSendAck::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSendAck.user_id)
}
inline std::string* IMBlogSendAck::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogSendAck.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMBlogSendAck::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMBlogSendAck::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogSendAck::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogSendAck.user_id)
}
inline void IMBlogSendAck::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogSendAck.user_id)
}
inline void IMBlogSendAck::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogSendAck.user_id)
}
inline std::string* IMBlogSendAck::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogSendAck::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogSendAck.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogSendAck::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogSendAck.user_id)
}

// uint32 blog_id = 2;
inline void IMBlogSendAck::clear_blog_id() {
  blog_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogSendAck::_internal_blog_id() const {
  return blog_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogSendAck::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSendAck.blog_id)
  return _internal_blog_id();
}
inline void IMBlogSendAck::_internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blog_id_ = value;
}
inline void IMBlogSendAck::set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blog_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSendAck.blog_id)
}

// uint32 update_time = 3;
inline void IMBlogSendAck::clear_update_time() {
  update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogSendAck::_internal_update_time() const {
  return update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogSendAck::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSendAck.update_time)
  return _internal_update_time();
}
inline void IMBlogSendAck::_internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  update_time_ = value;
}
inline void IMBlogSendAck::set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSendAck.update_time)
}

// bytes attach_data = 20;
inline void IMBlogSendAck::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogSendAck::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSendAck.attach_data)
  return _internal_attach_data();
}
inline void IMBlogSendAck::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSendAck.attach_data)
}
inline std::string* IMBlogSendAck::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogSendAck.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMBlogSendAck::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMBlogSendAck::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogSendAck::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogSendAck.attach_data)
}
inline void IMBlogSendAck::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogSendAck.attach_data)
}
inline void IMBlogSendAck::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogSendAck.attach_data)
}
inline std::string* IMBlogSendAck::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogSendAck::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogSendAck.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogSendAck::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogSendAck.attach_data)
}

// -------------------------------------------------------------------

// IMBlogGetListReq

// string user_id = 1;
inline void IMBlogGetListReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogGetListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.user_id)
  return _internal_user_id();
}
inline void IMBlogGetListReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.user_id)
}
inline std::string* IMBlogGetListReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetListReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMBlogGetListReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMBlogGetListReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogGetListReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogGetListReq.user_id)
}
inline void IMBlogGetListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetListReq.user_id)
}
inline void IMBlogGetListReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetListReq.user_id)
}
inline std::string* IMBlogGetListReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogGetListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogGetListReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogGetListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetListReq.user_id)
}

// uint32 update_time = 2;
inline void IMBlogGetListReq::clear_update_time() {
  update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListReq::_internal_update_time() const {
  return update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.update_time)
  return _internal_update_time();
}
inline void IMBlogGetListReq::_internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  update_time_ = value;
}
inline void IMBlogGetListReq::set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.update_time)
}

// .IM.BaseDefine.BlogType blog_type = 3;
inline void IMBlogGetListReq::clear_blog_type() {
  blog_type_ = 0;
}
inline ::IM::BaseDefine::BlogType IMBlogGetListReq::_internal_blog_type() const {
  return static_cast< ::IM::BaseDefine::BlogType >(blog_type_);
}
inline ::IM::BaseDefine::BlogType IMBlogGetListReq::blog_type() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.blog_type)
  return _internal_blog_type();
}
inline void IMBlogGetListReq::_internal_set_blog_type(::IM::BaseDefine::BlogType value) {
  
  blog_type_ = value;
}
inline void IMBlogGetListReq::set_blog_type(::IM::BaseDefine::BlogType value) {
  _internal_set_blog_type(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.blog_type)
}

// uint32 page = 4;
inline void IMBlogGetListReq::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListReq::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListReq::page() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.page)
  return _internal_page();
}
inline void IMBlogGetListReq::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void IMBlogGetListReq::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.page)
}

// uint32 page_size = 5;
inline void IMBlogGetListReq::clear_page_size() {
  page_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListReq::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListReq::page_size() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.page_size)
  return _internal_page_size();
}
inline void IMBlogGetListReq::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_size_ = value;
}
inline void IMBlogGetListReq::set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.page_size)
}

// bytes attach_data = 20;
inline void IMBlogGetListReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogGetListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.attach_data)
  return _internal_attach_data();
}
inline void IMBlogGetListReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.attach_data)
}
inline std::string* IMBlogGetListReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetListReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMBlogGetListReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMBlogGetListReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogGetListReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogGetListReq.attach_data)
}
inline void IMBlogGetListReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetListReq.attach_data)
}
inline void IMBlogGetListReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetListReq.attach_data)
}
inline std::string* IMBlogGetListReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogGetListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogGetListReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogGetListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetListReq.attach_data)
}

// -------------------------------------------------------------------

// IMBlogGetListRsp

// string user_id = 1;
inline void IMBlogGetListRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogGetListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.user_id)
  return _internal_user_id();
}
inline void IMBlogGetListRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.user_id)
}
inline std::string* IMBlogGetListRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetListRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMBlogGetListRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMBlogGetListRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogGetListRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogGetListRsp.user_id)
}
inline void IMBlogGetListRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetListRsp.user_id)
}
inline void IMBlogGetListRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetListRsp.user_id)
}
inline std::string* IMBlogGetListRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogGetListRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogGetListRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogGetListRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetListRsp.user_id)
}

// .IM.BaseDefine.BlogType blog_type = 2;
inline void IMBlogGetListRsp::clear_blog_type() {
  blog_type_ = 0;
}
inline ::IM::BaseDefine::BlogType IMBlogGetListRsp::_internal_blog_type() const {
  return static_cast< ::IM::BaseDefine::BlogType >(blog_type_);
}
inline ::IM::BaseDefine::BlogType IMBlogGetListRsp::blog_type() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.blog_type)
  return _internal_blog_type();
}
inline void IMBlogGetListRsp::_internal_set_blog_type(::IM::BaseDefine::BlogType value) {
  
  blog_type_ = value;
}
inline void IMBlogGetListRsp::set_blog_type(::IM::BaseDefine::BlogType value) {
  _internal_set_blog_type(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.blog_type)
}

// uint32 page = 3;
inline void IMBlogGetListRsp::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListRsp::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListRsp::page() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.page)
  return _internal_page();
}
inline void IMBlogGetListRsp::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void IMBlogGetListRsp::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.page)
}

// uint32 page_size = 4;
inline void IMBlogGetListRsp::clear_page_size() {
  page_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListRsp::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetListRsp::page_size() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.page_size)
  return _internal_page_size();
}
inline void IMBlogGetListRsp::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_size_ = value;
}
inline void IMBlogGetListRsp::set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.page_size)
}

// repeated .IM.BaseDefine.BlogInfo blog_list = 5;
inline int IMBlogGetListRsp::_internal_blog_list_size() const {
  return blog_list_.size();
}
inline int IMBlogGetListRsp::blog_list_size() const {
  return _internal_blog_list_size();
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetListRsp::mutable_blog_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetListRsp.blog_list)
  return blog_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >*
IMBlogGetListRsp::mutable_blog_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Blog.IMBlogGetListRsp.blog_list)
  return &blog_list_;
}
inline const ::IM::BaseDefine::BlogInfo& IMBlogGetListRsp::_internal_blog_list(int index) const {
  return blog_list_.Get(index);
}
inline const ::IM::BaseDefine::BlogInfo& IMBlogGetListRsp::blog_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.blog_list)
  return _internal_blog_list(index);
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetListRsp::_internal_add_blog_list() {
  return blog_list_.Add();
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetListRsp::add_blog_list() {
  // @@protoc_insertion_point(field_add:IM.Blog.IMBlogGetListRsp.blog_list)
  return _internal_add_blog_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >&
IMBlogGetListRsp::blog_list() const {
  // @@protoc_insertion_point(field_list:IM.Blog.IMBlogGetListRsp.blog_list)
  return blog_list_;
}

// bytes attach_data = 20;
inline void IMBlogGetListRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogGetListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.attach_data)
  return _internal_attach_data();
}
inline void IMBlogGetListRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.attach_data)
}
inline std::string* IMBlogGetListRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetListRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMBlogGetListRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMBlogGetListRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogGetListRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogGetListRsp.attach_data)
}
inline void IMBlogGetListRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetListRsp.attach_data)
}
inline void IMBlogGetListRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetListRsp.attach_data)
}
inline std::string* IMBlogGetListRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogGetListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogGetListRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogGetListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMBlogAddCommentReq

// string user_id = 1;
inline void IMBlogAddCommentReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogAddCommentReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentReq.user_id)
  return _internal_user_id();
}
inline void IMBlogAddCommentReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentReq.user_id)
}
inline std::string* IMBlogAddCommentReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogAddCommentReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMBlogAddCommentReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMBlogAddCommentReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogAddCommentReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogAddCommentReq.user_id)
}
inline void IMBlogAddCommentReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogAddCommentReq.user_id)
}
inline void IMBlogAddCommentReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogAddCommentReq.user_id)
}
inline std::string* IMBlogAddCommentReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogAddCommentReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogAddCommentReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogAddCommentReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogAddCommentReq.user_id)
}

// uint32 blog_id = 2;
inline void IMBlogAddCommentReq::clear_blog_id() {
  blog_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogAddCommentReq::_internal_blog_id() const {
  return blog_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogAddCommentReq::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentReq.blog_id)
  return _internal_blog_id();
}
inline void IMBlogAddCommentReq::_internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blog_id_ = value;
}
inline void IMBlogAddCommentReq::set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blog_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentReq.blog_id)
}

// bytes blog_data = 3;
inline void IMBlogAddCommentReq::clear_blog_data() {
  blog_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogAddCommentReq::blog_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentReq.blog_data)
  return _internal_blog_data();
}
inline void IMBlogAddCommentReq::set_blog_data(const std::string& value) {
  _internal_set_blog_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentReq.blog_data)
}
inline std::string* IMBlogAddCommentReq::mutable_blog_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogAddCommentReq.blog_data)
  return _internal_mutable_blog_data();
}
inline const std::string& IMBlogAddCommentReq::_internal_blog_data() const {
  return blog_data_.Get();
}
inline void IMBlogAddCommentReq::_internal_set_blog_data(const std::string& value) {
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogAddCommentReq::set_blog_data(std::string&& value) {
  
  blog_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogAddCommentReq.blog_data)
}
inline void IMBlogAddCommentReq::set_blog_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogAddCommentReq.blog_data)
}
inline void IMBlogAddCommentReq::set_blog_data(const void* value,
    size_t size) {
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogAddCommentReq.blog_data)
}
inline std::string* IMBlogAddCommentReq::_internal_mutable_blog_data() {
  
  return blog_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogAddCommentReq::release_blog_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogAddCommentReq.blog_data)
  return blog_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogAddCommentReq::set_allocated_blog_data(std::string* blog_data) {
  if (blog_data != nullptr) {
    
  } else {
    
  }
  blog_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blog_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogAddCommentReq.blog_data)
}

// bytes attach_data = 20;
inline void IMBlogAddCommentReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogAddCommentReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentReq.attach_data)
  return _internal_attach_data();
}
inline void IMBlogAddCommentReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentReq.attach_data)
}
inline std::string* IMBlogAddCommentReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogAddCommentReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMBlogAddCommentReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMBlogAddCommentReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogAddCommentReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogAddCommentReq.attach_data)
}
inline void IMBlogAddCommentReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogAddCommentReq.attach_data)
}
inline void IMBlogAddCommentReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogAddCommentReq.attach_data)
}
inline std::string* IMBlogAddCommentReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogAddCommentReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogAddCommentReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogAddCommentReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogAddCommentReq.attach_data)
}

// -------------------------------------------------------------------

// IMBlogAddCommentRsp

// string user_id = 1;
inline void IMBlogAddCommentRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogAddCommentRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.user_id)
  return _internal_user_id();
}
inline void IMBlogAddCommentRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.user_id)
}
inline std::string* IMBlogAddCommentRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogAddCommentRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMBlogAddCommentRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMBlogAddCommentRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogAddCommentRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogAddCommentRsp.user_id)
}
inline void IMBlogAddCommentRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogAddCommentRsp.user_id)
}
inline void IMBlogAddCommentRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogAddCommentRsp.user_id)
}
inline std::string* IMBlogAddCommentRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogAddCommentRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogAddCommentRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogAddCommentRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogAddCommentRsp.user_id)
}

// uint32 comment_id = 2;
inline void IMBlogAddCommentRsp::clear_comment_id() {
  comment_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogAddCommentRsp::_internal_comment_id() const {
  return comment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogAddCommentRsp::comment_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.comment_id)
  return _internal_comment_id();
}
inline void IMBlogAddCommentRsp::_internal_set_comment_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  comment_id_ = value;
}
inline void IMBlogAddCommentRsp::set_comment_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_comment_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.comment_id)
}

// uint32 update_time = 3;
inline void IMBlogAddCommentRsp::clear_update_time() {
  update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogAddCommentRsp::_internal_update_time() const {
  return update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogAddCommentRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.update_time)
  return _internal_update_time();
}
inline void IMBlogAddCommentRsp::_internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  update_time_ = value;
}
inline void IMBlogAddCommentRsp::set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.update_time)
}

// uint32 result_code = 4;
inline void IMBlogAddCommentRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogAddCommentRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogAddCommentRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.result_code)
  return _internal_result_code();
}
inline void IMBlogAddCommentRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMBlogAddCommentRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.result_code)
}

// bytes attach_data = 20;
inline void IMBlogAddCommentRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogAddCommentRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.attach_data)
  return _internal_attach_data();
}
inline void IMBlogAddCommentRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.attach_data)
}
inline std::string* IMBlogAddCommentRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogAddCommentRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMBlogAddCommentRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMBlogAddCommentRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogAddCommentRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogAddCommentRsp.attach_data)
}
inline void IMBlogAddCommentRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogAddCommentRsp.attach_data)
}
inline void IMBlogAddCommentRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogAddCommentRsp.attach_data)
}
inline std::string* IMBlogAddCommentRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogAddCommentRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogAddCommentRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogAddCommentRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogAddCommentRsp.attach_data)
}

// -------------------------------------------------------------------

// IMBlogGetCommentReq

// string user_id = 1;
inline void IMBlogGetCommentReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogGetCommentReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentReq.user_id)
  return _internal_user_id();
}
inline void IMBlogGetCommentReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentReq.user_id)
}
inline std::string* IMBlogGetCommentReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetCommentReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMBlogGetCommentReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMBlogGetCommentReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogGetCommentReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogGetCommentReq.user_id)
}
inline void IMBlogGetCommentReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetCommentReq.user_id)
}
inline void IMBlogGetCommentReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetCommentReq.user_id)
}
inline std::string* IMBlogGetCommentReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogGetCommentReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogGetCommentReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogGetCommentReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetCommentReq.user_id)
}

// uint32 blog_id = 2;
inline void IMBlogGetCommentReq::clear_blog_id() {
  blog_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetCommentReq::_internal_blog_id() const {
  return blog_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetCommentReq::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentReq.blog_id)
  return _internal_blog_id();
}
inline void IMBlogGetCommentReq::_internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blog_id_ = value;
}
inline void IMBlogGetCommentReq::set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blog_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentReq.blog_id)
}

// uint32 update_time = 3;
inline void IMBlogGetCommentReq::clear_update_time() {
  update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetCommentReq::_internal_update_time() const {
  return update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetCommentReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentReq.update_time)
  return _internal_update_time();
}
inline void IMBlogGetCommentReq::_internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  update_time_ = value;
}
inline void IMBlogGetCommentReq::set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentReq.update_time)
}

// bytes attach_data = 20;
inline void IMBlogGetCommentReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogGetCommentReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentReq.attach_data)
  return _internal_attach_data();
}
inline void IMBlogGetCommentReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentReq.attach_data)
}
inline std::string* IMBlogGetCommentReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetCommentReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMBlogGetCommentReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMBlogGetCommentReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogGetCommentReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogGetCommentReq.attach_data)
}
inline void IMBlogGetCommentReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetCommentReq.attach_data)
}
inline void IMBlogGetCommentReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetCommentReq.attach_data)
}
inline std::string* IMBlogGetCommentReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogGetCommentReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogGetCommentReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogGetCommentReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetCommentReq.attach_data)
}

// -------------------------------------------------------------------

// IMBlogGetCommentRsp

// string user_id = 1;
inline void IMBlogGetCommentRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogGetCommentRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.user_id)
  return _internal_user_id();
}
inline void IMBlogGetCommentRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentRsp.user_id)
}
inline std::string* IMBlogGetCommentRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetCommentRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMBlogGetCommentRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMBlogGetCommentRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogGetCommentRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogGetCommentRsp.user_id)
}
inline void IMBlogGetCommentRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetCommentRsp.user_id)
}
inline void IMBlogGetCommentRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetCommentRsp.user_id)
}
inline std::string* IMBlogGetCommentRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogGetCommentRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogGetCommentRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogGetCommentRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetCommentRsp.user_id)
}

// uint32 blog_id = 2;
inline void IMBlogGetCommentRsp::clear_blog_id() {
  blog_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetCommentRsp::_internal_blog_id() const {
  return blog_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetCommentRsp::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.blog_id)
  return _internal_blog_id();
}
inline void IMBlogGetCommentRsp::_internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blog_id_ = value;
}
inline void IMBlogGetCommentRsp::set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blog_id(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentRsp.blog_id)
}

// uint32 update_time = 3;
inline void IMBlogGetCommentRsp::clear_update_time() {
  update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetCommentRsp::_internal_update_time() const {
  return update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMBlogGetCommentRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.update_time)
  return _internal_update_time();
}
inline void IMBlogGetCommentRsp::_internal_set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  update_time_ = value;
}
inline void IMBlogGetCommentRsp::set_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentRsp.update_time)
}

// repeated .IM.BaseDefine.BlogInfo comment_list = 4;
inline int IMBlogGetCommentRsp::_internal_comment_list_size() const {
  return comment_list_.size();
}
inline int IMBlogGetCommentRsp::comment_list_size() const {
  return _internal_comment_list_size();
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetCommentRsp::mutable_comment_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return comment_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >*
IMBlogGetCommentRsp::mutable_comment_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return &comment_list_;
}
inline const ::IM::BaseDefine::BlogInfo& IMBlogGetCommentRsp::_internal_comment_list(int index) const {
  return comment_list_.Get(index);
}
inline const ::IM::BaseDefine::BlogInfo& IMBlogGetCommentRsp::comment_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return _internal_comment_list(index);
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetCommentRsp::_internal_add_comment_list() {
  return comment_list_.Add();
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetCommentRsp::add_comment_list() {
  // @@protoc_insertion_point(field_add:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return _internal_add_comment_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >&
IMBlogGetCommentRsp::comment_list() const {
  // @@protoc_insertion_point(field_list:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return comment_list_;
}

// bytes attach_data = 20;
inline void IMBlogGetCommentRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMBlogGetCommentRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.attach_data)
  return _internal_attach_data();
}
inline void IMBlogGetCommentRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentRsp.attach_data)
}
inline std::string* IMBlogGetCommentRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetCommentRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMBlogGetCommentRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMBlogGetCommentRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMBlogGetCommentRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Blog.IMBlogGetCommentRsp.attach_data)
}
inline void IMBlogGetCommentRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetCommentRsp.attach_data)
}
inline void IMBlogGetCommentRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetCommentRsp.attach_data)
}
inline std::string* IMBlogGetCommentRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMBlogGetCommentRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Blog.IMBlogGetCommentRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMBlogGetCommentRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetCommentRsp.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Blog
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eBlog_2eproto
