// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Friendship.proto

#include "IM.Friendship.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_IM_2eBaseDefine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_IM_2eBaseDefine_2eproto;
namespace IM {
namespace Friend {
class IMFriendShipAddReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipAddReq> _instance;
} _IMFriendShipAddReq_default_instance_;
class IMFriendShipAddRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipAddRsp> _instance;
} _IMFriendShipAddRsp_default_instance_;
class IMFriendShipAddNotifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipAddNotify> _instance;
} _IMFriendShipAddNotify_default_instance_;
class IMFriendShipListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipListReq> _instance;
} _IMFriendShipListReq_default_instance_;
class IMFriendShipListRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipListRsp> _instance;
} _IMFriendShipListRsp_default_instance_;
class IMFriendGetUnAgreeListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendGetUnAgreeListReq> _instance;
} _IMFriendGetUnAgreeListReq_default_instance_;
class IMFriendGetUnAgreeListRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendGetUnAgreeListRsp> _instance;
} _IMFriendGetUnAgreeListRsp_default_instance_;
class IMFriendShipUpdateRelationReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipUpdateRelationReq> _instance;
} _IMFriendShipUpdateRelationReq_default_instance_;
class IMFriendShipUpdateRelationResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipUpdateRelationRes> _instance;
} _IMFriendShipUpdateRelationRes_default_instance_;
class IMFriendShipSearchReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipSearchReq> _instance;
} _IMFriendShipSearchReq_default_instance_;
class IMFriendShipSearchResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMFriendShipSearchRes> _instance;
} _IMFriendShipSearchRes_default_instance_;
}  // namespace Friend
}  // namespace IM
static void InitDefaultsscc_info_IMFriendGetUnAgreeListReq_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendGetUnAgreeListReq_default_instance_;
    new (ptr) ::IM::Friend::IMFriendGetUnAgreeListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendGetUnAgreeListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMFriendGetUnAgreeListReq_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMFriendGetUnAgreeListReq_IM_2eFriendship_2eproto}, {}};

static void InitDefaultsscc_info_IMFriendGetUnAgreeListRsp_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendGetUnAgreeListRsp_default_instance_;
    new (ptr) ::IM::Friend::IMFriendGetUnAgreeListRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendGetUnAgreeListRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMFriendGetUnAgreeListRsp_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMFriendGetUnAgreeListRsp_IM_2eFriendship_2eproto}, {
      &scc_info_UserInfo_IM_2eBaseDefine_2eproto.base,}};

static void InitDefaultsscc_info_IMFriendShipAddNotify_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipAddNotify_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipAddNotify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipAddNotify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMFriendShipAddNotify_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMFriendShipAddNotify_IM_2eFriendship_2eproto}, {
      &scc_info_UserInfo_IM_2eBaseDefine_2eproto.base,}};

static void InitDefaultsscc_info_IMFriendShipAddReq_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipAddReq_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipAddReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipAddReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMFriendShipAddReq_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMFriendShipAddReq_IM_2eFriendship_2eproto}, {}};

static void InitDefaultsscc_info_IMFriendShipAddRsp_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipAddRsp_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipAddRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipAddRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMFriendShipAddRsp_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMFriendShipAddRsp_IM_2eFriendship_2eproto}, {
      &scc_info_UserInfo_IM_2eBaseDefine_2eproto.base,}};

static void InitDefaultsscc_info_IMFriendShipListReq_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipListReq_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMFriendShipListReq_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMFriendShipListReq_IM_2eFriendship_2eproto}, {}};

static void InitDefaultsscc_info_IMFriendShipListRsp_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipListRsp_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipListRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipListRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMFriendShipListRsp_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMFriendShipListRsp_IM_2eFriendship_2eproto}, {
      &scc_info_UserInfo_IM_2eBaseDefine_2eproto.base,}};

static void InitDefaultsscc_info_IMFriendShipSearchReq_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipSearchReq_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipSearchReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipSearchReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMFriendShipSearchReq_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMFriendShipSearchReq_IM_2eFriendship_2eproto}, {}};

static void InitDefaultsscc_info_IMFriendShipSearchRes_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipSearchRes_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipSearchRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipSearchRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IMFriendShipSearchRes_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IMFriendShipSearchRes_IM_2eFriendship_2eproto}, {
      &scc_info_UserInfo_IM_2eBaseDefine_2eproto.base,}};

static void InitDefaultsscc_info_IMFriendShipUpdateRelationReq_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipUpdateRelationReq_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipUpdateRelationReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipUpdateRelationReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMFriendShipUpdateRelationReq_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMFriendShipUpdateRelationReq_IM_2eFriendship_2eproto}, {}};

static void InitDefaultsscc_info_IMFriendShipUpdateRelationRes_IM_2eFriendship_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IM::Friend::_IMFriendShipUpdateRelationRes_default_instance_;
    new (ptr) ::IM::Friend::IMFriendShipUpdateRelationRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Friend::IMFriendShipUpdateRelationRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMFriendShipUpdateRelationRes_IM_2eFriendship_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMFriendShipUpdateRelationRes_IM_2eFriendship_2eproto}, {}};

namespace IM {
namespace Friend {

// ===================================================================

void IMFriendShipAddReq::InitAsDefaultInstance() {
}
class IMFriendShipAddReq::_Internal {
 public:
};

IMFriendShipAddReq::IMFriendShipAddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipAddReq)
}
IMFriendShipAddReq::IMFriendShipAddReq(const IMFriendShipAddReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  myid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_myid().empty()) {
    myid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_myid(),
      GetArena());
  }
  friend_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_friend_id().empty()) {
    friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_friend_id(),
      GetArena());
  }
  friend_nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_friend_nickname().empty()) {
    friend_nickname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_friend_nickname(),
      GetArena());
  }
  attach_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_msg().empty()) {
    attach_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_msg(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipAddReq)
}

void IMFriendShipAddReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipAddReq_IM_2eFriendship_2eproto.base);
  myid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMFriendShipAddReq::~IMFriendShipAddReq() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipAddReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipAddReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  myid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendShipAddReq::ArenaDtor(void* object) {
  IMFriendShipAddReq* _this = reinterpret_cast< IMFriendShipAddReq* >(object);
  (void)_this;
}
void IMFriendShipAddReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipAddReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipAddReq& IMFriendShipAddReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipAddReq_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipAddReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipAddReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  myid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipAddReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string myid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_myid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_friend_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string friend_nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_friend_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attach_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_attach_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipAddReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipAddReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string myid = 1;
  if (this->myid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_myid().data(), static_cast<int>(this->_internal_myid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddReq.myid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_myid(), target);
  }

  // string friend_id = 2;
  if (this->friend_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_id().data(), static_cast<int>(this->_internal_friend_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddReq.friend_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_friend_id(), target);
  }

  // string friend_nickname = 3;
  if (this->friend_nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_nickname().data(), static_cast<int>(this->_internal_friend_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddReq.friend_nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_friend_nickname(), target);
  }

  // string attach_msg = 4;
  if (this->attach_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attach_msg().data(), static_cast<int>(this->_internal_attach_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddReq.attach_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attach_msg(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipAddReq)
  return target;
}

size_t IMFriendShipAddReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipAddReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string myid = 1;
  if (this->myid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_myid());
  }

  // string friend_id = 2;
  if (this->friend_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_id());
  }

  // string friend_nickname = 3;
  if (this->friend_nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_nickname());
  }

  // string attach_msg = 4;
  if (this->attach_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attach_msg());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipAddReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipAddReq*>(
      &from));
}

void IMFriendShipAddReq::MergeFrom(const IMFriendShipAddReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipAddReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.myid().size() > 0) {
    _internal_set_myid(from._internal_myid());
  }
  if (from.friend_id().size() > 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
  if (from.friend_nickname().size() > 0) {
    _internal_set_friend_nickname(from._internal_friend_nickname());
  }
  if (from.attach_msg().size() > 0) {
    _internal_set_attach_msg(from._internal_attach_msg());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMFriendShipAddReq::CopyFrom(const IMFriendShipAddReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipAddReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipAddReq::IsInitialized() const {
  return true;
}

void IMFriendShipAddReq::InternalSwap(IMFriendShipAddReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  myid_.Swap(&other->myid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_id_.Swap(&other->friend_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_nickname_.Swap(&other->friend_nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_msg_.Swap(&other->attach_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMFriendShipAddReq::GetTypeName() const {
  return "IM.Friend.IMFriendShipAddReq";
}


// ===================================================================

void IMFriendShipAddRsp::InitAsDefaultInstance() {
  ::IM::Friend::_IMFriendShipAddRsp_default_instance_._instance.get_mutable()->friend_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
}
class IMFriendShipAddRsp::_Internal {
 public:
  static const ::IM::BaseDefine::UserInfo& friend_info(const IMFriendShipAddRsp* msg);
};

const ::IM::BaseDefine::UserInfo&
IMFriendShipAddRsp::_Internal::friend_info(const IMFriendShipAddRsp* msg) {
  return *msg->friend_info_;
}
void IMFriendShipAddRsp::clear_friend_info() {
  if (GetArena() == nullptr && friend_info_ != nullptr) {
    delete friend_info_;
  }
  friend_info_ = nullptr;
}
IMFriendShipAddRsp::IMFriendShipAddRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipAddRsp)
}
IMFriendShipAddRsp::IMFriendShipAddRsp(const IMFriendShipAddRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_string().empty()) {
    result_string_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result_string(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  if (from._internal_has_friend_info()) {
    friend_info_ = new ::IM::BaseDefine::UserInfo(*from.friend_info_);
  } else {
    friend_info_ = nullptr;
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipAddRsp)
}

void IMFriendShipAddRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipAddRsp_IM_2eFriendship_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&friend_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&friend_info_)) + sizeof(result_code_));
}

IMFriendShipAddRsp::~IMFriendShipAddRsp() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipAddRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipAddRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete friend_info_;
}

void IMFriendShipAddRsp::ArenaDtor(void* object) {
  IMFriendShipAddRsp* _this = reinterpret_cast< IMFriendShipAddRsp* >(object);
  (void)_this;
}
void IMFriendShipAddRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipAddRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipAddRsp& IMFriendShipAddRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipAddRsp_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipAddRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipAddRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && friend_info_ != nullptr) {
    delete friend_info_;
  }
  friend_info_ = nullptr;
  result_code_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipAddRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string result_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_result_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.UserInfo friend_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipAddRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipAddRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddRsp.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result_code(), target);
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_string().data(), static_cast<int>(this->_internal_result_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddRsp.result_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_result_string(), target);
  }

  // .IM.BaseDefine.UserInfo friend_info = 4;
  if (this->has_friend_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::friend_info(this), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipAddRsp)
  return target;
}

size_t IMFriendShipAddRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipAddRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_string());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.BaseDefine.UserInfo friend_info = 4;
  if (this->has_friend_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friend_info_);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipAddRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipAddRsp*>(
      &from));
}

void IMFriendShipAddRsp::MergeFrom(const IMFriendShipAddRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipAddRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.result_string().size() > 0) {
    _internal_set_result_string(from._internal_result_string());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.has_friend_info()) {
    _internal_mutable_friend_info()->::IM::BaseDefine::UserInfo::MergeFrom(from._internal_friend_info());
  }
  if (from.result_code() != 0) {
    _internal_set_result_code(from._internal_result_code());
  }
}

void IMFriendShipAddRsp::CopyFrom(const IMFriendShipAddRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipAddRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipAddRsp::IsInitialized() const {
  return true;
}

void IMFriendShipAddRsp::InternalSwap(IMFriendShipAddRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_string_.Swap(&other->result_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFriendShipAddRsp, result_code_)
      + sizeof(IMFriendShipAddRsp::result_code_)
      - PROTOBUF_FIELD_OFFSET(IMFriendShipAddRsp, friend_info_)>(
          reinterpret_cast<char*>(&friend_info_),
          reinterpret_cast<char*>(&other->friend_info_));
}

std::string IMFriendShipAddRsp::GetTypeName() const {
  return "IM.Friend.IMFriendShipAddRsp";
}


// ===================================================================

void IMFriendShipAddNotify::InitAsDefaultInstance() {
  ::IM::Friend::_IMFriendShipAddNotify_default_instance_._instance.get_mutable()->friend_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
}
class IMFriendShipAddNotify::_Internal {
 public:
  static const ::IM::BaseDefine::UserInfo& friend_info(const IMFriendShipAddNotify* msg);
};

const ::IM::BaseDefine::UserInfo&
IMFriendShipAddNotify::_Internal::friend_info(const IMFriendShipAddNotify* msg) {
  return *msg->friend_info_;
}
void IMFriendShipAddNotify::clear_friend_info() {
  if (GetArena() == nullptr && friend_info_ != nullptr) {
    delete friend_info_;
  }
  friend_info_ = nullptr;
}
IMFriendShipAddNotify::IMFriendShipAddNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipAddNotify)
}
IMFriendShipAddNotify::IMFriendShipAddNotify(const IMFriendShipAddNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  from_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_user_id().empty()) {
    from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from_user_id(),
      GetArena());
  }
  to_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_user_id().empty()) {
    to_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to_user_id(),
      GetArena());
  }
  attach_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_msg().empty()) {
    attach_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_msg(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  if (from._internal_has_friend_info()) {
    friend_info_ = new ::IM::BaseDefine::UserInfo(*from.friend_info_);
  } else {
    friend_info_ = nullptr;
  }
  notify_value_ = from.notify_value_;
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipAddNotify)
}

void IMFriendShipAddNotify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipAddNotify_IM_2eFriendship_2eproto.base);
  from_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&friend_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notify_value_) -
      reinterpret_cast<char*>(&friend_info_)) + sizeof(notify_value_));
}

IMFriendShipAddNotify::~IMFriendShipAddNotify() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipAddNotify)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipAddNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete friend_info_;
}

void IMFriendShipAddNotify::ArenaDtor(void* object) {
  IMFriendShipAddNotify* _this = reinterpret_cast< IMFriendShipAddNotify* >(object);
  (void)_this;
}
void IMFriendShipAddNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipAddNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipAddNotify& IMFriendShipAddNotify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipAddNotify_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipAddNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipAddNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && friend_info_ != nullptr) {
    delete friend_info_;
  }
  friend_info_ = nullptr;
  notify_value_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipAddNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 notify_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          notify_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IM.BaseDefine.UserInfo friend_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_friend_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string attach_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_attach_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipAddNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipAddNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_user_id = 1;
  if (this->from_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from_user_id().data(), static_cast<int>(this->_internal_from_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddNotify.from_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from_user_id(), target);
  }

  // string to_user_id = 2;
  if (this->to_user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to_user_id().data(), static_cast<int>(this->_internal_to_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddNotify.to_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to_user_id(), target);
  }

  // uint32 notify_value = 3;
  if (this->notify_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_notify_value(), target);
  }

  // .IM.BaseDefine.UserInfo friend_info = 4;
  if (this->has_friend_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::friend_info(this), target, stream);
  }

  // string attach_msg = 5;
  if (this->attach_msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attach_msg().data(), static_cast<int>(this->_internal_attach_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipAddNotify.attach_msg");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_attach_msg(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipAddNotify)
  return target;
}

size_t IMFriendShipAddNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipAddNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from_user_id = 1;
  if (this->from_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from_user_id());
  }

  // string to_user_id = 2;
  if (this->to_user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to_user_id());
  }

  // string attach_msg = 5;
  if (this->attach_msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attach_msg());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // .IM.BaseDefine.UserInfo friend_info = 4;
  if (this->has_friend_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *friend_info_);
  }

  // uint32 notify_value = 3;
  if (this->notify_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_notify_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipAddNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipAddNotify*>(
      &from));
}

void IMFriendShipAddNotify::MergeFrom(const IMFriendShipAddNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipAddNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_user_id().size() > 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from.to_user_id().size() > 0) {
    _internal_set_to_user_id(from._internal_to_user_id());
  }
  if (from.attach_msg().size() > 0) {
    _internal_set_attach_msg(from._internal_attach_msg());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.has_friend_info()) {
    _internal_mutable_friend_info()->::IM::BaseDefine::UserInfo::MergeFrom(from._internal_friend_info());
  }
  if (from.notify_value() != 0) {
    _internal_set_notify_value(from._internal_notify_value());
  }
}

void IMFriendShipAddNotify::CopyFrom(const IMFriendShipAddNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipAddNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipAddNotify::IsInitialized() const {
  return true;
}

void IMFriendShipAddNotify::InternalSwap(IMFriendShipAddNotify* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  from_user_id_.Swap(&other->from_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_user_id_.Swap(&other->to_user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_msg_.Swap(&other->attach_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMFriendShipAddNotify, notify_value_)
      + sizeof(IMFriendShipAddNotify::notify_value_)
      - PROTOBUF_FIELD_OFFSET(IMFriendShipAddNotify, friend_info_)>(
          reinterpret_cast<char*>(&friend_info_),
          reinterpret_cast<char*>(&other->friend_info_));
}

std::string IMFriendShipAddNotify::GetTypeName() const {
  return "IM.Friend.IMFriendShipAddNotify";
}


// ===================================================================

void IMFriendShipListReq::InitAsDefaultInstance() {
}
class IMFriendShipListReq::_Internal {
 public:
};

IMFriendShipListReq::IMFriendShipListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipListReq)
}
IMFriendShipListReq::IMFriendShipListReq(const IMFriendShipListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  myid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_myid().empty()) {
    myid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_myid(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipListReq)
}

void IMFriendShipListReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipListReq_IM_2eFriendship_2eproto.base);
  myid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMFriendShipListReq::~IMFriendShipListReq() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipListReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  myid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendShipListReq::ArenaDtor(void* object) {
  IMFriendShipListReq* _this = reinterpret_cast< IMFriendShipListReq* >(object);
  (void)_this;
}
void IMFriendShipListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipListReq& IMFriendShipListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipListReq_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  myid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string myid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_myid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string myid = 1;
  if (this->myid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_myid().data(), static_cast<int>(this->_internal_myid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipListReq.myid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_myid(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipListReq)
  return target;
}

size_t IMFriendShipListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string myid = 1;
  if (this->myid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_myid());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipListReq*>(
      &from));
}

void IMFriendShipListReq::MergeFrom(const IMFriendShipListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.myid().size() > 0) {
    _internal_set_myid(from._internal_myid());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMFriendShipListReq::CopyFrom(const IMFriendShipListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipListReq::IsInitialized() const {
  return true;
}

void IMFriendShipListReq::InternalSwap(IMFriendShipListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  myid_.Swap(&other->myid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMFriendShipListReq::GetTypeName() const {
  return "IM.Friend.IMFriendShipListReq";
}


// ===================================================================

void IMFriendShipListRsp::InitAsDefaultInstance() {
}
class IMFriendShipListRsp::_Internal {
 public:
};

void IMFriendShipListRsp::clear_user_list() {
  user_list_.Clear();
}
IMFriendShipListRsp::IMFriendShipListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  user_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipListRsp)
}
IMFriendShipListRsp::IMFriendShipListRsp(const IMFriendShipListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      user_list_(from.user_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipListRsp)
}

void IMFriendShipListRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipListRsp_IM_2eFriendship_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMFriendShipListRsp::~IMFriendShipListRsp() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipListRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendShipListRsp::ArenaDtor(void* object) {
  IMFriendShipListRsp* _this = reinterpret_cast< IMFriendShipListRsp* >(object);
  (void)_this;
}
void IMFriendShipListRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipListRsp& IMFriendShipListRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipListRsp_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_list_.Clear();
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipListRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.UserInfo user_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipListRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipListRsp.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_user_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipListRsp)
  return target;
}

size_t IMFriendShipListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipListRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  total_size += 1UL * this->_internal_user_list_size();
  for (const auto& msg : this->user_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipListRsp*>(
      &from));
}

void IMFriendShipListRsp::MergeFrom(const IMFriendShipListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_list_.MergeFrom(from.user_list_);
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMFriendShipListRsp::CopyFrom(const IMFriendShipListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipListRsp::IsInitialized() const {
  return true;
}

void IMFriendShipListRsp::InternalSwap(IMFriendShipListRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_list_.InternalSwap(&other->user_list_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMFriendShipListRsp::GetTypeName() const {
  return "IM.Friend.IMFriendShipListRsp";
}


// ===================================================================

void IMFriendGetUnAgreeListReq::InitAsDefaultInstance() {
}
class IMFriendGetUnAgreeListReq::_Internal {
 public:
};

IMFriendGetUnAgreeListReq::IMFriendGetUnAgreeListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendGetUnAgreeListReq)
}
IMFriendGetUnAgreeListReq::IMFriendGetUnAgreeListReq(const IMFriendGetUnAgreeListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendGetUnAgreeListReq)
}

void IMFriendGetUnAgreeListReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendGetUnAgreeListReq_IM_2eFriendship_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMFriendGetUnAgreeListReq::~IMFriendGetUnAgreeListReq() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendGetUnAgreeListReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendGetUnAgreeListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendGetUnAgreeListReq::ArenaDtor(void* object) {
  IMFriendGetUnAgreeListReq* _this = reinterpret_cast< IMFriendGetUnAgreeListReq* >(object);
  (void)_this;
}
void IMFriendGetUnAgreeListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendGetUnAgreeListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendGetUnAgreeListReq& IMFriendGetUnAgreeListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendGetUnAgreeListReq_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendGetUnAgreeListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendGetUnAgreeListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendGetUnAgreeListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendGetUnAgreeListReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendGetUnAgreeListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendGetUnAgreeListReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendGetUnAgreeListReq)
  return target;
}

size_t IMFriendGetUnAgreeListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendGetUnAgreeListReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendGetUnAgreeListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendGetUnAgreeListReq*>(
      &from));
}

void IMFriendGetUnAgreeListReq::MergeFrom(const IMFriendGetUnAgreeListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendGetUnAgreeListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMFriendGetUnAgreeListReq::CopyFrom(const IMFriendGetUnAgreeListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendGetUnAgreeListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendGetUnAgreeListReq::IsInitialized() const {
  return true;
}

void IMFriendGetUnAgreeListReq::InternalSwap(IMFriendGetUnAgreeListReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMFriendGetUnAgreeListReq::GetTypeName() const {
  return "IM.Friend.IMFriendGetUnAgreeListReq";
}


// ===================================================================

void IMFriendGetUnAgreeListRsp::InitAsDefaultInstance() {
}
class IMFriendGetUnAgreeListRsp::_Internal {
 public:
};

void IMFriendGetUnAgreeListRsp::clear_user_list() {
  user_list_.Clear();
}
IMFriendGetUnAgreeListRsp::IMFriendGetUnAgreeListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  user_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendGetUnAgreeListRsp)
}
IMFriendGetUnAgreeListRsp::IMFriendGetUnAgreeListRsp(const IMFriendGetUnAgreeListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      user_list_(from.user_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendGetUnAgreeListRsp)
}

void IMFriendGetUnAgreeListRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendGetUnAgreeListRsp_IM_2eFriendship_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMFriendGetUnAgreeListRsp::~IMFriendGetUnAgreeListRsp() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendGetUnAgreeListRsp)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendGetUnAgreeListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendGetUnAgreeListRsp::ArenaDtor(void* object) {
  IMFriendGetUnAgreeListRsp* _this = reinterpret_cast< IMFriendGetUnAgreeListRsp* >(object);
  (void)_this;
}
void IMFriendGetUnAgreeListRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendGetUnAgreeListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendGetUnAgreeListRsp& IMFriendGetUnAgreeListRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendGetUnAgreeListRsp_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendGetUnAgreeListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendGetUnAgreeListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_list_.Clear();
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendGetUnAgreeListRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.UserInfo user_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendGetUnAgreeListRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendGetUnAgreeListRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendGetUnAgreeListRsp.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_user_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendGetUnAgreeListRsp)
  return target;
}

size_t IMFriendGetUnAgreeListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendGetUnAgreeListRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  total_size += 1UL * this->_internal_user_list_size();
  for (const auto& msg : this->user_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendGetUnAgreeListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendGetUnAgreeListRsp*>(
      &from));
}

void IMFriendGetUnAgreeListRsp::MergeFrom(const IMFriendGetUnAgreeListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendGetUnAgreeListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_list_.MergeFrom(from.user_list_);
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMFriendGetUnAgreeListRsp::CopyFrom(const IMFriendGetUnAgreeListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendGetUnAgreeListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendGetUnAgreeListRsp::IsInitialized() const {
  return true;
}

void IMFriendGetUnAgreeListRsp::InternalSwap(IMFriendGetUnAgreeListRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_list_.InternalSwap(&other->user_list_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMFriendGetUnAgreeListRsp::GetTypeName() const {
  return "IM.Friend.IMFriendGetUnAgreeListRsp";
}


// ===================================================================

void IMFriendShipUpdateRelationReq::InitAsDefaultInstance() {
}
class IMFriendShipUpdateRelationReq::_Internal {
 public:
};

IMFriendShipUpdateRelationReq::IMFriendShipUpdateRelationReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipUpdateRelationReq)
}
IMFriendShipUpdateRelationReq::IMFriendShipUpdateRelationReq(const IMFriendShipUpdateRelationReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  friend_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_friend_id().empty()) {
    friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_friend_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  update_opration_ = from.update_opration_;
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipUpdateRelationReq)
}

void IMFriendShipUpdateRelationReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipUpdateRelationReq_IM_2eFriendship_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_opration_ = 0u;
}

IMFriendShipUpdateRelationReq::~IMFriendShipUpdateRelationReq() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipUpdateRelationReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipUpdateRelationReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendShipUpdateRelationReq::ArenaDtor(void* object) {
  IMFriendShipUpdateRelationReq* _this = reinterpret_cast< IMFriendShipUpdateRelationReq* >(object);
  (void)_this;
}
void IMFriendShipUpdateRelationReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipUpdateRelationReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipUpdateRelationReq& IMFriendShipUpdateRelationReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipUpdateRelationReq_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipUpdateRelationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipUpdateRelationReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_opration_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipUpdateRelationReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_friend_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 update_opration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_opration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipUpdateRelationReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipUpdateRelationReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipUpdateRelationReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string friend_id = 2;
  if (this->friend_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_id().data(), static_cast<int>(this->_internal_friend_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipUpdateRelationReq.friend_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_friend_id(), target);
  }

  // uint32 update_opration = 3;
  if (this->update_opration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_update_opration(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipUpdateRelationReq)
  return target;
}

size_t IMFriendShipUpdateRelationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipUpdateRelationReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string friend_id = 2;
  if (this->friend_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 update_opration = 3;
  if (this->update_opration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_opration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipUpdateRelationReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipUpdateRelationReq*>(
      &from));
}

void IMFriendShipUpdateRelationReq::MergeFrom(const IMFriendShipUpdateRelationReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipUpdateRelationReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.friend_id().size() > 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.update_opration() != 0) {
    _internal_set_update_opration(from._internal_update_opration());
  }
}

void IMFriendShipUpdateRelationReq::CopyFrom(const IMFriendShipUpdateRelationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipUpdateRelationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipUpdateRelationReq::IsInitialized() const {
  return true;
}

void IMFriendShipUpdateRelationReq::InternalSwap(IMFriendShipUpdateRelationReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_id_.Swap(&other->friend_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(update_opration_, other->update_opration_);
}

std::string IMFriendShipUpdateRelationReq::GetTypeName() const {
  return "IM.Friend.IMFriendShipUpdateRelationReq";
}


// ===================================================================

void IMFriendShipUpdateRelationRes::InitAsDefaultInstance() {
}
class IMFriendShipUpdateRelationRes::_Internal {
 public:
};

IMFriendShipUpdateRelationRes::IMFriendShipUpdateRelationRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipUpdateRelationRes)
}
IMFriendShipUpdateRelationRes::IMFriendShipUpdateRelationRes(const IMFriendShipUpdateRelationRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  friend_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_friend_id().empty()) {
    friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_friend_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  update_status_ = from.update_status_;
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipUpdateRelationRes)
}

void IMFriendShipUpdateRelationRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipUpdateRelationRes_IM_2eFriendship_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_status_ = 0u;
}

IMFriendShipUpdateRelationRes::~IMFriendShipUpdateRelationRes() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipUpdateRelationRes)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipUpdateRelationRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  friend_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendShipUpdateRelationRes::ArenaDtor(void* object) {
  IMFriendShipUpdateRelationRes* _this = reinterpret_cast< IMFriendShipUpdateRelationRes* >(object);
  (void)_this;
}
void IMFriendShipUpdateRelationRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipUpdateRelationRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipUpdateRelationRes& IMFriendShipUpdateRelationRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipUpdateRelationRes_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipUpdateRelationRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipUpdateRelationRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_status_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipUpdateRelationRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string friend_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_friend_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 update_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          update_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipUpdateRelationRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipUpdateRelationRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipUpdateRelationRes.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string friend_id = 2;
  if (this->friend_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_friend_id().data(), static_cast<int>(this->_internal_friend_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipUpdateRelationRes.friend_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_friend_id(), target);
  }

  // uint32 update_status = 3;
  if (this->update_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_update_status(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipUpdateRelationRes)
  return target;
}

size_t IMFriendShipUpdateRelationRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipUpdateRelationRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string friend_id = 2;
  if (this->friend_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_friend_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 update_status = 3;
  if (this->update_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_update_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipUpdateRelationRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipUpdateRelationRes*>(
      &from));
}

void IMFriendShipUpdateRelationRes::MergeFrom(const IMFriendShipUpdateRelationRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipUpdateRelationRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.friend_id().size() > 0) {
    _internal_set_friend_id(from._internal_friend_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from.update_status() != 0) {
    _internal_set_update_status(from._internal_update_status());
  }
}

void IMFriendShipUpdateRelationRes::CopyFrom(const IMFriendShipUpdateRelationRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipUpdateRelationRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipUpdateRelationRes::IsInitialized() const {
  return true;
}

void IMFriendShipUpdateRelationRes::InternalSwap(IMFriendShipUpdateRelationRes* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  friend_id_.Swap(&other->friend_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(update_status_, other->update_status_);
}

std::string IMFriendShipUpdateRelationRes::GetTypeName() const {
  return "IM.Friend.IMFriendShipUpdateRelationRes";
}


// ===================================================================

void IMFriendShipSearchReq::InitAsDefaultInstance() {
}
class IMFriendShipSearchReq::_Internal {
 public:
};

IMFriendShipSearchReq::IMFriendShipSearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipSearchReq)
}
IMFriendShipSearchReq::IMFriendShipSearchReq(const IMFriendShipSearchReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_nick().empty()) {
    user_nick_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_nick(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipSearchReq)
}

void IMFriendShipSearchReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipSearchReq_IM_2eFriendship_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMFriendShipSearchReq::~IMFriendShipSearchReq() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipSearchReq)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipSearchReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendShipSearchReq::ArenaDtor(void* object) {
  IMFriendShipSearchReq* _this = reinterpret_cast< IMFriendShipSearchReq* >(object);
  (void)_this;
}
void IMFriendShipSearchReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipSearchReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipSearchReq& IMFriendShipSearchReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipSearchReq_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipSearchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipSearchReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_nick_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipSearchReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipSearchReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipSearchReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipSearchReq.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string user_nick = 2;
  if (this->user_nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_nick().data(), static_cast<int>(this->_internal_user_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipSearchReq.user_nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_nick(), target);
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipSearchReq.user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_name(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipSearchReq)
  return target;
}

size_t IMFriendShipSearchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipSearchReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string user_nick = 2;
  if (this->user_nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_nick());
  }

  // string user_name = 3;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipSearchReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipSearchReq*>(
      &from));
}

void IMFriendShipSearchReq::MergeFrom(const IMFriendShipSearchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipSearchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.user_nick().size() > 0) {
    _internal_set_user_nick(from._internal_user_nick());
  }
  if (from.user_name().size() > 0) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMFriendShipSearchReq::CopyFrom(const IMFriendShipSearchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipSearchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipSearchReq::IsInitialized() const {
  return true;
}

void IMFriendShipSearchReq::InternalSwap(IMFriendShipSearchReq* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_nick_.Swap(&other->user_nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMFriendShipSearchReq::GetTypeName() const {
  return "IM.Friend.IMFriendShipSearchReq";
}


// ===================================================================

void IMFriendShipSearchRes::InitAsDefaultInstance() {
}
class IMFriendShipSearchRes::_Internal {
 public:
};

void IMFriendShipSearchRes::clear_user_list() {
  user_list_.Clear();
}
IMFriendShipSearchRes::IMFriendShipSearchRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  user_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IM.Friend.IMFriendShipSearchRes)
}
IMFriendShipSearchRes::IMFriendShipSearchRes(const IMFriendShipSearchRes& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      user_list_(from.user_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_attach_data().empty()) {
    attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_attach_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:IM.Friend.IMFriendShipSearchRes)
}

void IMFriendShipSearchRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IMFriendShipSearchRes_IM_2eFriendship_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IMFriendShipSearchRes::~IMFriendShipSearchRes() {
  // @@protoc_insertion_point(destructor:IM.Friend.IMFriendShipSearchRes)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void IMFriendShipSearchRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMFriendShipSearchRes::ArenaDtor(void* object) {
  IMFriendShipSearchRes* _this = reinterpret_cast< IMFriendShipSearchRes* >(object);
  (void)_this;
}
void IMFriendShipSearchRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMFriendShipSearchRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMFriendShipSearchRes& IMFriendShipSearchRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMFriendShipSearchRes_IM_2eFriendship_2eproto.base);
  return *internal_default_instance();
}


void IMFriendShipSearchRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Friend.IMFriendShipSearchRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_list_.Clear();
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<std::string>();
}

const char* IMFriendShipSearchRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.UserInfo user_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMFriendShipSearchRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Friend.IMFriendShipSearchRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IM.Friend.IMFriendShipSearchRes.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_user_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Friend.IMFriendShipSearchRes)
  return target;
}

size_t IMFriendShipSearchRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Friend.IMFriendShipSearchRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  total_size += 1UL * this->_internal_user_list_size();
  for (const auto& msg : this->user_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMFriendShipSearchRes::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMFriendShipSearchRes*>(
      &from));
}

void IMFriendShipSearchRes::MergeFrom(const IMFriendShipSearchRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Friend.IMFriendShipSearchRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_list_.MergeFrom(from.user_list_);
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.attach_data().size() > 0) {
    _internal_set_attach_data(from._internal_attach_data());
  }
}

void IMFriendShipSearchRes::CopyFrom(const IMFriendShipSearchRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Friend.IMFriendShipSearchRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFriendShipSearchRes::IsInitialized() const {
  return true;
}

void IMFriendShipSearchRes::InternalSwap(IMFriendShipSearchRes* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  user_list_.InternalSwap(&other->user_list_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attach_data_.Swap(&other->attach_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

std::string IMFriendShipSearchRes::GetTypeName() const {
  return "IM.Friend.IMFriendShipSearchRes";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Friend
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipAddReq* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipAddReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipAddReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipAddRsp* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipAddRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipAddRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipAddNotify* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipAddNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipAddNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipListReq* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipListRsp* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendGetUnAgreeListReq* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendGetUnAgreeListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendGetUnAgreeListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendGetUnAgreeListRsp* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendGetUnAgreeListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendGetUnAgreeListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipUpdateRelationReq* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipUpdateRelationReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipUpdateRelationReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipUpdateRelationRes* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipUpdateRelationRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipUpdateRelationRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipSearchReq* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipSearchReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipSearchReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Friend::IMFriendShipSearchRes* Arena::CreateMaybeMessage< ::IM::Friend::IMFriendShipSearchRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Friend::IMFriendShipSearchRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
