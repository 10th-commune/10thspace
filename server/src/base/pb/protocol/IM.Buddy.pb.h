// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eBuddy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eBuddy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eBuddy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eBuddy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace Buddy {
class IMALLOnlineUserCntReq;
class IMALLOnlineUserCntReqDefaultTypeInternal;
extern IMALLOnlineUserCntReqDefaultTypeInternal _IMALLOnlineUserCntReq_default_instance_;
class IMALLOnlineUserCntRsp;
class IMALLOnlineUserCntRspDefaultTypeInternal;
extern IMALLOnlineUserCntRspDefaultTypeInternal _IMALLOnlineUserCntRsp_default_instance_;
class IMAllUserReq;
class IMAllUserReqDefaultTypeInternal;
extern IMAllUserReqDefaultTypeInternal _IMAllUserReq_default_instance_;
class IMAllUserRsp;
class IMAllUserRspDefaultTypeInternal;
extern IMAllUserRspDefaultTypeInternal _IMAllUserRsp_default_instance_;
class IMAvatarChangedNotify;
class IMAvatarChangedNotifyDefaultTypeInternal;
extern IMAvatarChangedNotifyDefaultTypeInternal _IMAvatarChangedNotify_default_instance_;
class IMChangeAvatarReq;
class IMChangeAvatarReqDefaultTypeInternal;
extern IMChangeAvatarReqDefaultTypeInternal _IMChangeAvatarReq_default_instance_;
class IMChangeAvatarRsp;
class IMChangeAvatarRspDefaultTypeInternal;
extern IMChangeAvatarRspDefaultTypeInternal _IMChangeAvatarRsp_default_instance_;
class IMChangeSignInfoReq;
class IMChangeSignInfoReqDefaultTypeInternal;
extern IMChangeSignInfoReqDefaultTypeInternal _IMChangeSignInfoReq_default_instance_;
class IMChangeSignInfoRsp;
class IMChangeSignInfoRspDefaultTypeInternal;
extern IMChangeSignInfoRspDefaultTypeInternal _IMChangeSignInfoRsp_default_instance_;
class IMDelFollowUserReq;
class IMDelFollowUserReqDefaultTypeInternal;
extern IMDelFollowUserReqDefaultTypeInternal _IMDelFollowUserReq_default_instance_;
class IMDelFollowUserRsp;
class IMDelFollowUserRspDefaultTypeInternal;
extern IMDelFollowUserRspDefaultTypeInternal _IMDelFollowUserRsp_default_instance_;
class IMDelFriendReq;
class IMDelFriendReqDefaultTypeInternal;
extern IMDelFriendReqDefaultTypeInternal _IMDelFriendReq_default_instance_;
class IMDelFriendRsp;
class IMDelFriendRspDefaultTypeInternal;
extern IMDelFriendRspDefaultTypeInternal _IMDelFriendRsp_default_instance_;
class IMDepartmentReq;
class IMDepartmentReqDefaultTypeInternal;
extern IMDepartmentReqDefaultTypeInternal _IMDepartmentReq_default_instance_;
class IMDepartmentRsp;
class IMDepartmentRspDefaultTypeInternal;
extern IMDepartmentRspDefaultTypeInternal _IMDepartmentRsp_default_instance_;
class IMFollowUserReq;
class IMFollowUserReqDefaultTypeInternal;
extern IMFollowUserReqDefaultTypeInternal _IMFollowUserReq_default_instance_;
class IMFollowUserRsp;
class IMFollowUserRspDefaultTypeInternal;
extern IMFollowUserRspDefaultTypeInternal _IMFollowUserRsp_default_instance_;
class IMGetALLOnlineUserReq;
class IMGetALLOnlineUserReqDefaultTypeInternal;
extern IMGetALLOnlineUserReqDefaultTypeInternal _IMGetALLOnlineUserReq_default_instance_;
class IMGetALLOnlineUserRsp;
class IMGetALLOnlineUserRspDefaultTypeInternal;
extern IMGetALLOnlineUserRspDefaultTypeInternal _IMGetALLOnlineUserRsp_default_instance_;
class IMPCLoginStatusNotify;
class IMPCLoginStatusNotifyDefaultTypeInternal;
extern IMPCLoginStatusNotifyDefaultTypeInternal _IMPCLoginStatusNotify_default_instance_;
class IMRecentContactSessionReq;
class IMRecentContactSessionReqDefaultTypeInternal;
extern IMRecentContactSessionReqDefaultTypeInternal _IMRecentContactSessionReq_default_instance_;
class IMRecentContactSessionRsp;
class IMRecentContactSessionRspDefaultTypeInternal;
extern IMRecentContactSessionRspDefaultTypeInternal _IMRecentContactSessionRsp_default_instance_;
class IMRecommendListReq;
class IMRecommendListReqDefaultTypeInternal;
extern IMRecommendListReqDefaultTypeInternal _IMRecommendListReq_default_instance_;
class IMRecommendListRsp;
class IMRecommendListRspDefaultTypeInternal;
extern IMRecommendListRspDefaultTypeInternal _IMRecommendListRsp_default_instance_;
class IMRemoveSessionNotify;
class IMRemoveSessionNotifyDefaultTypeInternal;
extern IMRemoveSessionNotifyDefaultTypeInternal _IMRemoveSessionNotify_default_instance_;
class IMRemoveSessionReq;
class IMRemoveSessionReqDefaultTypeInternal;
extern IMRemoveSessionReqDefaultTypeInternal _IMRemoveSessionReq_default_instance_;
class IMRemoveSessionRsp;
class IMRemoveSessionRspDefaultTypeInternal;
extern IMRemoveSessionRspDefaultTypeInternal _IMRemoveSessionRsp_default_instance_;
class IMSearchUserReq;
class IMSearchUserReqDefaultTypeInternal;
extern IMSearchUserReqDefaultTypeInternal _IMSearchUserReq_default_instance_;
class IMSearchUserRsp;
class IMSearchUserRspDefaultTypeInternal;
extern IMSearchUserRspDefaultTypeInternal _IMSearchUserRsp_default_instance_;
class IMSignInfoChangedNotify;
class IMSignInfoChangedNotifyDefaultTypeInternal;
extern IMSignInfoChangedNotifyDefaultTypeInternal _IMSignInfoChangedNotify_default_instance_;
class IMUpdateUsersInfoReq;
class IMUpdateUsersInfoReqDefaultTypeInternal;
extern IMUpdateUsersInfoReqDefaultTypeInternal _IMUpdateUsersInfoReq_default_instance_;
class IMUpdateUsersInfoRsp;
class IMUpdateUsersInfoRspDefaultTypeInternal;
extern IMUpdateUsersInfoRspDefaultTypeInternal _IMUpdateUsersInfoRsp_default_instance_;
class IMUserStatNotify;
class IMUserStatNotifyDefaultTypeInternal;
extern IMUserStatNotifyDefaultTypeInternal _IMUserStatNotify_default_instance_;
class IMUsersInfoReq;
class IMUsersInfoReqDefaultTypeInternal;
extern IMUsersInfoReqDefaultTypeInternal _IMUsersInfoReq_default_instance_;
class IMUsersInfoRsp;
class IMUsersInfoRspDefaultTypeInternal;
extern IMUsersInfoRspDefaultTypeInternal _IMUsersInfoRsp_default_instance_;
class IMUsersStatReq;
class IMUsersStatReqDefaultTypeInternal;
extern IMUsersStatReqDefaultTypeInternal _IMUsersStatReq_default_instance_;
class IMUsersStatRsp;
class IMUsersStatRspDefaultTypeInternal;
extern IMUsersStatRspDefaultTypeInternal _IMUsersStatRsp_default_instance_;
}  // namespace Buddy
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Buddy::IMALLOnlineUserCntReq* Arena::CreateMaybeMessage<::IM::Buddy::IMALLOnlineUserCntReq>(Arena*);
template<> ::IM::Buddy::IMALLOnlineUserCntRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMALLOnlineUserCntRsp>(Arena*);
template<> ::IM::Buddy::IMAllUserReq* Arena::CreateMaybeMessage<::IM::Buddy::IMAllUserReq>(Arena*);
template<> ::IM::Buddy::IMAllUserRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMAllUserRsp>(Arena*);
template<> ::IM::Buddy::IMAvatarChangedNotify* Arena::CreateMaybeMessage<::IM::Buddy::IMAvatarChangedNotify>(Arena*);
template<> ::IM::Buddy::IMChangeAvatarReq* Arena::CreateMaybeMessage<::IM::Buddy::IMChangeAvatarReq>(Arena*);
template<> ::IM::Buddy::IMChangeAvatarRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMChangeAvatarRsp>(Arena*);
template<> ::IM::Buddy::IMChangeSignInfoReq* Arena::CreateMaybeMessage<::IM::Buddy::IMChangeSignInfoReq>(Arena*);
template<> ::IM::Buddy::IMChangeSignInfoRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMChangeSignInfoRsp>(Arena*);
template<> ::IM::Buddy::IMDelFollowUserReq* Arena::CreateMaybeMessage<::IM::Buddy::IMDelFollowUserReq>(Arena*);
template<> ::IM::Buddy::IMDelFollowUserRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMDelFollowUserRsp>(Arena*);
template<> ::IM::Buddy::IMDelFriendReq* Arena::CreateMaybeMessage<::IM::Buddy::IMDelFriendReq>(Arena*);
template<> ::IM::Buddy::IMDelFriendRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMDelFriendRsp>(Arena*);
template<> ::IM::Buddy::IMDepartmentReq* Arena::CreateMaybeMessage<::IM::Buddy::IMDepartmentReq>(Arena*);
template<> ::IM::Buddy::IMDepartmentRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMDepartmentRsp>(Arena*);
template<> ::IM::Buddy::IMFollowUserReq* Arena::CreateMaybeMessage<::IM::Buddy::IMFollowUserReq>(Arena*);
template<> ::IM::Buddy::IMFollowUserRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMFollowUserRsp>(Arena*);
template<> ::IM::Buddy::IMGetALLOnlineUserReq* Arena::CreateMaybeMessage<::IM::Buddy::IMGetALLOnlineUserReq>(Arena*);
template<> ::IM::Buddy::IMGetALLOnlineUserRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMGetALLOnlineUserRsp>(Arena*);
template<> ::IM::Buddy::IMPCLoginStatusNotify* Arena::CreateMaybeMessage<::IM::Buddy::IMPCLoginStatusNotify>(Arena*);
template<> ::IM::Buddy::IMRecentContactSessionReq* Arena::CreateMaybeMessage<::IM::Buddy::IMRecentContactSessionReq>(Arena*);
template<> ::IM::Buddy::IMRecentContactSessionRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMRecentContactSessionRsp>(Arena*);
template<> ::IM::Buddy::IMRecommendListReq* Arena::CreateMaybeMessage<::IM::Buddy::IMRecommendListReq>(Arena*);
template<> ::IM::Buddy::IMRecommendListRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMRecommendListRsp>(Arena*);
template<> ::IM::Buddy::IMRemoveSessionNotify* Arena::CreateMaybeMessage<::IM::Buddy::IMRemoveSessionNotify>(Arena*);
template<> ::IM::Buddy::IMRemoveSessionReq* Arena::CreateMaybeMessage<::IM::Buddy::IMRemoveSessionReq>(Arena*);
template<> ::IM::Buddy::IMRemoveSessionRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMRemoveSessionRsp>(Arena*);
template<> ::IM::Buddy::IMSearchUserReq* Arena::CreateMaybeMessage<::IM::Buddy::IMSearchUserReq>(Arena*);
template<> ::IM::Buddy::IMSearchUserRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMSearchUserRsp>(Arena*);
template<> ::IM::Buddy::IMSignInfoChangedNotify* Arena::CreateMaybeMessage<::IM::Buddy::IMSignInfoChangedNotify>(Arena*);
template<> ::IM::Buddy::IMUpdateUsersInfoReq* Arena::CreateMaybeMessage<::IM::Buddy::IMUpdateUsersInfoReq>(Arena*);
template<> ::IM::Buddy::IMUpdateUsersInfoRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMUpdateUsersInfoRsp>(Arena*);
template<> ::IM::Buddy::IMUserStatNotify* Arena::CreateMaybeMessage<::IM::Buddy::IMUserStatNotify>(Arena*);
template<> ::IM::Buddy::IMUsersInfoReq* Arena::CreateMaybeMessage<::IM::Buddy::IMUsersInfoReq>(Arena*);
template<> ::IM::Buddy::IMUsersInfoRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMUsersInfoRsp>(Arena*);
template<> ::IM::Buddy::IMUsersStatReq* Arena::CreateMaybeMessage<::IM::Buddy::IMUsersStatReq>(Arena*);
template<> ::IM::Buddy::IMUsersStatRsp* Arena::CreateMaybeMessage<::IM::Buddy::IMUsersStatRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Buddy {

enum StudyState : int {
  PB3_UNUSE30 = 0,
  start = 17,
  end = 18,
  StudyState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StudyState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StudyState_IsValid(int value);
constexpr StudyState StudyState_MIN = PB3_UNUSE30;
constexpr StudyState StudyState_MAX = end;
constexpr int StudyState_ARRAYSIZE = StudyState_MAX + 1;

const std::string& StudyState_Name(StudyState value);
template<typename T>
inline const std::string& StudyState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StudyState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StudyState_Name.");
  return StudyState_Name(static_cast<StudyState>(enum_t_value));
}
bool StudyState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StudyState* value);
// ===================================================================

class IMRecentContactSessionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMRecentContactSessionReq) */ {
 public:
  inline IMRecentContactSessionReq() : IMRecentContactSessionReq(nullptr) {};
  virtual ~IMRecentContactSessionReq();

  IMRecentContactSessionReq(const IMRecentContactSessionReq& from);
  IMRecentContactSessionReq(IMRecentContactSessionReq&& from) noexcept
    : IMRecentContactSessionReq() {
    *this = ::std::move(from);
  }

  inline IMRecentContactSessionReq& operator=(const IMRecentContactSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMRecentContactSessionReq& operator=(IMRecentContactSessionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMRecentContactSessionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRecentContactSessionReq* internal_default_instance() {
    return reinterpret_cast<const IMRecentContactSessionReq*>(
               &_IMRecentContactSessionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMRecentContactSessionReq& a, IMRecentContactSessionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMRecentContactSessionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMRecentContactSessionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMRecentContactSessionReq* New() const final {
    return CreateMaybeMessage<IMRecentContactSessionReq>(nullptr);
  }

  IMRecentContactSessionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMRecentContactSessionReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMRecentContactSessionReq& from);
  void MergeFrom(const IMRecentContactSessionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRecentContactSessionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMRecentContactSessionReq";
  }
  protected:
  explicit IMRecentContactSessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kLatestUpdateTimeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 latest_update_time = 2;
  void clear_latest_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time() const;
  void set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_update_time() const;
  void _internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRecentContactSessionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMRecentContactSessionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMRecentContactSessionRsp) */ {
 public:
  inline IMRecentContactSessionRsp() : IMRecentContactSessionRsp(nullptr) {};
  virtual ~IMRecentContactSessionRsp();

  IMRecentContactSessionRsp(const IMRecentContactSessionRsp& from);
  IMRecentContactSessionRsp(IMRecentContactSessionRsp&& from) noexcept
    : IMRecentContactSessionRsp() {
    *this = ::std::move(from);
  }

  inline IMRecentContactSessionRsp& operator=(const IMRecentContactSessionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMRecentContactSessionRsp& operator=(IMRecentContactSessionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMRecentContactSessionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRecentContactSessionRsp* internal_default_instance() {
    return reinterpret_cast<const IMRecentContactSessionRsp*>(
               &_IMRecentContactSessionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMRecentContactSessionRsp& a, IMRecentContactSessionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMRecentContactSessionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMRecentContactSessionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMRecentContactSessionRsp* New() const final {
    return CreateMaybeMessage<IMRecentContactSessionRsp>(nullptr);
  }

  IMRecentContactSessionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMRecentContactSessionRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMRecentContactSessionRsp& from);
  void MergeFrom(const IMRecentContactSessionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRecentContactSessionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMRecentContactSessionRsp";
  }
  protected:
  explicit IMRecentContactSessionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactSessionListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
  int contact_session_list_size() const;
  private:
  int _internal_contact_session_list_size() const;
  public:
  void clear_contact_session_list();
  ::IM::BaseDefine::ContactSessionInfo* mutable_contact_session_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >*
      mutable_contact_session_list();
  private:
  const ::IM::BaseDefine::ContactSessionInfo& _internal_contact_session_list(int index) const;
  ::IM::BaseDefine::ContactSessionInfo* _internal_add_contact_session_list();
  public:
  const ::IM::BaseDefine::ContactSessionInfo& contact_session_list(int index) const;
  ::IM::BaseDefine::ContactSessionInfo* add_contact_session_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >&
      contact_session_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRecentContactSessionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo > contact_session_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMUserStatNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMUserStatNotify) */ {
 public:
  inline IMUserStatNotify() : IMUserStatNotify(nullptr) {};
  virtual ~IMUserStatNotify();

  IMUserStatNotify(const IMUserStatNotify& from);
  IMUserStatNotify(IMUserStatNotify&& from) noexcept
    : IMUserStatNotify() {
    *this = ::std::move(from);
  }

  inline IMUserStatNotify& operator=(const IMUserStatNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUserStatNotify& operator=(IMUserStatNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMUserStatNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUserStatNotify* internal_default_instance() {
    return reinterpret_cast<const IMUserStatNotify*>(
               &_IMUserStatNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMUserStatNotify& a, IMUserStatNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUserStatNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUserStatNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUserStatNotify* New() const final {
    return CreateMaybeMessage<IMUserStatNotify>(nullptr);
  }

  IMUserStatNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUserStatNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMUserStatNotify& from);
  void MergeFrom(const IMUserStatNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMUserStatNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMUserStatNotify";
  }
  protected:
  explicit IMUserStatNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatFieldNumber = 1,
  };
  // .IM.BaseDefine.UserStat user_stat = 1;
  bool has_user_stat() const;
  private:
  bool _internal_has_user_stat() const;
  public:
  void clear_user_stat();
  const ::IM::BaseDefine::UserStat& user_stat() const;
  ::IM::BaseDefine::UserStat* release_user_stat();
  ::IM::BaseDefine::UserStat* mutable_user_stat();
  void set_allocated_user_stat(::IM::BaseDefine::UserStat* user_stat);
  private:
  const ::IM::BaseDefine::UserStat& _internal_user_stat() const;
  ::IM::BaseDefine::UserStat* _internal_mutable_user_stat();
  public:
  void unsafe_arena_set_allocated_user_stat(
      ::IM::BaseDefine::UserStat* user_stat);
  ::IM::BaseDefine::UserStat* unsafe_arena_release_user_stat();

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUserStatNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IM::BaseDefine::UserStat* user_stat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMUsersInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMUsersInfoReq) */ {
 public:
  inline IMUsersInfoReq() : IMUsersInfoReq(nullptr) {};
  virtual ~IMUsersInfoReq();

  IMUsersInfoReq(const IMUsersInfoReq& from);
  IMUsersInfoReq(IMUsersInfoReq&& from) noexcept
    : IMUsersInfoReq() {
    *this = ::std::move(from);
  }

  inline IMUsersInfoReq& operator=(const IMUsersInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUsersInfoReq& operator=(IMUsersInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMUsersInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUsersInfoReq* internal_default_instance() {
    return reinterpret_cast<const IMUsersInfoReq*>(
               &_IMUsersInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMUsersInfoReq& a, IMUsersInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUsersInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUsersInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUsersInfoReq* New() const final {
    return CreateMaybeMessage<IMUsersInfoReq>(nullptr);
  }

  IMUsersInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUsersInfoReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMUsersInfoReq& from);
  void MergeFrom(const IMUsersInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMUsersInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMUsersInfoReq";
  }
  protected:
  explicit IMUsersInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated string user_id_list = 2;
  int user_id_list_size() const;
  private:
  int _internal_user_id_list_size() const;
  public:
  void clear_user_id_list();
  const std::string& user_id_list(int index) const;
  std::string* mutable_user_id_list(int index);
  void set_user_id_list(int index, const std::string& value);
  void set_user_id_list(int index, std::string&& value);
  void set_user_id_list(int index, const char* value);
  void set_user_id_list(int index, const char* value, size_t size);
  std::string* add_user_id_list();
  void add_user_id_list(const std::string& value);
  void add_user_id_list(std::string&& value);
  void add_user_id_list(const char* value);
  void add_user_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_id_list();
  private:
  const std::string& _internal_user_id_list(int index) const;
  std::string* _internal_add_user_id_list();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUsersInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMUsersInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMUsersInfoRsp) */ {
 public:
  inline IMUsersInfoRsp() : IMUsersInfoRsp(nullptr) {};
  virtual ~IMUsersInfoRsp();

  IMUsersInfoRsp(const IMUsersInfoRsp& from);
  IMUsersInfoRsp(IMUsersInfoRsp&& from) noexcept
    : IMUsersInfoRsp() {
    *this = ::std::move(from);
  }

  inline IMUsersInfoRsp& operator=(const IMUsersInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUsersInfoRsp& operator=(IMUsersInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMUsersInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUsersInfoRsp* internal_default_instance() {
    return reinterpret_cast<const IMUsersInfoRsp*>(
               &_IMUsersInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMUsersInfoRsp& a, IMUsersInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUsersInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUsersInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUsersInfoRsp* New() const final {
    return CreateMaybeMessage<IMUsersInfoRsp>(nullptr);
  }

  IMUsersInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUsersInfoRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMUsersInfoRsp& from);
  void MergeFrom(const IMUsersInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMUsersInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMUsersInfoRsp";
  }
  protected:
  explicit IMUsersInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.UserInfo user_info_list = 2;
  int user_info_list_size() const;
  private:
  int _internal_user_info_list_size() const;
  public:
  void clear_user_info_list();
  ::IM::BaseDefine::UserInfo* mutable_user_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_info_list();
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_info_list(int index) const;
  ::IM::BaseDefine::UserInfo* _internal_add_user_info_list();
  public:
  const ::IM::BaseDefine::UserInfo& user_info_list(int index) const;
  ::IM::BaseDefine::UserInfo* add_user_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_info_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUsersInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMRemoveSessionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMRemoveSessionReq) */ {
 public:
  inline IMRemoveSessionReq() : IMRemoveSessionReq(nullptr) {};
  virtual ~IMRemoveSessionReq();

  IMRemoveSessionReq(const IMRemoveSessionReq& from);
  IMRemoveSessionReq(IMRemoveSessionReq&& from) noexcept
    : IMRemoveSessionReq() {
    *this = ::std::move(from);
  }

  inline IMRemoveSessionReq& operator=(const IMRemoveSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMRemoveSessionReq& operator=(IMRemoveSessionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMRemoveSessionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRemoveSessionReq* internal_default_instance() {
    return reinterpret_cast<const IMRemoveSessionReq*>(
               &_IMRemoveSessionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IMRemoveSessionReq& a, IMRemoveSessionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMRemoveSessionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMRemoveSessionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMRemoveSessionReq* New() const final {
    return CreateMaybeMessage<IMRemoveSessionReq>(nullptr);
  }

  IMRemoveSessionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMRemoveSessionReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMRemoveSessionReq& from);
  void MergeFrom(const IMRemoveSessionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRemoveSessionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMRemoveSessionReq";
  }
  protected:
  explicit IMRemoveSessionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kSessionTypeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRemoveSessionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMRemoveSessionRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMRemoveSessionRsp) */ {
 public:
  inline IMRemoveSessionRsp() : IMRemoveSessionRsp(nullptr) {};
  virtual ~IMRemoveSessionRsp();

  IMRemoveSessionRsp(const IMRemoveSessionRsp& from);
  IMRemoveSessionRsp(IMRemoveSessionRsp&& from) noexcept
    : IMRemoveSessionRsp() {
    *this = ::std::move(from);
  }

  inline IMRemoveSessionRsp& operator=(const IMRemoveSessionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMRemoveSessionRsp& operator=(IMRemoveSessionRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMRemoveSessionRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRemoveSessionRsp* internal_default_instance() {
    return reinterpret_cast<const IMRemoveSessionRsp*>(
               &_IMRemoveSessionRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMRemoveSessionRsp& a, IMRemoveSessionRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMRemoveSessionRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMRemoveSessionRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMRemoveSessionRsp* New() const final {
    return CreateMaybeMessage<IMRemoveSessionRsp>(nullptr);
  }

  IMRemoveSessionRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMRemoveSessionRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMRemoveSessionRsp& from);
  void MergeFrom(const IMRemoveSessionRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRemoveSessionRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMRemoveSessionRsp";
  }
  protected:
  explicit IMRemoveSessionRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kResultCodeFieldNumber = 2,
    kSessionTypeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 4;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.SessionType session_type = 3;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRemoveSessionRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMAllUserReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMAllUserReq) */ {
 public:
  inline IMAllUserReq() : IMAllUserReq(nullptr) {};
  virtual ~IMAllUserReq();

  IMAllUserReq(const IMAllUserReq& from);
  IMAllUserReq(IMAllUserReq&& from) noexcept
    : IMAllUserReq() {
    *this = ::std::move(from);
  }

  inline IMAllUserReq& operator=(const IMAllUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMAllUserReq& operator=(IMAllUserReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMAllUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMAllUserReq* internal_default_instance() {
    return reinterpret_cast<const IMAllUserReq*>(
               &_IMAllUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IMAllUserReq& a, IMAllUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMAllUserReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMAllUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMAllUserReq* New() const final {
    return CreateMaybeMessage<IMAllUserReq>(nullptr);
  }

  IMAllUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMAllUserReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMAllUserReq& from);
  void MergeFrom(const IMAllUserReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMAllUserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMAllUserReq";
  }
  protected:
  explicit IMAllUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kLatestUpdateTimeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 latest_update_time = 2;
  void clear_latest_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time() const;
  void set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_update_time() const;
  void _internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAllUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMAllUserRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMAllUserRsp) */ {
 public:
  inline IMAllUserRsp() : IMAllUserRsp(nullptr) {};
  virtual ~IMAllUserRsp();

  IMAllUserRsp(const IMAllUserRsp& from);
  IMAllUserRsp(IMAllUserRsp&& from) noexcept
    : IMAllUserRsp() {
    *this = ::std::move(from);
  }

  inline IMAllUserRsp& operator=(const IMAllUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMAllUserRsp& operator=(IMAllUserRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMAllUserRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMAllUserRsp* internal_default_instance() {
    return reinterpret_cast<const IMAllUserRsp*>(
               &_IMAllUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IMAllUserRsp& a, IMAllUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMAllUserRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMAllUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMAllUserRsp* New() const final {
    return CreateMaybeMessage<IMAllUserRsp>(nullptr);
  }

  IMAllUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMAllUserRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMAllUserRsp& from);
  void MergeFrom(const IMAllUserRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMAllUserRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMAllUserRsp";
  }
  protected:
  explicit IMAllUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserListFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kLatestUpdateTimeFieldNumber = 2,
  };
  // repeated .IM.BaseDefine.UserInfo user_list = 3;
  int user_list_size() const;
  private:
  int _internal_user_list_size() const;
  public:
  void clear_user_list();
  ::IM::BaseDefine::UserInfo* mutable_user_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_list();
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_list(int index) const;
  ::IM::BaseDefine::UserInfo* _internal_add_user_list();
  public:
  const ::IM::BaseDefine::UserInfo& user_list(int index) const;
  ::IM::BaseDefine::UserInfo* add_user_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 latest_update_time = 2;
  void clear_latest_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time() const;
  void set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_update_time() const;
  void _internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAllUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMUsersStatReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMUsersStatReq) */ {
 public:
  inline IMUsersStatReq() : IMUsersStatReq(nullptr) {};
  virtual ~IMUsersStatReq();

  IMUsersStatReq(const IMUsersStatReq& from);
  IMUsersStatReq(IMUsersStatReq&& from) noexcept
    : IMUsersStatReq() {
    *this = ::std::move(from);
  }

  inline IMUsersStatReq& operator=(const IMUsersStatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUsersStatReq& operator=(IMUsersStatReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMUsersStatReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUsersStatReq* internal_default_instance() {
    return reinterpret_cast<const IMUsersStatReq*>(
               &_IMUsersStatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IMUsersStatReq& a, IMUsersStatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUsersStatReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUsersStatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUsersStatReq* New() const final {
    return CreateMaybeMessage<IMUsersStatReq>(nullptr);
  }

  IMUsersStatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUsersStatReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMUsersStatReq& from);
  void MergeFrom(const IMUsersStatReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMUsersStatReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMUsersStatReq";
  }
  protected:
  explicit IMUsersStatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated string user_id_list = 2;
  int user_id_list_size() const;
  private:
  int _internal_user_id_list_size() const;
  public:
  void clear_user_id_list();
  const std::string& user_id_list(int index) const;
  std::string* mutable_user_id_list(int index);
  void set_user_id_list(int index, const std::string& value);
  void set_user_id_list(int index, std::string&& value);
  void set_user_id_list(int index, const char* value);
  void set_user_id_list(int index, const char* value, size_t size);
  std::string* add_user_id_list();
  void add_user_id_list(const std::string& value);
  void add_user_id_list(std::string&& value);
  void add_user_id_list(const char* value);
  void add_user_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_id_list();
  private:
  const std::string& _internal_user_id_list(int index) const;
  std::string* _internal_add_user_id_list();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUsersStatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMUsersStatRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMUsersStatRsp) */ {
 public:
  inline IMUsersStatRsp() : IMUsersStatRsp(nullptr) {};
  virtual ~IMUsersStatRsp();

  IMUsersStatRsp(const IMUsersStatRsp& from);
  IMUsersStatRsp(IMUsersStatRsp&& from) noexcept
    : IMUsersStatRsp() {
    *this = ::std::move(from);
  }

  inline IMUsersStatRsp& operator=(const IMUsersStatRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUsersStatRsp& operator=(IMUsersStatRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMUsersStatRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUsersStatRsp* internal_default_instance() {
    return reinterpret_cast<const IMUsersStatRsp*>(
               &_IMUsersStatRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IMUsersStatRsp& a, IMUsersStatRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUsersStatRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUsersStatRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUsersStatRsp* New() const final {
    return CreateMaybeMessage<IMUsersStatRsp>(nullptr);
  }

  IMUsersStatRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUsersStatRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMUsersStatRsp& from);
  void MergeFrom(const IMUsersStatRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMUsersStatRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMUsersStatRsp";
  }
  protected:
  explicit IMUsersStatRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.UserStat user_stat_list = 2;
  int user_stat_list_size() const;
  private:
  int _internal_user_stat_list_size() const;
  public:
  void clear_user_stat_list();
  ::IM::BaseDefine::UserStat* mutable_user_stat_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserStat >*
      mutable_user_stat_list();
  private:
  const ::IM::BaseDefine::UserStat& _internal_user_stat_list(int index) const;
  ::IM::BaseDefine::UserStat* _internal_add_user_stat_list();
  public:
  const ::IM::BaseDefine::UserStat& user_stat_list(int index) const;
  ::IM::BaseDefine::UserStat* add_user_stat_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserStat >&
      user_stat_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUsersStatRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserStat > user_stat_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMChangeAvatarReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMChangeAvatarReq) */ {
 public:
  inline IMChangeAvatarReq() : IMChangeAvatarReq(nullptr) {};
  virtual ~IMChangeAvatarReq();

  IMChangeAvatarReq(const IMChangeAvatarReq& from);
  IMChangeAvatarReq(IMChangeAvatarReq&& from) noexcept
    : IMChangeAvatarReq() {
    *this = ::std::move(from);
  }

  inline IMChangeAvatarReq& operator=(const IMChangeAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMChangeAvatarReq& operator=(IMChangeAvatarReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMChangeAvatarReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMChangeAvatarReq* internal_default_instance() {
    return reinterpret_cast<const IMChangeAvatarReq*>(
               &_IMChangeAvatarReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IMChangeAvatarReq& a, IMChangeAvatarReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMChangeAvatarReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMChangeAvatarReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMChangeAvatarReq* New() const final {
    return CreateMaybeMessage<IMChangeAvatarReq>(nullptr);
  }

  IMChangeAvatarReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMChangeAvatarReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMChangeAvatarReq& from);
  void MergeFrom(const IMChangeAvatarReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMChangeAvatarReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMChangeAvatarReq";
  }
  protected:
  explicit IMChangeAvatarReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAvatarUrlFieldNumber = 2,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string avatar_url = 2;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeAvatarReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMChangeAvatarRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMChangeAvatarRsp) */ {
 public:
  inline IMChangeAvatarRsp() : IMChangeAvatarRsp(nullptr) {};
  virtual ~IMChangeAvatarRsp();

  IMChangeAvatarRsp(const IMChangeAvatarRsp& from);
  IMChangeAvatarRsp(IMChangeAvatarRsp&& from) noexcept
    : IMChangeAvatarRsp() {
    *this = ::std::move(from);
  }

  inline IMChangeAvatarRsp& operator=(const IMChangeAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMChangeAvatarRsp& operator=(IMChangeAvatarRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMChangeAvatarRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMChangeAvatarRsp* internal_default_instance() {
    return reinterpret_cast<const IMChangeAvatarRsp*>(
               &_IMChangeAvatarRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IMChangeAvatarRsp& a, IMChangeAvatarRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMChangeAvatarRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMChangeAvatarRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMChangeAvatarRsp* New() const final {
    return CreateMaybeMessage<IMChangeAvatarRsp>(nullptr);
  }

  IMChangeAvatarRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMChangeAvatarRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMChangeAvatarRsp& from);
  void MergeFrom(const IMChangeAvatarRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMChangeAvatarRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMChangeAvatarRsp";
  }
  protected:
  explicit IMChangeAvatarRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kResultCodeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeAvatarRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMPCLoginStatusNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMPCLoginStatusNotify) */ {
 public:
  inline IMPCLoginStatusNotify() : IMPCLoginStatusNotify(nullptr) {};
  virtual ~IMPCLoginStatusNotify();

  IMPCLoginStatusNotify(const IMPCLoginStatusNotify& from);
  IMPCLoginStatusNotify(IMPCLoginStatusNotify&& from) noexcept
    : IMPCLoginStatusNotify() {
    *this = ::std::move(from);
  }

  inline IMPCLoginStatusNotify& operator=(const IMPCLoginStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMPCLoginStatusNotify& operator=(IMPCLoginStatusNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMPCLoginStatusNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMPCLoginStatusNotify* internal_default_instance() {
    return reinterpret_cast<const IMPCLoginStatusNotify*>(
               &_IMPCLoginStatusNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IMPCLoginStatusNotify& a, IMPCLoginStatusNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMPCLoginStatusNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMPCLoginStatusNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMPCLoginStatusNotify* New() const final {
    return CreateMaybeMessage<IMPCLoginStatusNotify>(nullptr);
  }

  IMPCLoginStatusNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMPCLoginStatusNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMPCLoginStatusNotify& from);
  void MergeFrom(const IMPCLoginStatusNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMPCLoginStatusNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMPCLoginStatusNotify";
  }
  protected:
  explicit IMPCLoginStatusNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLoginStatFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .IM.BaseDefine.UserStatType login_stat = 2;
  void clear_login_stat();
  ::IM::BaseDefine::UserStatType login_stat() const;
  void set_login_stat(::IM::BaseDefine::UserStatType value);
  private:
  ::IM::BaseDefine::UserStatType _internal_login_stat() const;
  void _internal_set_login_stat(::IM::BaseDefine::UserStatType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMPCLoginStatusNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  int login_stat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMRemoveSessionNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMRemoveSessionNotify) */ {
 public:
  inline IMRemoveSessionNotify() : IMRemoveSessionNotify(nullptr) {};
  virtual ~IMRemoveSessionNotify();

  IMRemoveSessionNotify(const IMRemoveSessionNotify& from);
  IMRemoveSessionNotify(IMRemoveSessionNotify&& from) noexcept
    : IMRemoveSessionNotify() {
    *this = ::std::move(from);
  }

  inline IMRemoveSessionNotify& operator=(const IMRemoveSessionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMRemoveSessionNotify& operator=(IMRemoveSessionNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMRemoveSessionNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRemoveSessionNotify* internal_default_instance() {
    return reinterpret_cast<const IMRemoveSessionNotify*>(
               &_IMRemoveSessionNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(IMRemoveSessionNotify& a, IMRemoveSessionNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMRemoveSessionNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMRemoveSessionNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMRemoveSessionNotify* New() const final {
    return CreateMaybeMessage<IMRemoveSessionNotify>(nullptr);
  }

  IMRemoveSessionNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMRemoveSessionNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMRemoveSessionNotify& from);
  void MergeFrom(const IMRemoveSessionNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRemoveSessionNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMRemoveSessionNotify";
  }
  protected:
  explicit IMRemoveSessionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 3,
    kSessionTypeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRemoveSessionNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  int session_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMDepartmentReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMDepartmentReq) */ {
 public:
  inline IMDepartmentReq() : IMDepartmentReq(nullptr) {};
  virtual ~IMDepartmentReq();

  IMDepartmentReq(const IMDepartmentReq& from);
  IMDepartmentReq(IMDepartmentReq&& from) noexcept
    : IMDepartmentReq() {
    *this = ::std::move(from);
  }

  inline IMDepartmentReq& operator=(const IMDepartmentReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMDepartmentReq& operator=(IMDepartmentReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMDepartmentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMDepartmentReq* internal_default_instance() {
    return reinterpret_cast<const IMDepartmentReq*>(
               &_IMDepartmentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(IMDepartmentReq& a, IMDepartmentReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMDepartmentReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMDepartmentReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMDepartmentReq* New() const final {
    return CreateMaybeMessage<IMDepartmentReq>(nullptr);
  }

  IMDepartmentReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMDepartmentReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMDepartmentReq& from);
  void MergeFrom(const IMDepartmentReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMDepartmentReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMDepartmentReq";
  }
  protected:
  explicit IMDepartmentReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kLatestUpdateTimeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 latest_update_time = 2;
  void clear_latest_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time() const;
  void set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_update_time() const;
  void _internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDepartmentReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMDepartmentRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMDepartmentRsp) */ {
 public:
  inline IMDepartmentRsp() : IMDepartmentRsp(nullptr) {};
  virtual ~IMDepartmentRsp();

  IMDepartmentRsp(const IMDepartmentRsp& from);
  IMDepartmentRsp(IMDepartmentRsp&& from) noexcept
    : IMDepartmentRsp() {
    *this = ::std::move(from);
  }

  inline IMDepartmentRsp& operator=(const IMDepartmentRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMDepartmentRsp& operator=(IMDepartmentRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMDepartmentRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMDepartmentRsp* internal_default_instance() {
    return reinterpret_cast<const IMDepartmentRsp*>(
               &_IMDepartmentRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IMDepartmentRsp& a, IMDepartmentRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMDepartmentRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMDepartmentRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMDepartmentRsp* New() const final {
    return CreateMaybeMessage<IMDepartmentRsp>(nullptr);
  }

  IMDepartmentRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMDepartmentRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMDepartmentRsp& from);
  void MergeFrom(const IMDepartmentRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMDepartmentRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMDepartmentRsp";
  }
  protected:
  explicit IMDepartmentRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeptListFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kLatestUpdateTimeFieldNumber = 2,
  };
  // repeated .IM.BaseDefine.DepartInfo dept_list = 3;
  int dept_list_size() const;
  private:
  int _internal_dept_list_size() const;
  public:
  void clear_dept_list();
  ::IM::BaseDefine::DepartInfo* mutable_dept_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >*
      mutable_dept_list();
  private:
  const ::IM::BaseDefine::DepartInfo& _internal_dept_list(int index) const;
  ::IM::BaseDefine::DepartInfo* _internal_add_dept_list();
  public:
  const ::IM::BaseDefine::DepartInfo& dept_list(int index) const;
  ::IM::BaseDefine::DepartInfo* add_dept_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >&
      dept_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 latest_update_time = 2;
  void clear_latest_update_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time() const;
  void set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_update_time() const;
  void _internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDepartmentRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::DepartInfo > dept_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_update_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMAvatarChangedNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMAvatarChangedNotify) */ {
 public:
  inline IMAvatarChangedNotify() : IMAvatarChangedNotify(nullptr) {};
  virtual ~IMAvatarChangedNotify();

  IMAvatarChangedNotify(const IMAvatarChangedNotify& from);
  IMAvatarChangedNotify(IMAvatarChangedNotify&& from) noexcept
    : IMAvatarChangedNotify() {
    *this = ::std::move(from);
  }

  inline IMAvatarChangedNotify& operator=(const IMAvatarChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMAvatarChangedNotify& operator=(IMAvatarChangedNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMAvatarChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMAvatarChangedNotify* internal_default_instance() {
    return reinterpret_cast<const IMAvatarChangedNotify*>(
               &_IMAvatarChangedNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IMAvatarChangedNotify& a, IMAvatarChangedNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMAvatarChangedNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMAvatarChangedNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMAvatarChangedNotify* New() const final {
    return CreateMaybeMessage<IMAvatarChangedNotify>(nullptr);
  }

  IMAvatarChangedNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMAvatarChangedNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMAvatarChangedNotify& from);
  void MergeFrom(const IMAvatarChangedNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMAvatarChangedNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMAvatarChangedNotify";
  }
  protected:
  explicit IMAvatarChangedNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvatarUrlFieldNumber = 2,
    kChangedUserIdFieldNumber = 1,
  };
  // string avatar_url = 2;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // uint32 changed_user_id = 1;
  void clear_changed_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 changed_user_id() const;
  void set_changed_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_changed_user_id() const;
  void _internal_set_changed_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMAvatarChangedNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 changed_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMChangeSignInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMChangeSignInfoReq) */ {
 public:
  inline IMChangeSignInfoReq() : IMChangeSignInfoReq(nullptr) {};
  virtual ~IMChangeSignInfoReq();

  IMChangeSignInfoReq(const IMChangeSignInfoReq& from);
  IMChangeSignInfoReq(IMChangeSignInfoReq&& from) noexcept
    : IMChangeSignInfoReq() {
    *this = ::std::move(from);
  }

  inline IMChangeSignInfoReq& operator=(const IMChangeSignInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMChangeSignInfoReq& operator=(IMChangeSignInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMChangeSignInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMChangeSignInfoReq* internal_default_instance() {
    return reinterpret_cast<const IMChangeSignInfoReq*>(
               &_IMChangeSignInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(IMChangeSignInfoReq& a, IMChangeSignInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMChangeSignInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMChangeSignInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMChangeSignInfoReq* New() const final {
    return CreateMaybeMessage<IMChangeSignInfoReq>(nullptr);
  }

  IMChangeSignInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMChangeSignInfoReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMChangeSignInfoReq& from);
  void MergeFrom(const IMChangeSignInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMChangeSignInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMChangeSignInfoReq";
  }
  protected:
  explicit IMChangeSignInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSignInfoFieldNumber = 2,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string sign_info = 2;
  void clear_sign_info();
  const std::string& sign_info() const;
  void set_sign_info(const std::string& value);
  void set_sign_info(std::string&& value);
  void set_sign_info(const char* value);
  void set_sign_info(const char* value, size_t size);
  std::string* mutable_sign_info();
  std::string* release_sign_info();
  void set_allocated_sign_info(std::string* sign_info);
  private:
  const std::string& _internal_sign_info() const;
  void _internal_set_sign_info(const std::string& value);
  std::string* _internal_mutable_sign_info();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeSignInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMChangeSignInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMChangeSignInfoRsp) */ {
 public:
  inline IMChangeSignInfoRsp() : IMChangeSignInfoRsp(nullptr) {};
  virtual ~IMChangeSignInfoRsp();

  IMChangeSignInfoRsp(const IMChangeSignInfoRsp& from);
  IMChangeSignInfoRsp(IMChangeSignInfoRsp&& from) noexcept
    : IMChangeSignInfoRsp() {
    *this = ::std::move(from);
  }

  inline IMChangeSignInfoRsp& operator=(const IMChangeSignInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMChangeSignInfoRsp& operator=(IMChangeSignInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMChangeSignInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMChangeSignInfoRsp* internal_default_instance() {
    return reinterpret_cast<const IMChangeSignInfoRsp*>(
               &_IMChangeSignInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(IMChangeSignInfoRsp& a, IMChangeSignInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMChangeSignInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMChangeSignInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMChangeSignInfoRsp* New() const final {
    return CreateMaybeMessage<IMChangeSignInfoRsp>(nullptr);
  }

  IMChangeSignInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMChangeSignInfoRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMChangeSignInfoRsp& from);
  void MergeFrom(const IMChangeSignInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMChangeSignInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMChangeSignInfoRsp";
  }
  protected:
  explicit IMChangeSignInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSignInfoFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kResultCodeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string sign_info = 3;
  void clear_sign_info();
  const std::string& sign_info() const;
  void set_sign_info(const std::string& value);
  void set_sign_info(std::string&& value);
  void set_sign_info(const char* value);
  void set_sign_info(const char* value, size_t size);
  std::string* mutable_sign_info();
  std::string* release_sign_info();
  void set_allocated_sign_info(std::string* sign_info);
  private:
  const std::string& _internal_sign_info() const;
  void _internal_set_sign_info(const std::string& value);
  std::string* _internal_mutable_sign_info();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMChangeSignInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMSignInfoChangedNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMSignInfoChangedNotify) */ {
 public:
  inline IMSignInfoChangedNotify() : IMSignInfoChangedNotify(nullptr) {};
  virtual ~IMSignInfoChangedNotify();

  IMSignInfoChangedNotify(const IMSignInfoChangedNotify& from);
  IMSignInfoChangedNotify(IMSignInfoChangedNotify&& from) noexcept
    : IMSignInfoChangedNotify() {
    *this = ::std::move(from);
  }

  inline IMSignInfoChangedNotify& operator=(const IMSignInfoChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSignInfoChangedNotify& operator=(IMSignInfoChangedNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSignInfoChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSignInfoChangedNotify* internal_default_instance() {
    return reinterpret_cast<const IMSignInfoChangedNotify*>(
               &_IMSignInfoChangedNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(IMSignInfoChangedNotify& a, IMSignInfoChangedNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSignInfoChangedNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSignInfoChangedNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSignInfoChangedNotify* New() const final {
    return CreateMaybeMessage<IMSignInfoChangedNotify>(nullptr);
  }

  IMSignInfoChangedNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSignInfoChangedNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSignInfoChangedNotify& from);
  void MergeFrom(const IMSignInfoChangedNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSignInfoChangedNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMSignInfoChangedNotify";
  }
  protected:
  explicit IMSignInfoChangedNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangedUserIdFieldNumber = 1,
    kSignInfoFieldNumber = 2,
  };
  // string changed_user_id = 1;
  void clear_changed_user_id();
  const std::string& changed_user_id() const;
  void set_changed_user_id(const std::string& value);
  void set_changed_user_id(std::string&& value);
  void set_changed_user_id(const char* value);
  void set_changed_user_id(const char* value, size_t size);
  std::string* mutable_changed_user_id();
  std::string* release_changed_user_id();
  void set_allocated_changed_user_id(std::string* changed_user_id);
  private:
  const std::string& _internal_changed_user_id() const;
  void _internal_set_changed_user_id(const std::string& value);
  std::string* _internal_mutable_changed_user_id();
  public:

  // string sign_info = 2;
  void clear_sign_info();
  const std::string& sign_info() const;
  void set_sign_info(const std::string& value);
  void set_sign_info(std::string&& value);
  void set_sign_info(const char* value);
  void set_sign_info(const char* value, size_t size);
  std::string* mutable_sign_info();
  std::string* release_sign_info();
  void set_allocated_sign_info(std::string* sign_info);
  private:
  const std::string& _internal_sign_info() const;
  void _internal_set_sign_info(const std::string& value);
  std::string* _internal_mutable_sign_info();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMSignInfoChangedNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr changed_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMSearchUserReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMSearchUserReq) */ {
 public:
  inline IMSearchUserReq() : IMSearchUserReq(nullptr) {};
  virtual ~IMSearchUserReq();

  IMSearchUserReq(const IMSearchUserReq& from);
  IMSearchUserReq(IMSearchUserReq&& from) noexcept
    : IMSearchUserReq() {
    *this = ::std::move(from);
  }

  inline IMSearchUserReq& operator=(const IMSearchUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSearchUserReq& operator=(IMSearchUserReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSearchUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSearchUserReq* internal_default_instance() {
    return reinterpret_cast<const IMSearchUserReq*>(
               &_IMSearchUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(IMSearchUserReq& a, IMSearchUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSearchUserReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSearchUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSearchUserReq* New() const final {
    return CreateMaybeMessage<IMSearchUserReq>(nullptr);
  }

  IMSearchUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSearchUserReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSearchUserReq& from);
  void MergeFrom(const IMSearchUserReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSearchUserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMSearchUserReq";
  }
  protected:
  explicit IMSearchUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSearchUserNameFieldNumber = 2,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string search_user_name = 2;
  void clear_search_user_name();
  const std::string& search_user_name() const;
  void set_search_user_name(const std::string& value);
  void set_search_user_name(std::string&& value);
  void set_search_user_name(const char* value);
  void set_search_user_name(const char* value, size_t size);
  std::string* mutable_search_user_name();
  std::string* release_search_user_name();
  void set_allocated_search_user_name(std::string* search_user_name);
  private:
  const std::string& _internal_search_user_name() const;
  void _internal_set_search_user_name(const std::string& value);
  std::string* _internal_mutable_search_user_name();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMSearchUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMSearchUserRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMSearchUserRsp) */ {
 public:
  inline IMSearchUserRsp() : IMSearchUserRsp(nullptr) {};
  virtual ~IMSearchUserRsp();

  IMSearchUserRsp(const IMSearchUserRsp& from);
  IMSearchUserRsp(IMSearchUserRsp&& from) noexcept
    : IMSearchUserRsp() {
    *this = ::std::move(from);
  }

  inline IMSearchUserRsp& operator=(const IMSearchUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMSearchUserRsp& operator=(IMSearchUserRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMSearchUserRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMSearchUserRsp* internal_default_instance() {
    return reinterpret_cast<const IMSearchUserRsp*>(
               &_IMSearchUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(IMSearchUserRsp& a, IMSearchUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMSearchUserRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMSearchUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMSearchUserRsp* New() const final {
    return CreateMaybeMessage<IMSearchUserRsp>(nullptr);
  }

  IMSearchUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMSearchUserRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMSearchUserRsp& from);
  void MergeFrom(const IMSearchUserRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMSearchUserRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMSearchUserRsp";
  }
  protected:
  explicit IMSearchUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchUserListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.UserInfo search_user_list = 2;
  int search_user_list_size() const;
  private:
  int _internal_search_user_list_size() const;
  public:
  void clear_search_user_list();
  ::IM::BaseDefine::UserInfo* mutable_search_user_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_search_user_list();
  private:
  const ::IM::BaseDefine::UserInfo& _internal_search_user_list(int index) const;
  ::IM::BaseDefine::UserInfo* _internal_add_search_user_list();
  public:
  const ::IM::BaseDefine::UserInfo& search_user_list(int index) const;
  ::IM::BaseDefine::UserInfo* add_search_user_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      search_user_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMSearchUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo > search_user_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMFollowUserReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMFollowUserReq) */ {
 public:
  inline IMFollowUserReq() : IMFollowUserReq(nullptr) {};
  virtual ~IMFollowUserReq();

  IMFollowUserReq(const IMFollowUserReq& from);
  IMFollowUserReq(IMFollowUserReq&& from) noexcept
    : IMFollowUserReq() {
    *this = ::std::move(from);
  }

  inline IMFollowUserReq& operator=(const IMFollowUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFollowUserReq& operator=(IMFollowUserReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFollowUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFollowUserReq* internal_default_instance() {
    return reinterpret_cast<const IMFollowUserReq*>(
               &_IMFollowUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(IMFollowUserReq& a, IMFollowUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFollowUserReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFollowUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFollowUserReq* New() const final {
    return CreateMaybeMessage<IMFollowUserReq>(nullptr);
  }

  IMFollowUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFollowUserReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFollowUserReq& from);
  void MergeFrom(const IMFollowUserReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFollowUserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMFollowUserReq";
  }
  protected:
  explicit IMFollowUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMFollowUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMFollowUserRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMFollowUserRsp) */ {
 public:
  inline IMFollowUserRsp() : IMFollowUserRsp(nullptr) {};
  virtual ~IMFollowUserRsp();

  IMFollowUserRsp(const IMFollowUserRsp& from);
  IMFollowUserRsp(IMFollowUserRsp&& from) noexcept
    : IMFollowUserRsp() {
    *this = ::std::move(from);
  }

  inline IMFollowUserRsp& operator=(const IMFollowUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFollowUserRsp& operator=(IMFollowUserRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFollowUserRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFollowUserRsp* internal_default_instance() {
    return reinterpret_cast<const IMFollowUserRsp*>(
               &_IMFollowUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(IMFollowUserRsp& a, IMFollowUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFollowUserRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFollowUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFollowUserRsp* New() const final {
    return CreateMaybeMessage<IMFollowUserRsp>(nullptr);
  }

  IMFollowUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFollowUserRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFollowUserRsp& from);
  void MergeFrom(const IMFollowUserRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFollowUserRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMFollowUserRsp";
  }
  protected:
  explicit IMFollowUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kResultCodeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMFollowUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMDelFriendReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMDelFriendReq) */ {
 public:
  inline IMDelFriendReq() : IMDelFriendReq(nullptr) {};
  virtual ~IMDelFriendReq();

  IMDelFriendReq(const IMDelFriendReq& from);
  IMDelFriendReq(IMDelFriendReq&& from) noexcept
    : IMDelFriendReq() {
    *this = ::std::move(from);
  }

  inline IMDelFriendReq& operator=(const IMDelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMDelFriendReq& operator=(IMDelFriendReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMDelFriendReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMDelFriendReq* internal_default_instance() {
    return reinterpret_cast<const IMDelFriendReq*>(
               &_IMDelFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(IMDelFriendReq& a, IMDelFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMDelFriendReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMDelFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMDelFriendReq* New() const final {
    return CreateMaybeMessage<IMDelFriendReq>(nullptr);
  }

  IMDelFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMDelFriendReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMDelFriendReq& from);
  void MergeFrom(const IMDelFriendReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMDelFriendReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMDelFriendReq";
  }
  protected:
  explicit IMDelFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kAdditionMsgFieldNumber = 3,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // bytes addition_msg = 3;
  void clear_addition_msg();
  const std::string& addition_msg() const;
  void set_addition_msg(const std::string& value);
  void set_addition_msg(std::string&& value);
  void set_addition_msg(const char* value);
  void set_addition_msg(const void* value, size_t size);
  std::string* mutable_addition_msg();
  std::string* release_addition_msg();
  void set_allocated_addition_msg(std::string* addition_msg);
  private:
  const std::string& _internal_addition_msg() const;
  void _internal_set_addition_msg(const std::string& value);
  std::string* _internal_mutable_addition_msg();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDelFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addition_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMDelFriendRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMDelFriendRsp) */ {
 public:
  inline IMDelFriendRsp() : IMDelFriendRsp(nullptr) {};
  virtual ~IMDelFriendRsp();

  IMDelFriendRsp(const IMDelFriendRsp& from);
  IMDelFriendRsp(IMDelFriendRsp&& from) noexcept
    : IMDelFriendRsp() {
    *this = ::std::move(from);
  }

  inline IMDelFriendRsp& operator=(const IMDelFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMDelFriendRsp& operator=(IMDelFriendRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMDelFriendRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMDelFriendRsp* internal_default_instance() {
    return reinterpret_cast<const IMDelFriendRsp*>(
               &_IMDelFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(IMDelFriendRsp& a, IMDelFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMDelFriendRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMDelFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMDelFriendRsp* New() const final {
    return CreateMaybeMessage<IMDelFriendRsp>(nullptr);
  }

  IMDelFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMDelFriendRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMDelFriendRsp& from);
  void MergeFrom(const IMDelFriendRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMDelFriendRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMDelFriendRsp";
  }
  protected:
  explicit IMDelFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kAdditionMsgFieldNumber = 4,
    kAttachDataFieldNumber = 20,
    kResultCodeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // bytes addition_msg = 4;
  void clear_addition_msg();
  const std::string& addition_msg() const;
  void set_addition_msg(const std::string& value);
  void set_addition_msg(std::string&& value);
  void set_addition_msg(const char* value);
  void set_addition_msg(const void* value, size_t size);
  std::string* mutable_addition_msg();
  std::string* release_addition_msg();
  void set_allocated_addition_msg(std::string* addition_msg);
  private:
  const std::string& _internal_addition_msg() const;
  void _internal_set_addition_msg(const std::string& value);
  std::string* _internal_mutable_addition_msg();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 result_code = 3;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDelFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addition_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMDelFollowUserReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMDelFollowUserReq) */ {
 public:
  inline IMDelFollowUserReq() : IMDelFollowUserReq(nullptr) {};
  virtual ~IMDelFollowUserReq();

  IMDelFollowUserReq(const IMDelFollowUserReq& from);
  IMDelFollowUserReq(IMDelFollowUserReq&& from) noexcept
    : IMDelFollowUserReq() {
    *this = ::std::move(from);
  }

  inline IMDelFollowUserReq& operator=(const IMDelFollowUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMDelFollowUserReq& operator=(IMDelFollowUserReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMDelFollowUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMDelFollowUserReq* internal_default_instance() {
    return reinterpret_cast<const IMDelFollowUserReq*>(
               &_IMDelFollowUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(IMDelFollowUserReq& a, IMDelFollowUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMDelFollowUserReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMDelFollowUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMDelFollowUserReq* New() const final {
    return CreateMaybeMessage<IMDelFollowUserReq>(nullptr);
  }

  IMDelFollowUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMDelFollowUserReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMDelFollowUserReq& from);
  void MergeFrom(const IMDelFollowUserReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMDelFollowUserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMDelFollowUserReq";
  }
  protected:
  explicit IMDelFollowUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDelFollowUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMDelFollowUserRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMDelFollowUserRsp) */ {
 public:
  inline IMDelFollowUserRsp() : IMDelFollowUserRsp(nullptr) {};
  virtual ~IMDelFollowUserRsp();

  IMDelFollowUserRsp(const IMDelFollowUserRsp& from);
  IMDelFollowUserRsp(IMDelFollowUserRsp&& from) noexcept
    : IMDelFollowUserRsp() {
    *this = ::std::move(from);
  }

  inline IMDelFollowUserRsp& operator=(const IMDelFollowUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMDelFollowUserRsp& operator=(IMDelFollowUserRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMDelFollowUserRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMDelFollowUserRsp* internal_default_instance() {
    return reinterpret_cast<const IMDelFollowUserRsp*>(
               &_IMDelFollowUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(IMDelFollowUserRsp& a, IMDelFollowUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMDelFollowUserRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMDelFollowUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMDelFollowUserRsp* New() const final {
    return CreateMaybeMessage<IMDelFollowUserRsp>(nullptr);
  }

  IMDelFollowUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMDelFollowUserRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMDelFollowUserRsp& from);
  void MergeFrom(const IMDelFollowUserRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMDelFollowUserRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMDelFollowUserRsp";
  }
  protected:
  explicit IMDelFollowUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kResultCodeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 result_code = 3;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMDelFollowUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMALLOnlineUserCntReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMALLOnlineUserCntReq) */ {
 public:
  inline IMALLOnlineUserCntReq() : IMALLOnlineUserCntReq(nullptr) {};
  virtual ~IMALLOnlineUserCntReq();

  IMALLOnlineUserCntReq(const IMALLOnlineUserCntReq& from);
  IMALLOnlineUserCntReq(IMALLOnlineUserCntReq&& from) noexcept
    : IMALLOnlineUserCntReq() {
    *this = ::std::move(from);
  }

  inline IMALLOnlineUserCntReq& operator=(const IMALLOnlineUserCntReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMALLOnlineUserCntReq& operator=(IMALLOnlineUserCntReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMALLOnlineUserCntReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMALLOnlineUserCntReq* internal_default_instance() {
    return reinterpret_cast<const IMALLOnlineUserCntReq*>(
               &_IMALLOnlineUserCntReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(IMALLOnlineUserCntReq& a, IMALLOnlineUserCntReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMALLOnlineUserCntReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMALLOnlineUserCntReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMALLOnlineUserCntReq* New() const final {
    return CreateMaybeMessage<IMALLOnlineUserCntReq>(nullptr);
  }

  IMALLOnlineUserCntReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMALLOnlineUserCntReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMALLOnlineUserCntReq& from);
  void MergeFrom(const IMALLOnlineUserCntReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMALLOnlineUserCntReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMALLOnlineUserCntReq";
  }
  protected:
  explicit IMALLOnlineUserCntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kStudyStateFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.Buddy.StudyState study_state = 2;
  void clear_study_state();
  ::IM::Buddy::StudyState study_state() const;
  void set_study_state(::IM::Buddy::StudyState value);
  private:
  ::IM::Buddy::StudyState _internal_study_state() const;
  void _internal_set_study_state(::IM::Buddy::StudyState value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMALLOnlineUserCntReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  int study_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMALLOnlineUserCntRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMALLOnlineUserCntRsp) */ {
 public:
  inline IMALLOnlineUserCntRsp() : IMALLOnlineUserCntRsp(nullptr) {};
  virtual ~IMALLOnlineUserCntRsp();

  IMALLOnlineUserCntRsp(const IMALLOnlineUserCntRsp& from);
  IMALLOnlineUserCntRsp(IMALLOnlineUserCntRsp&& from) noexcept
    : IMALLOnlineUserCntRsp() {
    *this = ::std::move(from);
  }

  inline IMALLOnlineUserCntRsp& operator=(const IMALLOnlineUserCntRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMALLOnlineUserCntRsp& operator=(IMALLOnlineUserCntRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMALLOnlineUserCntRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMALLOnlineUserCntRsp* internal_default_instance() {
    return reinterpret_cast<const IMALLOnlineUserCntRsp*>(
               &_IMALLOnlineUserCntRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(IMALLOnlineUserCntRsp& a, IMALLOnlineUserCntRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMALLOnlineUserCntRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMALLOnlineUserCntRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMALLOnlineUserCntRsp* New() const final {
    return CreateMaybeMessage<IMALLOnlineUserCntRsp>(nullptr);
  }

  IMALLOnlineUserCntRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMALLOnlineUserCntRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMALLOnlineUserCntRsp& from);
  void MergeFrom(const IMALLOnlineUserCntRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMALLOnlineUserCntRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMALLOnlineUserCntRsp";
  }
  protected:
  explicit IMALLOnlineUserCntRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kOnlineUserCntFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 online_user_cnt = 2;
  void clear_online_user_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 online_user_cnt() const;
  void set_online_user_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_online_user_cnt() const;
  void _internal_set_online_user_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMALLOnlineUserCntRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 online_user_cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMUpdateUsersInfoReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMUpdateUsersInfoReq) */ {
 public:
  inline IMUpdateUsersInfoReq() : IMUpdateUsersInfoReq(nullptr) {};
  virtual ~IMUpdateUsersInfoReq();

  IMUpdateUsersInfoReq(const IMUpdateUsersInfoReq& from);
  IMUpdateUsersInfoReq(IMUpdateUsersInfoReq&& from) noexcept
    : IMUpdateUsersInfoReq() {
    *this = ::std::move(from);
  }

  inline IMUpdateUsersInfoReq& operator=(const IMUpdateUsersInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUpdateUsersInfoReq& operator=(IMUpdateUsersInfoReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMUpdateUsersInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUpdateUsersInfoReq* internal_default_instance() {
    return reinterpret_cast<const IMUpdateUsersInfoReq*>(
               &_IMUpdateUsersInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(IMUpdateUsersInfoReq& a, IMUpdateUsersInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUpdateUsersInfoReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUpdateUsersInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUpdateUsersInfoReq* New() const final {
    return CreateMaybeMessage<IMUpdateUsersInfoReq>(nullptr);
  }

  IMUpdateUsersInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUpdateUsersInfoReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMUpdateUsersInfoReq& from);
  void MergeFrom(const IMUpdateUsersInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMUpdateUsersInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMUpdateUsersInfoReq";
  }
  protected:
  explicit IMUpdateUsersInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kUserInfoFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.BaseDefine.UserInfo user_info = 2;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::IM::BaseDefine::UserInfo& user_info() const;
  ::IM::BaseDefine::UserInfo* release_user_info();
  ::IM::BaseDefine::UserInfo* mutable_user_info();
  void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_info() const;
  ::IM::BaseDefine::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::IM::BaseDefine::UserInfo* user_info);
  ::IM::BaseDefine::UserInfo* unsafe_arena_release_user_info();

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUpdateUsersInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::IM::BaseDefine::UserInfo* user_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMUpdateUsersInfoRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMUpdateUsersInfoRsp) */ {
 public:
  inline IMUpdateUsersInfoRsp() : IMUpdateUsersInfoRsp(nullptr) {};
  virtual ~IMUpdateUsersInfoRsp();

  IMUpdateUsersInfoRsp(const IMUpdateUsersInfoRsp& from);
  IMUpdateUsersInfoRsp(IMUpdateUsersInfoRsp&& from) noexcept
    : IMUpdateUsersInfoRsp() {
    *this = ::std::move(from);
  }

  inline IMUpdateUsersInfoRsp& operator=(const IMUpdateUsersInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUpdateUsersInfoRsp& operator=(IMUpdateUsersInfoRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMUpdateUsersInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUpdateUsersInfoRsp* internal_default_instance() {
    return reinterpret_cast<const IMUpdateUsersInfoRsp*>(
               &_IMUpdateUsersInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(IMUpdateUsersInfoRsp& a, IMUpdateUsersInfoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUpdateUsersInfoRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUpdateUsersInfoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMUpdateUsersInfoRsp* New() const final {
    return CreateMaybeMessage<IMUpdateUsersInfoRsp>(nullptr);
  }

  IMUpdateUsersInfoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMUpdateUsersInfoRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMUpdateUsersInfoRsp& from);
  void MergeFrom(const IMUpdateUsersInfoRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMUpdateUsersInfoRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMUpdateUsersInfoRsp";
  }
  protected:
  explicit IMUpdateUsersInfoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kResultCodeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMUpdateUsersInfoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMRecommendListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMRecommendListReq) */ {
 public:
  inline IMRecommendListReq() : IMRecommendListReq(nullptr) {};
  virtual ~IMRecommendListReq();

  IMRecommendListReq(const IMRecommendListReq& from);
  IMRecommendListReq(IMRecommendListReq&& from) noexcept
    : IMRecommendListReq() {
    *this = ::std::move(from);
  }

  inline IMRecommendListReq& operator=(const IMRecommendListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMRecommendListReq& operator=(IMRecommendListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMRecommendListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRecommendListReq* internal_default_instance() {
    return reinterpret_cast<const IMRecommendListReq*>(
               &_IMRecommendListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(IMRecommendListReq& a, IMRecommendListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMRecommendListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMRecommendListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMRecommendListReq* New() const final {
    return CreateMaybeMessage<IMRecommendListReq>(nullptr);
  }

  IMRecommendListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMRecommendListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMRecommendListReq& from);
  void MergeFrom(const IMRecommendListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRecommendListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMRecommendListReq";
  }
  protected:
  explicit IMRecommendListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
    kPageFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 page = 2;
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRecommendListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMRecommendListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMRecommendListRsp) */ {
 public:
  inline IMRecommendListRsp() : IMRecommendListRsp(nullptr) {};
  virtual ~IMRecommendListRsp();

  IMRecommendListRsp(const IMRecommendListRsp& from);
  IMRecommendListRsp(IMRecommendListRsp&& from) noexcept
    : IMRecommendListRsp() {
    *this = ::std::move(from);
  }

  inline IMRecommendListRsp& operator=(const IMRecommendListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMRecommendListRsp& operator=(IMRecommendListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMRecommendListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRecommendListRsp* internal_default_instance() {
    return reinterpret_cast<const IMRecommendListRsp*>(
               &_IMRecommendListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(IMRecommendListRsp& a, IMRecommendListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMRecommendListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMRecommendListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMRecommendListRsp* New() const final {
    return CreateMaybeMessage<IMRecommendListRsp>(nullptr);
  }

  IMRecommendListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMRecommendListRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMRecommendListRsp& from);
  void MergeFrom(const IMRecommendListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMRecommendListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMRecommendListRsp";
  }
  protected:
  explicit IMRecommendListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecommendListFieldNumber = 1,
    kRecommendNickListFieldNumber = 2,
    kAttachDataFieldNumber = 20,
  };
  // repeated string recommend_list = 1;
  int recommend_list_size() const;
  private:
  int _internal_recommend_list_size() const;
  public:
  void clear_recommend_list();
  const std::string& recommend_list(int index) const;
  std::string* mutable_recommend_list(int index);
  void set_recommend_list(int index, const std::string& value);
  void set_recommend_list(int index, std::string&& value);
  void set_recommend_list(int index, const char* value);
  void set_recommend_list(int index, const char* value, size_t size);
  std::string* add_recommend_list();
  void add_recommend_list(const std::string& value);
  void add_recommend_list(std::string&& value);
  void add_recommend_list(const char* value);
  void add_recommend_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& recommend_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_recommend_list();
  private:
  const std::string& _internal_recommend_list(int index) const;
  std::string* _internal_add_recommend_list();
  public:

  // repeated string recommend_nick_list = 2;
  int recommend_nick_list_size() const;
  private:
  int _internal_recommend_nick_list_size() const;
  public:
  void clear_recommend_nick_list();
  const std::string& recommend_nick_list(int index) const;
  std::string* mutable_recommend_nick_list(int index);
  void set_recommend_nick_list(int index, const std::string& value);
  void set_recommend_nick_list(int index, std::string&& value);
  void set_recommend_nick_list(int index, const char* value);
  void set_recommend_nick_list(int index, const char* value, size_t size);
  std::string* add_recommend_nick_list();
  void add_recommend_nick_list(const std::string& value);
  void add_recommend_nick_list(std::string&& value);
  void add_recommend_nick_list(const char* value);
  void add_recommend_nick_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& recommend_nick_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_recommend_nick_list();
  private:
  const std::string& _internal_recommend_nick_list(int index) const;
  std::string* _internal_add_recommend_nick_list();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMRecommendListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> recommend_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> recommend_nick_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMGetALLOnlineUserReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMGetALLOnlineUserReq) */ {
 public:
  inline IMGetALLOnlineUserReq() : IMGetALLOnlineUserReq(nullptr) {};
  virtual ~IMGetALLOnlineUserReq();

  IMGetALLOnlineUserReq(const IMGetALLOnlineUserReq& from);
  IMGetALLOnlineUserReq(IMGetALLOnlineUserReq&& from) noexcept
    : IMGetALLOnlineUserReq() {
    *this = ::std::move(from);
  }

  inline IMGetALLOnlineUserReq& operator=(const IMGetALLOnlineUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetALLOnlineUserReq& operator=(IMGetALLOnlineUserReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMGetALLOnlineUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMGetALLOnlineUserReq* internal_default_instance() {
    return reinterpret_cast<const IMGetALLOnlineUserReq*>(
               &_IMGetALLOnlineUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(IMGetALLOnlineUserReq& a, IMGetALLOnlineUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetALLOnlineUserReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetALLOnlineUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetALLOnlineUserReq* New() const final {
    return CreateMaybeMessage<IMGetALLOnlineUserReq>(nullptr);
  }

  IMGetALLOnlineUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetALLOnlineUserReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMGetALLOnlineUserReq& from);
  void MergeFrom(const IMGetALLOnlineUserReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMGetALLOnlineUserReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMGetALLOnlineUserReq";
  }
  protected:
  explicit IMGetALLOnlineUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMGetALLOnlineUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// -------------------------------------------------------------------

class IMGetALLOnlineUserRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Buddy.IMGetALLOnlineUserRsp) */ {
 public:
  inline IMGetALLOnlineUserRsp() : IMGetALLOnlineUserRsp(nullptr) {};
  virtual ~IMGetALLOnlineUserRsp();

  IMGetALLOnlineUserRsp(const IMGetALLOnlineUserRsp& from);
  IMGetALLOnlineUserRsp(IMGetALLOnlineUserRsp&& from) noexcept
    : IMGetALLOnlineUserRsp() {
    *this = ::std::move(from);
  }

  inline IMGetALLOnlineUserRsp& operator=(const IMGetALLOnlineUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMGetALLOnlineUserRsp& operator=(IMGetALLOnlineUserRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMGetALLOnlineUserRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMGetALLOnlineUserRsp* internal_default_instance() {
    return reinterpret_cast<const IMGetALLOnlineUserRsp*>(
               &_IMGetALLOnlineUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(IMGetALLOnlineUserRsp& a, IMGetALLOnlineUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMGetALLOnlineUserRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMGetALLOnlineUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMGetALLOnlineUserRsp* New() const final {
    return CreateMaybeMessage<IMGetALLOnlineUserRsp>(nullptr);
  }

  IMGetALLOnlineUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMGetALLOnlineUserRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMGetALLOnlineUserRsp& from);
  void MergeFrom(const IMGetALLOnlineUserRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMGetALLOnlineUserRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Buddy.IMGetALLOnlineUserRsp";
  }
  protected:
  explicit IMGetALLOnlineUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  int user_list_size() const;
  private:
  int _internal_user_list_size() const;
  public:
  void clear_user_list();
  ::IM::BaseDefine::UserInfo* mutable_user_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_list();
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_list(int index) const;
  ::IM::BaseDefine::UserInfo* _internal_add_user_list();
  public:
  const ::IM::BaseDefine::UserInfo& user_list(int index) const;
  ::IM::BaseDefine::UserInfo* add_user_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Buddy.IMGetALLOnlineUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBuddy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMRecentContactSessionReq

// string user_id = 1;
inline void IMRecentContactSessionReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRecentContactSessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.user_id)
  return _internal_user_id();
}
inline void IMRecentContactSessionReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.user_id)
}
inline std::string* IMRecentContactSessionReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMRecentContactSessionReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMRecentContactSessionReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRecentContactSessionReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecentContactSessionReq.user_id)
}
inline void IMRecentContactSessionReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactSessionReq.user_id)
}
inline void IMRecentContactSessionReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactSessionReq.user_id)
}
inline std::string* IMRecentContactSessionReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRecentContactSessionReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecentContactSessionReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRecentContactSessionReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactSessionReq.user_id)
}

// uint32 latest_update_time = 2;
inline void IMRecentContactSessionReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRecentContactSessionReq::_internal_latest_update_time() const {
  return latest_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRecentContactSessionReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.latest_update_time)
  return _internal_latest_update_time();
}
inline void IMRecentContactSessionReq::_internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_update_time_ = value;
}
inline void IMRecentContactSessionReq::set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.latest_update_time)
}

// bytes attach_data = 20;
inline void IMRecentContactSessionReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRecentContactSessionReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionReq.attach_data)
  return _internal_attach_data();
}
inline void IMRecentContactSessionReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
inline std::string* IMRecentContactSessionReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMRecentContactSessionReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMRecentContactSessionReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRecentContactSessionReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
inline void IMRecentContactSessionReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
inline void IMRecentContactSessionReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactSessionReq.attach_data)
}
inline std::string* IMRecentContactSessionReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRecentContactSessionReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecentContactSessionReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRecentContactSessionReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactSessionReq.attach_data)
}

// -------------------------------------------------------------------

// IMRecentContactSessionRsp

// string user_id = 1;
inline void IMRecentContactSessionRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRecentContactSessionRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.user_id)
  return _internal_user_id();
}
inline void IMRecentContactSessionRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionRsp.user_id)
}
inline std::string* IMRecentContactSessionRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMRecentContactSessionRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMRecentContactSessionRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRecentContactSessionRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecentContactSessionRsp.user_id)
}
inline void IMRecentContactSessionRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactSessionRsp.user_id)
}
inline void IMRecentContactSessionRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactSessionRsp.user_id)
}
inline std::string* IMRecentContactSessionRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRecentContactSessionRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecentContactSessionRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRecentContactSessionRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactSessionRsp.user_id)
}

// repeated .IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
inline int IMRecentContactSessionRsp::_internal_contact_session_list_size() const {
  return contact_session_list_.size();
}
inline int IMRecentContactSessionRsp::contact_session_list_size() const {
  return _internal_contact_session_list_size();
}
inline ::IM::BaseDefine::ContactSessionInfo* IMRecentContactSessionRsp::mutable_contact_session_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >*
IMRecentContactSessionRsp::mutable_contact_session_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return &contact_session_list_;
}
inline const ::IM::BaseDefine::ContactSessionInfo& IMRecentContactSessionRsp::_internal_contact_session_list(int index) const {
  return contact_session_list_.Get(index);
}
inline const ::IM::BaseDefine::ContactSessionInfo& IMRecentContactSessionRsp::contact_session_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return _internal_contact_session_list(index);
}
inline ::IM::BaseDefine::ContactSessionInfo* IMRecentContactSessionRsp::_internal_add_contact_session_list() {
  return contact_session_list_.Add();
}
inline ::IM::BaseDefine::ContactSessionInfo* IMRecentContactSessionRsp::add_contact_session_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return _internal_add_contact_session_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::ContactSessionInfo >&
IMRecentContactSessionRsp::contact_session_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMRecentContactSessionRsp.contact_session_list)
  return contact_session_list_;
}

// bytes attach_data = 20;
inline void IMRecentContactSessionRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRecentContactSessionRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecentContactSessionRsp.attach_data)
  return _internal_attach_data();
}
inline void IMRecentContactSessionRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
inline std::string* IMRecentContactSessionRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecentContactSessionRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMRecentContactSessionRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMRecentContactSessionRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRecentContactSessionRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
inline void IMRecentContactSessionRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
inline void IMRecentContactSessionRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}
inline std::string* IMRecentContactSessionRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRecentContactSessionRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecentContactSessionRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRecentContactSessionRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecentContactSessionRsp.attach_data)
}

// -------------------------------------------------------------------

// IMUserStatNotify

// .IM.BaseDefine.UserStat user_stat = 1;
inline bool IMUserStatNotify::_internal_has_user_stat() const {
  return this != internal_default_instance() && user_stat_ != nullptr;
}
inline bool IMUserStatNotify::has_user_stat() const {
  return _internal_has_user_stat();
}
inline const ::IM::BaseDefine::UserStat& IMUserStatNotify::_internal_user_stat() const {
  const ::IM::BaseDefine::UserStat* p = user_stat_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::BaseDefine::UserStat*>(
      &::IM::BaseDefine::_UserStat_default_instance_);
}
inline const ::IM::BaseDefine::UserStat& IMUserStatNotify::user_stat() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUserStatNotify.user_stat)
  return _internal_user_stat();
}
inline void IMUserStatNotify::unsafe_arena_set_allocated_user_stat(
    ::IM::BaseDefine::UserStat* user_stat) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_stat_);
  }
  user_stat_ = user_stat;
  if (user_stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Buddy.IMUserStatNotify.user_stat)
}
inline ::IM::BaseDefine::UserStat* IMUserStatNotify::release_user_stat() {
  
  ::IM::BaseDefine::UserStat* temp = user_stat_;
  user_stat_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IM::BaseDefine::UserStat* IMUserStatNotify::unsafe_arena_release_user_stat() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUserStatNotify.user_stat)
  
  ::IM::BaseDefine::UserStat* temp = user_stat_;
  user_stat_ = nullptr;
  return temp;
}
inline ::IM::BaseDefine::UserStat* IMUserStatNotify::_internal_mutable_user_stat() {
  
  if (user_stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::UserStat>(GetArena());
    user_stat_ = p;
  }
  return user_stat_;
}
inline ::IM::BaseDefine::UserStat* IMUserStatNotify::mutable_user_stat() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUserStatNotify.user_stat)
  return _internal_mutable_user_stat();
}
inline void IMUserStatNotify::set_allocated_user_stat(::IM::BaseDefine::UserStat* user_stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_stat_);
  }
  if (user_stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_stat)->GetArena();
    if (message_arena != submessage_arena) {
      user_stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_stat, submessage_arena);
    }
    
  } else {
    
  }
  user_stat_ = user_stat;
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUserStatNotify.user_stat)
}

// -------------------------------------------------------------------

// IMUsersInfoReq

// string user_id = 1;
inline void IMUsersInfoReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUsersInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.user_id)
  return _internal_user_id();
}
inline void IMUsersInfoReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.user_id)
}
inline std::string* IMUsersInfoReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMUsersInfoReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMUsersInfoReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUsersInfoReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersInfoReq.user_id)
}
inline void IMUsersInfoReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoReq.user_id)
}
inline void IMUsersInfoReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoReq.user_id)
}
inline std::string* IMUsersInfoReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUsersInfoReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersInfoReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUsersInfoReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersInfoReq.user_id)
}

// repeated string user_id_list = 2;
inline int IMUsersInfoReq::_internal_user_id_list_size() const {
  return user_id_list_.size();
}
inline int IMUsersInfoReq::user_id_list_size() const {
  return _internal_user_id_list_size();
}
inline void IMUsersInfoReq::clear_user_id_list() {
  user_id_list_.Clear();
}
inline std::string* IMUsersInfoReq::add_user_id_list() {
  // @@protoc_insertion_point(field_add_mutable:IM.Buddy.IMUsersInfoReq.user_id_list)
  return _internal_add_user_id_list();
}
inline const std::string& IMUsersInfoReq::_internal_user_id_list(int index) const {
  return user_id_list_.Get(index);
}
inline const std::string& IMUsersInfoReq::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.user_id_list)
  return _internal_user_id_list(index);
}
inline std::string* IMUsersInfoReq::mutable_user_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoReq.user_id_list)
  return user_id_list_.Mutable(index);
}
inline void IMUsersInfoReq::set_user_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.user_id_list)
  user_id_list_.Mutable(index)->assign(value);
}
inline void IMUsersInfoReq::set_user_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.user_id_list)
  user_id_list_.Mutable(index)->assign(std::move(value));
}
inline void IMUsersInfoReq::set_user_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoReq.user_id_list)
}
inline void IMUsersInfoReq::set_user_id_list(int index, const char* value, size_t size) {
  user_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoReq.user_id_list)
}
inline std::string* IMUsersInfoReq::_internal_add_user_id_list() {
  return user_id_list_.Add();
}
inline void IMUsersInfoReq::add_user_id_list(const std::string& value) {
  user_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersInfoReq.user_id_list)
}
inline void IMUsersInfoReq::add_user_id_list(std::string&& value) {
  user_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersInfoReq.user_id_list)
}
inline void IMUsersInfoReq::add_user_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Buddy.IMUsersInfoReq.user_id_list)
}
inline void IMUsersInfoReq::add_user_id_list(const char* value, size_t size) {
  user_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Buddy.IMUsersInfoReq.user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IMUsersInfoReq::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersInfoReq.user_id_list)
  return user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IMUsersInfoReq::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersInfoReq.user_id_list)
  return &user_id_list_;
}

// bytes attach_data = 20;
inline void IMUsersInfoReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUsersInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoReq.attach_data)
  return _internal_attach_data();
}
inline void IMUsersInfoReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoReq.attach_data)
}
inline std::string* IMUsersInfoReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMUsersInfoReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMUsersInfoReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUsersInfoReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersInfoReq.attach_data)
}
inline void IMUsersInfoReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoReq.attach_data)
}
inline void IMUsersInfoReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoReq.attach_data)
}
inline std::string* IMUsersInfoReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUsersInfoReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersInfoReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUsersInfoReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMUsersInfoRsp

// string user_id = 1;
inline void IMUsersInfoRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUsersInfoRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.user_id)
  return _internal_user_id();
}
inline void IMUsersInfoRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoRsp.user_id)
}
inline std::string* IMUsersInfoRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMUsersInfoRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMUsersInfoRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUsersInfoRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersInfoRsp.user_id)
}
inline void IMUsersInfoRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoRsp.user_id)
}
inline void IMUsersInfoRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoRsp.user_id)
}
inline std::string* IMUsersInfoRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUsersInfoRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersInfoRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUsersInfoRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersInfoRsp.user_id)
}

// repeated .IM.BaseDefine.UserInfo user_info_list = 2;
inline int IMUsersInfoRsp::_internal_user_info_list_size() const {
  return user_info_list_.size();
}
inline int IMUsersInfoRsp::user_info_list_size() const {
  return _internal_user_info_list_size();
}
inline ::IM::BaseDefine::UserInfo* IMUsersInfoRsp::mutable_user_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMUsersInfoRsp::mutable_user_info_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return &user_info_list_;
}
inline const ::IM::BaseDefine::UserInfo& IMUsersInfoRsp::_internal_user_info_list(int index) const {
  return user_info_list_.Get(index);
}
inline const ::IM::BaseDefine::UserInfo& IMUsersInfoRsp::user_info_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return _internal_user_info_list(index);
}
inline ::IM::BaseDefine::UserInfo* IMUsersInfoRsp::_internal_add_user_info_list() {
  return user_info_list_.Add();
}
inline ::IM::BaseDefine::UserInfo* IMUsersInfoRsp::add_user_info_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return _internal_add_user_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMUsersInfoRsp::user_info_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersInfoRsp.user_info_list)
  return user_info_list_;
}

// bytes attach_data = 20;
inline void IMUsersInfoRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUsersInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersInfoRsp.attach_data)
  return _internal_attach_data();
}
inline void IMUsersInfoRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersInfoRsp.attach_data)
}
inline std::string* IMUsersInfoRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersInfoRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMUsersInfoRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMUsersInfoRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUsersInfoRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersInfoRsp.attach_data)
}
inline void IMUsersInfoRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersInfoRsp.attach_data)
}
inline void IMUsersInfoRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersInfoRsp.attach_data)
}
inline std::string* IMUsersInfoRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUsersInfoRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersInfoRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUsersInfoRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersInfoRsp.attach_data)
}

// -------------------------------------------------------------------

// IMRemoveSessionReq

// string user_id = 1;
inline void IMRemoveSessionReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRemoveSessionReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.user_id)
  return _internal_user_id();
}
inline void IMRemoveSessionReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.user_id)
}
inline std::string* IMRemoveSessionReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMRemoveSessionReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMRemoveSessionReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRemoveSessionReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionReq.user_id)
}
inline void IMRemoveSessionReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionReq.user_id)
}
inline void IMRemoveSessionReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionReq.user_id)
}
inline std::string* IMRemoveSessionReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRemoveSessionReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRemoveSessionReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionReq.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void IMRemoveSessionReq::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionReq::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionReq::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.session_type)
  return _internal_session_type();
}
inline void IMRemoveSessionReq::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMRemoveSessionReq::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.session_type)
}

// string session_id = 3;
inline void IMRemoveSessionReq::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRemoveSessionReq::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.session_id)
  return _internal_session_id();
}
inline void IMRemoveSessionReq::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.session_id)
}
inline std::string* IMRemoveSessionReq::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionReq.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& IMRemoveSessionReq::_internal_session_id() const {
  return session_id_.Get();
}
inline void IMRemoveSessionReq::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRemoveSessionReq::set_session_id(std::string&& value) {
  
  session_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionReq.session_id)
}
inline void IMRemoveSessionReq::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionReq.session_id)
}
inline void IMRemoveSessionReq::set_session_id(const char* value,
    size_t size) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionReq.session_id)
}
inline std::string* IMRemoveSessionReq::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRemoveSessionReq::release_session_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionReq.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRemoveSessionReq::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionReq.session_id)
}

// bytes attach_data = 20;
inline void IMRemoveSessionReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRemoveSessionReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionReq.attach_data)
  return _internal_attach_data();
}
inline void IMRemoveSessionReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionReq.attach_data)
}
inline std::string* IMRemoveSessionReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMRemoveSessionReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMRemoveSessionReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRemoveSessionReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionReq.attach_data)
}
inline void IMRemoveSessionReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionReq.attach_data)
}
inline void IMRemoveSessionReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionReq.attach_data)
}
inline std::string* IMRemoveSessionReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRemoveSessionReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRemoveSessionReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionReq.attach_data)
}

// -------------------------------------------------------------------

// IMRemoveSessionRsp

// string user_id = 1;
inline void IMRemoveSessionRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRemoveSessionRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.user_id)
  return _internal_user_id();
}
inline void IMRemoveSessionRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.user_id)
}
inline std::string* IMRemoveSessionRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMRemoveSessionRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMRemoveSessionRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRemoveSessionRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionRsp.user_id)
}
inline void IMRemoveSessionRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionRsp.user_id)
}
inline void IMRemoveSessionRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionRsp.user_id)
}
inline std::string* IMRemoveSessionRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRemoveSessionRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRemoveSessionRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionRsp.user_id)
}

// uint32 result_code = 2;
inline void IMRemoveSessionRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRemoveSessionRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRemoveSessionRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.result_code)
  return _internal_result_code();
}
inline void IMRemoveSessionRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMRemoveSessionRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.result_code)
}

// .IM.BaseDefine.SessionType session_type = 3;
inline void IMRemoveSessionRsp::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionRsp::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionRsp::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.session_type)
  return _internal_session_type();
}
inline void IMRemoveSessionRsp::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMRemoveSessionRsp::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.session_type)
}

// string session_id = 4;
inline void IMRemoveSessionRsp::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRemoveSessionRsp::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.session_id)
  return _internal_session_id();
}
inline void IMRemoveSessionRsp::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.session_id)
}
inline std::string* IMRemoveSessionRsp::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionRsp.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& IMRemoveSessionRsp::_internal_session_id() const {
  return session_id_.Get();
}
inline void IMRemoveSessionRsp::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRemoveSessionRsp::set_session_id(std::string&& value) {
  
  session_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionRsp.session_id)
}
inline void IMRemoveSessionRsp::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionRsp.session_id)
}
inline void IMRemoveSessionRsp::set_session_id(const char* value,
    size_t size) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionRsp.session_id)
}
inline std::string* IMRemoveSessionRsp::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRemoveSessionRsp::release_session_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionRsp.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRemoveSessionRsp::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionRsp.session_id)
}

// bytes attach_data = 20;
inline void IMRemoveSessionRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRemoveSessionRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionRsp.attach_data)
  return _internal_attach_data();
}
inline void IMRemoveSessionRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
inline std::string* IMRemoveSessionRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMRemoveSessionRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMRemoveSessionRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRemoveSessionRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
inline void IMRemoveSessionRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
inline void IMRemoveSessionRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionRsp.attach_data)
}
inline std::string* IMRemoveSessionRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRemoveSessionRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRemoveSessionRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionRsp.attach_data)
}

// -------------------------------------------------------------------

// IMAllUserReq

// string user_id = 1;
inline void IMAllUserReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMAllUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.user_id)
  return _internal_user_id();
}
inline void IMAllUserReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.user_id)
}
inline std::string* IMAllUserReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMAllUserReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMAllUserReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMAllUserReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMAllUserReq.user_id)
}
inline void IMAllUserReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserReq.user_id)
}
inline void IMAllUserReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserReq.user_id)
}
inline std::string* IMAllUserReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMAllUserReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMAllUserReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMAllUserReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserReq.user_id)
}

// uint32 latest_update_time = 2;
inline void IMAllUserReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMAllUserReq::_internal_latest_update_time() const {
  return latest_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMAllUserReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.latest_update_time)
  return _internal_latest_update_time();
}
inline void IMAllUserReq::_internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_update_time_ = value;
}
inline void IMAllUserReq::set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.latest_update_time)
}

// bytes attach_data = 20;
inline void IMAllUserReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMAllUserReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserReq.attach_data)
  return _internal_attach_data();
}
inline void IMAllUserReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserReq.attach_data)
}
inline std::string* IMAllUserReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMAllUserReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMAllUserReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMAllUserReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMAllUserReq.attach_data)
}
inline void IMAllUserReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserReq.attach_data)
}
inline void IMAllUserReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserReq.attach_data)
}
inline std::string* IMAllUserReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMAllUserReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMAllUserReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMAllUserReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserReq.attach_data)
}

// -------------------------------------------------------------------

// IMAllUserRsp

// string user_id = 1;
inline void IMAllUserRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMAllUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.user_id)
  return _internal_user_id();
}
inline void IMAllUserRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.user_id)
}
inline std::string* IMAllUserRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMAllUserRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMAllUserRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMAllUserRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMAllUserRsp.user_id)
}
inline void IMAllUserRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserRsp.user_id)
}
inline void IMAllUserRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserRsp.user_id)
}
inline std::string* IMAllUserRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMAllUserRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMAllUserRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMAllUserRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserRsp.user_id)
}

// uint32 latest_update_time = 2;
inline void IMAllUserRsp::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMAllUserRsp::_internal_latest_update_time() const {
  return latest_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMAllUserRsp::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.latest_update_time)
  return _internal_latest_update_time();
}
inline void IMAllUserRsp::_internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_update_time_ = value;
}
inline void IMAllUserRsp::set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.latest_update_time)
}

// repeated .IM.BaseDefine.UserInfo user_list = 3;
inline int IMAllUserRsp::_internal_user_list_size() const {
  return user_list_.size();
}
inline int IMAllUserRsp::user_list_size() const {
  return _internal_user_list_size();
}
inline ::IM::BaseDefine::UserInfo* IMAllUserRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMAllUserRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMAllUserRsp.user_list)
  return &user_list_;
}
inline const ::IM::BaseDefine::UserInfo& IMAllUserRsp::_internal_user_list(int index) const {
  return user_list_.Get(index);
}
inline const ::IM::BaseDefine::UserInfo& IMAllUserRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.user_list)
  return _internal_user_list(index);
}
inline ::IM::BaseDefine::UserInfo* IMAllUserRsp::_internal_add_user_list() {
  return user_list_.Add();
}
inline ::IM::BaseDefine::UserInfo* IMAllUserRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMAllUserRsp.user_list)
  return _internal_add_user_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMAllUserRsp::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMAllUserRsp.user_list)
  return user_list_;
}

// bytes attach_data = 20;
inline void IMAllUserRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMAllUserRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAllUserRsp.attach_data)
  return _internal_attach_data();
}
inline void IMAllUserRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAllUserRsp.attach_data)
}
inline std::string* IMAllUserRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAllUserRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMAllUserRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMAllUserRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMAllUserRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMAllUserRsp.attach_data)
}
inline void IMAllUserRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAllUserRsp.attach_data)
}
inline void IMAllUserRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAllUserRsp.attach_data)
}
inline std::string* IMAllUserRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMAllUserRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMAllUserRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMAllUserRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAllUserRsp.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStatReq

// string user_id = 1;
inline void IMUsersStatReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUsersStatReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.user_id)
  return _internal_user_id();
}
inline void IMUsersStatReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.user_id)
}
inline std::string* IMUsersStatReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMUsersStatReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMUsersStatReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUsersStatReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersStatReq.user_id)
}
inline void IMUsersStatReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatReq.user_id)
}
inline void IMUsersStatReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatReq.user_id)
}
inline std::string* IMUsersStatReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUsersStatReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersStatReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUsersStatReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersStatReq.user_id)
}

// repeated string user_id_list = 2;
inline int IMUsersStatReq::_internal_user_id_list_size() const {
  return user_id_list_.size();
}
inline int IMUsersStatReq::user_id_list_size() const {
  return _internal_user_id_list_size();
}
inline void IMUsersStatReq::clear_user_id_list() {
  user_id_list_.Clear();
}
inline std::string* IMUsersStatReq::add_user_id_list() {
  // @@protoc_insertion_point(field_add_mutable:IM.Buddy.IMUsersStatReq.user_id_list)
  return _internal_add_user_id_list();
}
inline const std::string& IMUsersStatReq::_internal_user_id_list(int index) const {
  return user_id_list_.Get(index);
}
inline const std::string& IMUsersStatReq::user_id_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.user_id_list)
  return _internal_user_id_list(index);
}
inline std::string* IMUsersStatReq::mutable_user_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatReq.user_id_list)
  return user_id_list_.Mutable(index);
}
inline void IMUsersStatReq::set_user_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.user_id_list)
  user_id_list_.Mutable(index)->assign(value);
}
inline void IMUsersStatReq::set_user_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.user_id_list)
  user_id_list_.Mutable(index)->assign(std::move(value));
}
inline void IMUsersStatReq::set_user_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatReq.user_id_list)
}
inline void IMUsersStatReq::set_user_id_list(int index, const char* value, size_t size) {
  user_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatReq.user_id_list)
}
inline std::string* IMUsersStatReq::_internal_add_user_id_list() {
  return user_id_list_.Add();
}
inline void IMUsersStatReq::add_user_id_list(const std::string& value) {
  user_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersStatReq.user_id_list)
}
inline void IMUsersStatReq::add_user_id_list(std::string&& value) {
  user_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersStatReq.user_id_list)
}
inline void IMUsersStatReq::add_user_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Buddy.IMUsersStatReq.user_id_list)
}
inline void IMUsersStatReq::add_user_id_list(const char* value, size_t size) {
  user_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Buddy.IMUsersStatReq.user_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IMUsersStatReq::user_id_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersStatReq.user_id_list)
  return user_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IMUsersStatReq::mutable_user_id_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersStatReq.user_id_list)
  return &user_id_list_;
}

// bytes attach_data = 20;
inline void IMUsersStatReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUsersStatReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatReq.attach_data)
  return _internal_attach_data();
}
inline void IMUsersStatReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatReq.attach_data)
}
inline std::string* IMUsersStatReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMUsersStatReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMUsersStatReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUsersStatReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersStatReq.attach_data)
}
inline void IMUsersStatReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatReq.attach_data)
}
inline void IMUsersStatReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatReq.attach_data)
}
inline std::string* IMUsersStatReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUsersStatReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersStatReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUsersStatReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersStatReq.attach_data)
}

// -------------------------------------------------------------------

// IMUsersStatRsp

// string user_id = 1;
inline void IMUsersStatRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUsersStatRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.user_id)
  return _internal_user_id();
}
inline void IMUsersStatRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatRsp.user_id)
}
inline std::string* IMUsersStatRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMUsersStatRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMUsersStatRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUsersStatRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersStatRsp.user_id)
}
inline void IMUsersStatRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatRsp.user_id)
}
inline void IMUsersStatRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatRsp.user_id)
}
inline std::string* IMUsersStatRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUsersStatRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersStatRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUsersStatRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersStatRsp.user_id)
}

// repeated .IM.BaseDefine.UserStat user_stat_list = 2;
inline int IMUsersStatRsp::_internal_user_stat_list_size() const {
  return user_stat_list_.size();
}
inline int IMUsersStatRsp::user_stat_list_size() const {
  return _internal_user_stat_list_size();
}
inline ::IM::BaseDefine::UserStat* IMUsersStatRsp::mutable_user_stat_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserStat >*
IMUsersStatRsp::mutable_user_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return &user_stat_list_;
}
inline const ::IM::BaseDefine::UserStat& IMUsersStatRsp::_internal_user_stat_list(int index) const {
  return user_stat_list_.Get(index);
}
inline const ::IM::BaseDefine::UserStat& IMUsersStatRsp::user_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return _internal_user_stat_list(index);
}
inline ::IM::BaseDefine::UserStat* IMUsersStatRsp::_internal_add_user_stat_list() {
  return user_stat_list_.Add();
}
inline ::IM::BaseDefine::UserStat* IMUsersStatRsp::add_user_stat_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return _internal_add_user_stat_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserStat >&
IMUsersStatRsp::user_stat_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMUsersStatRsp.user_stat_list)
  return user_stat_list_;
}

// bytes attach_data = 20;
inline void IMUsersStatRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUsersStatRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUsersStatRsp.attach_data)
  return _internal_attach_data();
}
inline void IMUsersStatRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUsersStatRsp.attach_data)
}
inline std::string* IMUsersStatRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUsersStatRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMUsersStatRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMUsersStatRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUsersStatRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUsersStatRsp.attach_data)
}
inline void IMUsersStatRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUsersStatRsp.attach_data)
}
inline void IMUsersStatRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUsersStatRsp.attach_data)
}
inline std::string* IMUsersStatRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUsersStatRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUsersStatRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUsersStatRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUsersStatRsp.attach_data)
}

// -------------------------------------------------------------------

// IMChangeAvatarReq

// string user_id = 1;
inline void IMChangeAvatarReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeAvatarReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.user_id)
  return _internal_user_id();
}
inline void IMChangeAvatarReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.user_id)
}
inline std::string* IMChangeAvatarReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMChangeAvatarReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMChangeAvatarReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeAvatarReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeAvatarReq.user_id)
}
inline void IMChangeAvatarReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.user_id)
}
inline void IMChangeAvatarReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.user_id)
}
inline std::string* IMChangeAvatarReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeAvatarReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeAvatarReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeAvatarReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.user_id)
}

// string avatar_url = 2;
inline void IMChangeAvatarReq::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeAvatarReq::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return _internal_avatar_url();
}
inline void IMChangeAvatarReq::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline std::string* IMChangeAvatarReq::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& IMChangeAvatarReq::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void IMChangeAvatarReq::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeAvatarReq::set_avatar_url(std::string&& value) {
  
  avatar_url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline void IMChangeAvatarReq::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline void IMChangeAvatarReq::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.avatar_url)
}
inline std::string* IMChangeAvatarReq::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeAvatarReq::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeAvatarReq.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeAvatarReq::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.avatar_url)
}

// bytes attach_data = 20;
inline void IMChangeAvatarReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeAvatarReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarReq.attach_data)
  return _internal_attach_data();
}
inline void IMChangeAvatarReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline std::string* IMChangeAvatarReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMChangeAvatarReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMChangeAvatarReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeAvatarReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline void IMChangeAvatarReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline void IMChangeAvatarReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarReq.attach_data)
}
inline std::string* IMChangeAvatarReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeAvatarReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeAvatarReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeAvatarReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarReq.attach_data)
}

// -------------------------------------------------------------------

// IMChangeAvatarRsp

// string user_id = 1;
inline void IMChangeAvatarRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeAvatarRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.user_id)
  return _internal_user_id();
}
inline void IMChangeAvatarRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.user_id)
}
inline std::string* IMChangeAvatarRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMChangeAvatarRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMChangeAvatarRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeAvatarRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeAvatarRsp.user_id)
}
inline void IMChangeAvatarRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarRsp.user_id)
}
inline void IMChangeAvatarRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarRsp.user_id)
}
inline std::string* IMChangeAvatarRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeAvatarRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeAvatarRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeAvatarRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarRsp.user_id)
}

// uint32 result_code = 2;
inline void IMChangeAvatarRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMChangeAvatarRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMChangeAvatarRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.result_code)
  return _internal_result_code();
}
inline void IMChangeAvatarRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMChangeAvatarRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.result_code)
}

// bytes attach_data = 20;
inline void IMChangeAvatarRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeAvatarRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return _internal_attach_data();
}
inline void IMChangeAvatarRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline std::string* IMChangeAvatarRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMChangeAvatarRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMChangeAvatarRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeAvatarRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline void IMChangeAvatarRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline void IMChangeAvatarRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeAvatarRsp.attach_data)
}
inline std::string* IMChangeAvatarRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeAvatarRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeAvatarRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeAvatarRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeAvatarRsp.attach_data)
}

// -------------------------------------------------------------------

// IMPCLoginStatusNotify

// string user_id = 1;
inline void IMPCLoginStatusNotify::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMPCLoginStatusNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMPCLoginStatusNotify.user_id)
  return _internal_user_id();
}
inline void IMPCLoginStatusNotify::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMPCLoginStatusNotify.user_id)
}
inline std::string* IMPCLoginStatusNotify::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMPCLoginStatusNotify.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMPCLoginStatusNotify::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMPCLoginStatusNotify::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMPCLoginStatusNotify::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMPCLoginStatusNotify.user_id)
}
inline void IMPCLoginStatusNotify::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMPCLoginStatusNotify.user_id)
}
inline void IMPCLoginStatusNotify::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMPCLoginStatusNotify.user_id)
}
inline std::string* IMPCLoginStatusNotify::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMPCLoginStatusNotify::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMPCLoginStatusNotify.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMPCLoginStatusNotify::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMPCLoginStatusNotify.user_id)
}

// .IM.BaseDefine.UserStatType login_stat = 2;
inline void IMPCLoginStatusNotify::clear_login_stat() {
  login_stat_ = 0;
}
inline ::IM::BaseDefine::UserStatType IMPCLoginStatusNotify::_internal_login_stat() const {
  return static_cast< ::IM::BaseDefine::UserStatType >(login_stat_);
}
inline ::IM::BaseDefine::UserStatType IMPCLoginStatusNotify::login_stat() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMPCLoginStatusNotify.login_stat)
  return _internal_login_stat();
}
inline void IMPCLoginStatusNotify::_internal_set_login_stat(::IM::BaseDefine::UserStatType value) {
  
  login_stat_ = value;
}
inline void IMPCLoginStatusNotify::set_login_stat(::IM::BaseDefine::UserStatType value) {
  _internal_set_login_stat(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMPCLoginStatusNotify.login_stat)
}

// -------------------------------------------------------------------

// IMRemoveSessionNotify

// string user_id = 1;
inline void IMRemoveSessionNotify::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRemoveSessionNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.user_id)
  return _internal_user_id();
}
inline void IMRemoveSessionNotify::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.user_id)
}
inline std::string* IMRemoveSessionNotify::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionNotify.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMRemoveSessionNotify::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMRemoveSessionNotify::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRemoveSessionNotify::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionNotify.user_id)
}
inline void IMRemoveSessionNotify::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionNotify.user_id)
}
inline void IMRemoveSessionNotify::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionNotify.user_id)
}
inline std::string* IMRemoveSessionNotify::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRemoveSessionNotify::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionNotify.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRemoveSessionNotify::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionNotify.user_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void IMRemoveSessionNotify::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionNotify::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType IMRemoveSessionNotify::session_type() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.session_type)
  return _internal_session_type();
}
inline void IMRemoveSessionNotify::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void IMRemoveSessionNotify::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.session_type)
}

// string session_id = 3;
inline void IMRemoveSessionNotify::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRemoveSessionNotify::session_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRemoveSessionNotify.session_id)
  return _internal_session_id();
}
inline void IMRemoveSessionNotify::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRemoveSessionNotify.session_id)
}
inline std::string* IMRemoveSessionNotify::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRemoveSessionNotify.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& IMRemoveSessionNotify::_internal_session_id() const {
  return session_id_.Get();
}
inline void IMRemoveSessionNotify::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRemoveSessionNotify::set_session_id(std::string&& value) {
  
  session_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRemoveSessionNotify.session_id)
}
inline void IMRemoveSessionNotify::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRemoveSessionNotify.session_id)
}
inline void IMRemoveSessionNotify::set_session_id(const char* value,
    size_t size) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRemoveSessionNotify.session_id)
}
inline std::string* IMRemoveSessionNotify::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRemoveSessionNotify::release_session_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRemoveSessionNotify.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRemoveSessionNotify::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRemoveSessionNotify.session_id)
}

// -------------------------------------------------------------------

// IMDepartmentReq

// string user_id = 1;
inline void IMDepartmentReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDepartmentReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.user_id)
  return _internal_user_id();
}
inline void IMDepartmentReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.user_id)
}
inline std::string* IMDepartmentReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMDepartmentReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMDepartmentReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDepartmentReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDepartmentReq.user_id)
}
inline void IMDepartmentReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDepartmentReq.user_id)
}
inline void IMDepartmentReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDepartmentReq.user_id)
}
inline std::string* IMDepartmentReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDepartmentReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDepartmentReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDepartmentReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDepartmentReq.user_id)
}

// uint32 latest_update_time = 2;
inline void IMDepartmentReq::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDepartmentReq::_internal_latest_update_time() const {
  return latest_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDepartmentReq::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.latest_update_time)
  return _internal_latest_update_time();
}
inline void IMDepartmentReq::_internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_update_time_ = value;
}
inline void IMDepartmentReq::set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.latest_update_time)
}

// bytes attach_data = 20;
inline void IMDepartmentReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDepartmentReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentReq.attach_data)
  return _internal_attach_data();
}
inline void IMDepartmentReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentReq.attach_data)
}
inline std::string* IMDepartmentReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMDepartmentReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMDepartmentReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDepartmentReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDepartmentReq.attach_data)
}
inline void IMDepartmentReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDepartmentReq.attach_data)
}
inline void IMDepartmentReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDepartmentReq.attach_data)
}
inline std::string* IMDepartmentReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDepartmentReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDepartmentReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDepartmentReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDepartmentReq.attach_data)
}

// -------------------------------------------------------------------

// IMDepartmentRsp

// string user_id = 1;
inline void IMDepartmentRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDepartmentRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.user_id)
  return _internal_user_id();
}
inline void IMDepartmentRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.user_id)
}
inline std::string* IMDepartmentRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMDepartmentRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMDepartmentRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDepartmentRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDepartmentRsp.user_id)
}
inline void IMDepartmentRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDepartmentRsp.user_id)
}
inline void IMDepartmentRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDepartmentRsp.user_id)
}
inline std::string* IMDepartmentRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDepartmentRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDepartmentRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDepartmentRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDepartmentRsp.user_id)
}

// uint32 latest_update_time = 2;
inline void IMDepartmentRsp::clear_latest_update_time() {
  latest_update_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDepartmentRsp::_internal_latest_update_time() const {
  return latest_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDepartmentRsp::latest_update_time() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.latest_update_time)
  return _internal_latest_update_time();
}
inline void IMDepartmentRsp::_internal_set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_update_time_ = value;
}
inline void IMDepartmentRsp::set_latest_update_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_update_time(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.latest_update_time)
}

// repeated .IM.BaseDefine.DepartInfo dept_list = 3;
inline int IMDepartmentRsp::_internal_dept_list_size() const {
  return dept_list_.size();
}
inline int IMDepartmentRsp::dept_list_size() const {
  return _internal_dept_list_size();
}
inline ::IM::BaseDefine::DepartInfo* IMDepartmentRsp::mutable_dept_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >*
IMDepartmentRsp::mutable_dept_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMDepartmentRsp.dept_list)
  return &dept_list_;
}
inline const ::IM::BaseDefine::DepartInfo& IMDepartmentRsp::_internal_dept_list(int index) const {
  return dept_list_.Get(index);
}
inline const ::IM::BaseDefine::DepartInfo& IMDepartmentRsp::dept_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.dept_list)
  return _internal_dept_list(index);
}
inline ::IM::BaseDefine::DepartInfo* IMDepartmentRsp::_internal_add_dept_list() {
  return dept_list_.Add();
}
inline ::IM::BaseDefine::DepartInfo* IMDepartmentRsp::add_dept_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMDepartmentRsp.dept_list)
  return _internal_add_dept_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::DepartInfo >&
IMDepartmentRsp::dept_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMDepartmentRsp.dept_list)
  return dept_list_;
}

// bytes attach_data = 20;
inline void IMDepartmentRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDepartmentRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDepartmentRsp.attach_data)
  return _internal_attach_data();
}
inline void IMDepartmentRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDepartmentRsp.attach_data)
}
inline std::string* IMDepartmentRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDepartmentRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMDepartmentRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMDepartmentRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDepartmentRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDepartmentRsp.attach_data)
}
inline void IMDepartmentRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDepartmentRsp.attach_data)
}
inline void IMDepartmentRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDepartmentRsp.attach_data)
}
inline std::string* IMDepartmentRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDepartmentRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDepartmentRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDepartmentRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDepartmentRsp.attach_data)
}

// -------------------------------------------------------------------

// IMAvatarChangedNotify

// uint32 changed_user_id = 1;
inline void IMAvatarChangedNotify::clear_changed_user_id() {
  changed_user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMAvatarChangedNotify::_internal_changed_user_id() const {
  return changed_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMAvatarChangedNotify::changed_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAvatarChangedNotify.changed_user_id)
  return _internal_changed_user_id();
}
inline void IMAvatarChangedNotify::_internal_set_changed_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  changed_user_id_ = value;
}
inline void IMAvatarChangedNotify::set_changed_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_changed_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAvatarChangedNotify.changed_user_id)
}

// string avatar_url = 2;
inline void IMAvatarChangedNotify::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMAvatarChangedNotify::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMAvatarChangedNotify.avatar_url)
  return _internal_avatar_url();
}
inline void IMAvatarChangedNotify::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
inline std::string* IMAvatarChangedNotify::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMAvatarChangedNotify.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& IMAvatarChangedNotify::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void IMAvatarChangedNotify::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMAvatarChangedNotify::set_avatar_url(std::string&& value) {
  
  avatar_url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
inline void IMAvatarChangedNotify::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
inline void IMAvatarChangedNotify::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}
inline std::string* IMAvatarChangedNotify::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMAvatarChangedNotify::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMAvatarChangedNotify.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMAvatarChangedNotify::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMAvatarChangedNotify.avatar_url)
}

// -------------------------------------------------------------------

// IMChangeSignInfoReq

// string user_id = 1;
inline void IMChangeSignInfoReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeSignInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.user_id)
  return _internal_user_id();
}
inline void IMChangeSignInfoReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.user_id)
}
inline std::string* IMChangeSignInfoReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMChangeSignInfoReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMChangeSignInfoReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeSignInfoReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoReq.user_id)
}
inline void IMChangeSignInfoReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoReq.user_id)
}
inline void IMChangeSignInfoReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoReq.user_id)
}
inline std::string* IMChangeSignInfoReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeSignInfoReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeSignInfoReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoReq.user_id)
}

// string sign_info = 2;
inline void IMChangeSignInfoReq::clear_sign_info() {
  sign_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeSignInfoReq::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.sign_info)
  return _internal_sign_info();
}
inline void IMChangeSignInfoReq::set_sign_info(const std::string& value) {
  _internal_set_sign_info(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
inline std::string* IMChangeSignInfoReq::mutable_sign_info() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoReq.sign_info)
  return _internal_mutable_sign_info();
}
inline const std::string& IMChangeSignInfoReq::_internal_sign_info() const {
  return sign_info_.Get();
}
inline void IMChangeSignInfoReq::_internal_set_sign_info(const std::string& value) {
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeSignInfoReq::set_sign_info(std::string&& value) {
  
  sign_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
inline void IMChangeSignInfoReq::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
inline void IMChangeSignInfoReq::set_sign_info(const char* value,
    size_t size) {
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoReq.sign_info)
}
inline std::string* IMChangeSignInfoReq::_internal_mutable_sign_info() {
  
  return sign_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeSignInfoReq::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoReq.sign_info)
  return sign_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeSignInfoReq::set_allocated_sign_info(std::string* sign_info) {
  if (sign_info != nullptr) {
    
  } else {
    
  }
  sign_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoReq.sign_info)
}

// bytes attach_data = 20;
inline void IMChangeSignInfoReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeSignInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoReq.attach_data)
  return _internal_attach_data();
}
inline void IMChangeSignInfoReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
inline std::string* IMChangeSignInfoReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMChangeSignInfoReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMChangeSignInfoReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeSignInfoReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
inline void IMChangeSignInfoReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
inline void IMChangeSignInfoReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoReq.attach_data)
}
inline std::string* IMChangeSignInfoReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeSignInfoReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeSignInfoReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMChangeSignInfoRsp

// string user_id = 1;
inline void IMChangeSignInfoRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeSignInfoRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.user_id)
  return _internal_user_id();
}
inline void IMChangeSignInfoRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.user_id)
}
inline std::string* IMChangeSignInfoRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMChangeSignInfoRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMChangeSignInfoRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeSignInfoRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoRsp.user_id)
}
inline void IMChangeSignInfoRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoRsp.user_id)
}
inline void IMChangeSignInfoRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoRsp.user_id)
}
inline std::string* IMChangeSignInfoRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeSignInfoRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeSignInfoRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoRsp.user_id)
}

// uint32 result_code = 2;
inline void IMChangeSignInfoRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMChangeSignInfoRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMChangeSignInfoRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.result_code)
  return _internal_result_code();
}
inline void IMChangeSignInfoRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMChangeSignInfoRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.result_code)
}

// string sign_info = 3;
inline void IMChangeSignInfoRsp::clear_sign_info() {
  sign_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeSignInfoRsp::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.sign_info)
  return _internal_sign_info();
}
inline void IMChangeSignInfoRsp::set_sign_info(const std::string& value) {
  _internal_set_sign_info(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}
inline std::string* IMChangeSignInfoRsp::mutable_sign_info() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoRsp.sign_info)
  return _internal_mutable_sign_info();
}
inline const std::string& IMChangeSignInfoRsp::_internal_sign_info() const {
  return sign_info_.Get();
}
inline void IMChangeSignInfoRsp::_internal_set_sign_info(const std::string& value) {
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeSignInfoRsp::set_sign_info(std::string&& value) {
  
  sign_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}
inline void IMChangeSignInfoRsp::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}
inline void IMChangeSignInfoRsp::set_sign_info(const char* value,
    size_t size) {
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}
inline std::string* IMChangeSignInfoRsp::_internal_mutable_sign_info() {
  
  return sign_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeSignInfoRsp::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoRsp.sign_info)
  return sign_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeSignInfoRsp::set_allocated_sign_info(std::string* sign_info) {
  if (sign_info != nullptr) {
    
  } else {
    
  }
  sign_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoRsp.sign_info)
}

// bytes attach_data = 20;
inline void IMChangeSignInfoRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMChangeSignInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMChangeSignInfoRsp.attach_data)
  return _internal_attach_data();
}
inline void IMChangeSignInfoRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
inline std::string* IMChangeSignInfoRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMChangeSignInfoRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMChangeSignInfoRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMChangeSignInfoRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMChangeSignInfoRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
inline void IMChangeSignInfoRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
inline void IMChangeSignInfoRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}
inline std::string* IMChangeSignInfoRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMChangeSignInfoRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMChangeSignInfoRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMChangeSignInfoRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMChangeSignInfoRsp.attach_data)
}

// -------------------------------------------------------------------

// IMSignInfoChangedNotify

// string changed_user_id = 1;
inline void IMSignInfoChangedNotify::clear_changed_user_id() {
  changed_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSignInfoChangedNotify::changed_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
  return _internal_changed_user_id();
}
inline void IMSignInfoChangedNotify::set_changed_user_id(const std::string& value) {
  _internal_set_changed_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
}
inline std::string* IMSignInfoChangedNotify::mutable_changed_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
  return _internal_mutable_changed_user_id();
}
inline const std::string& IMSignInfoChangedNotify::_internal_changed_user_id() const {
  return changed_user_id_.Get();
}
inline void IMSignInfoChangedNotify::_internal_set_changed_user_id(const std::string& value) {
  
  changed_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSignInfoChangedNotify::set_changed_user_id(std::string&& value) {
  
  changed_user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
}
inline void IMSignInfoChangedNotify::set_changed_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  changed_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
}
inline void IMSignInfoChangedNotify::set_changed_user_id(const char* value,
    size_t size) {
  
  changed_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
}
inline std::string* IMSignInfoChangedNotify::_internal_mutable_changed_user_id() {
  
  return changed_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSignInfoChangedNotify::release_changed_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
  return changed_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSignInfoChangedNotify::set_allocated_changed_user_id(std::string* changed_user_id) {
  if (changed_user_id != nullptr) {
    
  } else {
    
  }
  changed_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), changed_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSignInfoChangedNotify.changed_user_id)
}

// string sign_info = 2;
inline void IMSignInfoChangedNotify::clear_sign_info() {
  sign_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSignInfoChangedNotify::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSignInfoChangedNotify.sign_info)
  return _internal_sign_info();
}
inline void IMSignInfoChangedNotify::set_sign_info(const std::string& value) {
  _internal_set_sign_info(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
inline std::string* IMSignInfoChangedNotify::mutable_sign_info() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSignInfoChangedNotify.sign_info)
  return _internal_mutable_sign_info();
}
inline const std::string& IMSignInfoChangedNotify::_internal_sign_info() const {
  return sign_info_.Get();
}
inline void IMSignInfoChangedNotify::_internal_set_sign_info(const std::string& value) {
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSignInfoChangedNotify::set_sign_info(std::string&& value) {
  
  sign_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
inline void IMSignInfoChangedNotify::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
inline void IMSignInfoChangedNotify::set_sign_info(const char* value,
    size_t size) {
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}
inline std::string* IMSignInfoChangedNotify::_internal_mutable_sign_info() {
  
  return sign_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSignInfoChangedNotify::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMSignInfoChangedNotify.sign_info)
  return sign_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSignInfoChangedNotify::set_allocated_sign_info(std::string* sign_info) {
  if (sign_info != nullptr) {
    
  } else {
    
  }
  sign_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSignInfoChangedNotify.sign_info)
}

// -------------------------------------------------------------------

// IMSearchUserReq

// string user_id = 1;
inline void IMSearchUserReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSearchUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSearchUserReq.user_id)
  return _internal_user_id();
}
inline void IMSearchUserReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSearchUserReq.user_id)
}
inline std::string* IMSearchUserReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSearchUserReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSearchUserReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSearchUserReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSearchUserReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMSearchUserReq.user_id)
}
inline void IMSearchUserReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSearchUserReq.user_id)
}
inline void IMSearchUserReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSearchUserReq.user_id)
}
inline std::string* IMSearchUserReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSearchUserReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMSearchUserReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSearchUserReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSearchUserReq.user_id)
}

// string search_user_name = 2;
inline void IMSearchUserReq::clear_search_user_name() {
  search_user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSearchUserReq::search_user_name() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSearchUserReq.search_user_name)
  return _internal_search_user_name();
}
inline void IMSearchUserReq::set_search_user_name(const std::string& value) {
  _internal_set_search_user_name(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSearchUserReq.search_user_name)
}
inline std::string* IMSearchUserReq::mutable_search_user_name() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSearchUserReq.search_user_name)
  return _internal_mutable_search_user_name();
}
inline const std::string& IMSearchUserReq::_internal_search_user_name() const {
  return search_user_name_.Get();
}
inline void IMSearchUserReq::_internal_set_search_user_name(const std::string& value) {
  
  search_user_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSearchUserReq::set_search_user_name(std::string&& value) {
  
  search_user_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMSearchUserReq.search_user_name)
}
inline void IMSearchUserReq::set_search_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_user_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSearchUserReq.search_user_name)
}
inline void IMSearchUserReq::set_search_user_name(const char* value,
    size_t size) {
  
  search_user_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSearchUserReq.search_user_name)
}
inline std::string* IMSearchUserReq::_internal_mutable_search_user_name() {
  
  return search_user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSearchUserReq::release_search_user_name() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMSearchUserReq.search_user_name)
  return search_user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSearchUserReq::set_allocated_search_user_name(std::string* search_user_name) {
  if (search_user_name != nullptr) {
    
  } else {
    
  }
  search_user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSearchUserReq.search_user_name)
}

// bytes attach_data = 20;
inline void IMSearchUserReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSearchUserReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSearchUserReq.attach_data)
  return _internal_attach_data();
}
inline void IMSearchUserReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSearchUserReq.attach_data)
}
inline std::string* IMSearchUserReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSearchUserReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSearchUserReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSearchUserReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSearchUserReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMSearchUserReq.attach_data)
}
inline void IMSearchUserReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSearchUserReq.attach_data)
}
inline void IMSearchUserReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSearchUserReq.attach_data)
}
inline std::string* IMSearchUserReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSearchUserReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMSearchUserReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSearchUserReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSearchUserReq.attach_data)
}

// -------------------------------------------------------------------

// IMSearchUserRsp

// string user_id = 1;
inline void IMSearchUserRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSearchUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSearchUserRsp.user_id)
  return _internal_user_id();
}
inline void IMSearchUserRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSearchUserRsp.user_id)
}
inline std::string* IMSearchUserRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSearchUserRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMSearchUserRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMSearchUserRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSearchUserRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMSearchUserRsp.user_id)
}
inline void IMSearchUserRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSearchUserRsp.user_id)
}
inline void IMSearchUserRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSearchUserRsp.user_id)
}
inline std::string* IMSearchUserRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSearchUserRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMSearchUserRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSearchUserRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSearchUserRsp.user_id)
}

// repeated .IM.BaseDefine.UserInfo search_user_list = 2;
inline int IMSearchUserRsp::_internal_search_user_list_size() const {
  return search_user_list_.size();
}
inline int IMSearchUserRsp::search_user_list_size() const {
  return _internal_search_user_list_size();
}
inline ::IM::BaseDefine::UserInfo* IMSearchUserRsp::mutable_search_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSearchUserRsp.search_user_list)
  return search_user_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMSearchUserRsp::mutable_search_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMSearchUserRsp.search_user_list)
  return &search_user_list_;
}
inline const ::IM::BaseDefine::UserInfo& IMSearchUserRsp::_internal_search_user_list(int index) const {
  return search_user_list_.Get(index);
}
inline const ::IM::BaseDefine::UserInfo& IMSearchUserRsp::search_user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSearchUserRsp.search_user_list)
  return _internal_search_user_list(index);
}
inline ::IM::BaseDefine::UserInfo* IMSearchUserRsp::_internal_add_search_user_list() {
  return search_user_list_.Add();
}
inline ::IM::BaseDefine::UserInfo* IMSearchUserRsp::add_search_user_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMSearchUserRsp.search_user_list)
  return _internal_add_search_user_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMSearchUserRsp::search_user_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMSearchUserRsp.search_user_list)
  return search_user_list_;
}

// bytes attach_data = 20;
inline void IMSearchUserRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMSearchUserRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMSearchUserRsp.attach_data)
  return _internal_attach_data();
}
inline void IMSearchUserRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMSearchUserRsp.attach_data)
}
inline std::string* IMSearchUserRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMSearchUserRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMSearchUserRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMSearchUserRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMSearchUserRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMSearchUserRsp.attach_data)
}
inline void IMSearchUserRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMSearchUserRsp.attach_data)
}
inline void IMSearchUserRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMSearchUserRsp.attach_data)
}
inline std::string* IMSearchUserRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMSearchUserRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMSearchUserRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMSearchUserRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMSearchUserRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFollowUserReq

// string user_id = 1;
inline void IMFollowUserReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFollowUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFollowUserReq.user_id)
  return _internal_user_id();
}
inline void IMFollowUserReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFollowUserReq.user_id)
}
inline std::string* IMFollowUserReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFollowUserReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFollowUserReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFollowUserReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFollowUserReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMFollowUserReq.user_id)
}
inline void IMFollowUserReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFollowUserReq.user_id)
}
inline void IMFollowUserReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFollowUserReq.user_id)
}
inline std::string* IMFollowUserReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFollowUserReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMFollowUserReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFollowUserReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFollowUserReq.user_id)
}

// string friend_id = 2;
inline void IMFollowUserReq::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFollowUserReq::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFollowUserReq.friend_id)
  return _internal_friend_id();
}
inline void IMFollowUserReq::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFollowUserReq.friend_id)
}
inline std::string* IMFollowUserReq::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFollowUserReq.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& IMFollowUserReq::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void IMFollowUserReq::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFollowUserReq::set_friend_id(std::string&& value) {
  
  friend_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMFollowUserReq.friend_id)
}
inline void IMFollowUserReq::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFollowUserReq.friend_id)
}
inline void IMFollowUserReq::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFollowUserReq.friend_id)
}
inline std::string* IMFollowUserReq::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFollowUserReq::release_friend_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMFollowUserReq.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFollowUserReq::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFollowUserReq.friend_id)
}

// bytes attach_data = 20;
inline void IMFollowUserReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFollowUserReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFollowUserReq.attach_data)
  return _internal_attach_data();
}
inline void IMFollowUserReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFollowUserReq.attach_data)
}
inline std::string* IMFollowUserReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFollowUserReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFollowUserReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFollowUserReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFollowUserReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMFollowUserReq.attach_data)
}
inline void IMFollowUserReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFollowUserReq.attach_data)
}
inline void IMFollowUserReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFollowUserReq.attach_data)
}
inline std::string* IMFollowUserReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFollowUserReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMFollowUserReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFollowUserReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFollowUserReq.attach_data)
}

// -------------------------------------------------------------------

// IMFollowUserRsp

// string user_id = 1;
inline void IMFollowUserRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFollowUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFollowUserRsp.user_id)
  return _internal_user_id();
}
inline void IMFollowUserRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFollowUserRsp.user_id)
}
inline std::string* IMFollowUserRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFollowUserRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFollowUserRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFollowUserRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFollowUserRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMFollowUserRsp.user_id)
}
inline void IMFollowUserRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFollowUserRsp.user_id)
}
inline void IMFollowUserRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFollowUserRsp.user_id)
}
inline std::string* IMFollowUserRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFollowUserRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMFollowUserRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFollowUserRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFollowUserRsp.user_id)
}

// uint32 result_code = 2;
inline void IMFollowUserRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFollowUserRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFollowUserRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFollowUserRsp.result_code)
  return _internal_result_code();
}
inline void IMFollowUserRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMFollowUserRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFollowUserRsp.result_code)
}

// bytes attach_data = 20;
inline void IMFollowUserRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFollowUserRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMFollowUserRsp.attach_data)
  return _internal_attach_data();
}
inline void IMFollowUserRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMFollowUserRsp.attach_data)
}
inline std::string* IMFollowUserRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMFollowUserRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFollowUserRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFollowUserRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFollowUserRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMFollowUserRsp.attach_data)
}
inline void IMFollowUserRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMFollowUserRsp.attach_data)
}
inline void IMFollowUserRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMFollowUserRsp.attach_data)
}
inline std::string* IMFollowUserRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFollowUserRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMFollowUserRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFollowUserRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMFollowUserRsp.attach_data)
}

// -------------------------------------------------------------------

// IMDelFriendReq

// string user_id = 1;
inline void IMDelFriendReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendReq.user_id)
  return _internal_user_id();
}
inline void IMDelFriendReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendReq.user_id)
}
inline std::string* IMDelFriendReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMDelFriendReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMDelFriendReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFriendReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFriendReq.user_id)
}
inline void IMDelFriendReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendReq.user_id)
}
inline void IMDelFriendReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendReq.user_id)
}
inline std::string* IMDelFriendReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFriendReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFriendReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFriendReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendReq.user_id)
}

// string friend_id = 2;
inline void IMDelFriendReq::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFriendReq::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendReq.friend_id)
  return _internal_friend_id();
}
inline void IMDelFriendReq::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendReq.friend_id)
}
inline std::string* IMDelFriendReq::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendReq.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& IMDelFriendReq::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void IMDelFriendReq::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFriendReq::set_friend_id(std::string&& value) {
  
  friend_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFriendReq.friend_id)
}
inline void IMDelFriendReq::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendReq.friend_id)
}
inline void IMDelFriendReq::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendReq.friend_id)
}
inline std::string* IMDelFriendReq::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFriendReq::release_friend_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFriendReq.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFriendReq::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendReq.friend_id)
}

// bytes addition_msg = 3;
inline void IMDelFriendReq::clear_addition_msg() {
  addition_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFriendReq::addition_msg() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendReq.addition_msg)
  return _internal_addition_msg();
}
inline void IMDelFriendReq::set_addition_msg(const std::string& value) {
  _internal_set_addition_msg(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendReq.addition_msg)
}
inline std::string* IMDelFriendReq::mutable_addition_msg() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendReq.addition_msg)
  return _internal_mutable_addition_msg();
}
inline const std::string& IMDelFriendReq::_internal_addition_msg() const {
  return addition_msg_.Get();
}
inline void IMDelFriendReq::_internal_set_addition_msg(const std::string& value) {
  
  addition_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFriendReq::set_addition_msg(std::string&& value) {
  
  addition_msg_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFriendReq.addition_msg)
}
inline void IMDelFriendReq::set_addition_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addition_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendReq.addition_msg)
}
inline void IMDelFriendReq::set_addition_msg(const void* value,
    size_t size) {
  
  addition_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendReq.addition_msg)
}
inline std::string* IMDelFriendReq::_internal_mutable_addition_msg() {
  
  return addition_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFriendReq::release_addition_msg() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFriendReq.addition_msg)
  return addition_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFriendReq::set_allocated_addition_msg(std::string* addition_msg) {
  if (addition_msg != nullptr) {
    
  } else {
    
  }
  addition_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addition_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendReq.addition_msg)
}

// bytes attach_data = 20;
inline void IMDelFriendReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFriendReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendReq.attach_data)
  return _internal_attach_data();
}
inline void IMDelFriendReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendReq.attach_data)
}
inline std::string* IMDelFriendReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMDelFriendReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMDelFriendReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFriendReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFriendReq.attach_data)
}
inline void IMDelFriendReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendReq.attach_data)
}
inline void IMDelFriendReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendReq.attach_data)
}
inline std::string* IMDelFriendReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFriendReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFriendReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFriendReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendReq.attach_data)
}

// -------------------------------------------------------------------

// IMDelFriendRsp

// string user_id = 1;
inline void IMDelFriendRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFriendRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRsp.user_id)
  return _internal_user_id();
}
inline void IMDelFriendRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRsp.user_id)
}
inline std::string* IMDelFriendRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMDelFriendRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMDelFriendRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFriendRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFriendRsp.user_id)
}
inline void IMDelFriendRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendRsp.user_id)
}
inline void IMDelFriendRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendRsp.user_id)
}
inline std::string* IMDelFriendRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFriendRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFriendRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFriendRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendRsp.user_id)
}

// string friend_id = 2;
inline void IMDelFriendRsp::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFriendRsp::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRsp.friend_id)
  return _internal_friend_id();
}
inline void IMDelFriendRsp::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRsp.friend_id)
}
inline std::string* IMDelFriendRsp::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendRsp.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& IMDelFriendRsp::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void IMDelFriendRsp::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFriendRsp::set_friend_id(std::string&& value) {
  
  friend_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFriendRsp.friend_id)
}
inline void IMDelFriendRsp::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendRsp.friend_id)
}
inline void IMDelFriendRsp::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendRsp.friend_id)
}
inline std::string* IMDelFriendRsp::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFriendRsp::release_friend_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFriendRsp.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFriendRsp::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendRsp.friend_id)
}

// uint32 result_code = 3;
inline void IMDelFriendRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDelFriendRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDelFriendRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRsp.result_code)
  return _internal_result_code();
}
inline void IMDelFriendRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMDelFriendRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRsp.result_code)
}

// bytes addition_msg = 4;
inline void IMDelFriendRsp::clear_addition_msg() {
  addition_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFriendRsp::addition_msg() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRsp.addition_msg)
  return _internal_addition_msg();
}
inline void IMDelFriendRsp::set_addition_msg(const std::string& value) {
  _internal_set_addition_msg(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRsp.addition_msg)
}
inline std::string* IMDelFriendRsp::mutable_addition_msg() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendRsp.addition_msg)
  return _internal_mutable_addition_msg();
}
inline const std::string& IMDelFriendRsp::_internal_addition_msg() const {
  return addition_msg_.Get();
}
inline void IMDelFriendRsp::_internal_set_addition_msg(const std::string& value) {
  
  addition_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFriendRsp::set_addition_msg(std::string&& value) {
  
  addition_msg_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFriendRsp.addition_msg)
}
inline void IMDelFriendRsp::set_addition_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addition_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendRsp.addition_msg)
}
inline void IMDelFriendRsp::set_addition_msg(const void* value,
    size_t size) {
  
  addition_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendRsp.addition_msg)
}
inline std::string* IMDelFriendRsp::_internal_mutable_addition_msg() {
  
  return addition_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFriendRsp::release_addition_msg() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFriendRsp.addition_msg)
  return addition_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFriendRsp::set_allocated_addition_msg(std::string* addition_msg) {
  if (addition_msg != nullptr) {
    
  } else {
    
  }
  addition_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addition_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendRsp.addition_msg)
}

// bytes attach_data = 20;
inline void IMDelFriendRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFriendRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFriendRsp.attach_data)
  return _internal_attach_data();
}
inline void IMDelFriendRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFriendRsp.attach_data)
}
inline std::string* IMDelFriendRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFriendRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMDelFriendRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMDelFriendRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFriendRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFriendRsp.attach_data)
}
inline void IMDelFriendRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFriendRsp.attach_data)
}
inline void IMDelFriendRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFriendRsp.attach_data)
}
inline std::string* IMDelFriendRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFriendRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFriendRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFriendRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFriendRsp.attach_data)
}

// -------------------------------------------------------------------

// IMDelFollowUserReq

// string user_id = 1;
inline void IMDelFollowUserReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFollowUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFollowUserReq.user_id)
  return _internal_user_id();
}
inline void IMDelFollowUserReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFollowUserReq.user_id)
}
inline std::string* IMDelFollowUserReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFollowUserReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMDelFollowUserReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMDelFollowUserReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFollowUserReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFollowUserReq.user_id)
}
inline void IMDelFollowUserReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFollowUserReq.user_id)
}
inline void IMDelFollowUserReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFollowUserReq.user_id)
}
inline std::string* IMDelFollowUserReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFollowUserReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFollowUserReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFollowUserReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFollowUserReq.user_id)
}

// string friend_id = 2;
inline void IMDelFollowUserReq::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFollowUserReq::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFollowUserReq.friend_id)
  return _internal_friend_id();
}
inline void IMDelFollowUserReq::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFollowUserReq.friend_id)
}
inline std::string* IMDelFollowUserReq::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFollowUserReq.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& IMDelFollowUserReq::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void IMDelFollowUserReq::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFollowUserReq::set_friend_id(std::string&& value) {
  
  friend_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFollowUserReq.friend_id)
}
inline void IMDelFollowUserReq::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFollowUserReq.friend_id)
}
inline void IMDelFollowUserReq::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFollowUserReq.friend_id)
}
inline std::string* IMDelFollowUserReq::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFollowUserReq::release_friend_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFollowUserReq.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFollowUserReq::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFollowUserReq.friend_id)
}

// bytes attach_data = 20;
inline void IMDelFollowUserReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFollowUserReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFollowUserReq.attach_data)
  return _internal_attach_data();
}
inline void IMDelFollowUserReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFollowUserReq.attach_data)
}
inline std::string* IMDelFollowUserReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFollowUserReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMDelFollowUserReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMDelFollowUserReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFollowUserReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFollowUserReq.attach_data)
}
inline void IMDelFollowUserReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFollowUserReq.attach_data)
}
inline void IMDelFollowUserReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFollowUserReq.attach_data)
}
inline std::string* IMDelFollowUserReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFollowUserReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFollowUserReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFollowUserReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFollowUserReq.attach_data)
}

// -------------------------------------------------------------------

// IMDelFollowUserRsp

// string user_id = 1;
inline void IMDelFollowUserRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFollowUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFollowUserRsp.user_id)
  return _internal_user_id();
}
inline void IMDelFollowUserRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFollowUserRsp.user_id)
}
inline std::string* IMDelFollowUserRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFollowUserRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMDelFollowUserRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMDelFollowUserRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFollowUserRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFollowUserRsp.user_id)
}
inline void IMDelFollowUserRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFollowUserRsp.user_id)
}
inline void IMDelFollowUserRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFollowUserRsp.user_id)
}
inline std::string* IMDelFollowUserRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFollowUserRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFollowUserRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFollowUserRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFollowUserRsp.user_id)
}

// string friend_id = 2;
inline void IMDelFollowUserRsp::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFollowUserRsp::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFollowUserRsp.friend_id)
  return _internal_friend_id();
}
inline void IMDelFollowUserRsp::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFollowUserRsp.friend_id)
}
inline std::string* IMDelFollowUserRsp::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFollowUserRsp.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& IMDelFollowUserRsp::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void IMDelFollowUserRsp::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFollowUserRsp::set_friend_id(std::string&& value) {
  
  friend_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFollowUserRsp.friend_id)
}
inline void IMDelFollowUserRsp::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFollowUserRsp.friend_id)
}
inline void IMDelFollowUserRsp::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFollowUserRsp.friend_id)
}
inline std::string* IMDelFollowUserRsp::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFollowUserRsp::release_friend_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFollowUserRsp.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFollowUserRsp::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFollowUserRsp.friend_id)
}

// uint32 result_code = 3;
inline void IMDelFollowUserRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDelFollowUserRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMDelFollowUserRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFollowUserRsp.result_code)
  return _internal_result_code();
}
inline void IMDelFollowUserRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMDelFollowUserRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFollowUserRsp.result_code)
}

// bytes attach_data = 20;
inline void IMDelFollowUserRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMDelFollowUserRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMDelFollowUserRsp.attach_data)
  return _internal_attach_data();
}
inline void IMDelFollowUserRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMDelFollowUserRsp.attach_data)
}
inline std::string* IMDelFollowUserRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMDelFollowUserRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMDelFollowUserRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMDelFollowUserRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMDelFollowUserRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMDelFollowUserRsp.attach_data)
}
inline void IMDelFollowUserRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMDelFollowUserRsp.attach_data)
}
inline void IMDelFollowUserRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMDelFollowUserRsp.attach_data)
}
inline std::string* IMDelFollowUserRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMDelFollowUserRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMDelFollowUserRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMDelFollowUserRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMDelFollowUserRsp.attach_data)
}

// -------------------------------------------------------------------

// IMALLOnlineUserCntReq

// string user_id = 1;
inline void IMALLOnlineUserCntReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMALLOnlineUserCntReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMALLOnlineUserCntReq.user_id)
  return _internal_user_id();
}
inline void IMALLOnlineUserCntReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMALLOnlineUserCntReq.user_id)
}
inline std::string* IMALLOnlineUserCntReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMALLOnlineUserCntReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMALLOnlineUserCntReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMALLOnlineUserCntReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMALLOnlineUserCntReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMALLOnlineUserCntReq.user_id)
}
inline void IMALLOnlineUserCntReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMALLOnlineUserCntReq.user_id)
}
inline void IMALLOnlineUserCntReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMALLOnlineUserCntReq.user_id)
}
inline std::string* IMALLOnlineUserCntReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMALLOnlineUserCntReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMALLOnlineUserCntReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMALLOnlineUserCntReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMALLOnlineUserCntReq.user_id)
}

// .IM.Buddy.StudyState study_state = 2;
inline void IMALLOnlineUserCntReq::clear_study_state() {
  study_state_ = 0;
}
inline ::IM::Buddy::StudyState IMALLOnlineUserCntReq::_internal_study_state() const {
  return static_cast< ::IM::Buddy::StudyState >(study_state_);
}
inline ::IM::Buddy::StudyState IMALLOnlineUserCntReq::study_state() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMALLOnlineUserCntReq.study_state)
  return _internal_study_state();
}
inline void IMALLOnlineUserCntReq::_internal_set_study_state(::IM::Buddy::StudyState value) {
  
  study_state_ = value;
}
inline void IMALLOnlineUserCntReq::set_study_state(::IM::Buddy::StudyState value) {
  _internal_set_study_state(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMALLOnlineUserCntReq.study_state)
}

// bytes attach_data = 20;
inline void IMALLOnlineUserCntReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMALLOnlineUserCntReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMALLOnlineUserCntReq.attach_data)
  return _internal_attach_data();
}
inline void IMALLOnlineUserCntReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMALLOnlineUserCntReq.attach_data)
}
inline std::string* IMALLOnlineUserCntReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMALLOnlineUserCntReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMALLOnlineUserCntReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMALLOnlineUserCntReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMALLOnlineUserCntReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMALLOnlineUserCntReq.attach_data)
}
inline void IMALLOnlineUserCntReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMALLOnlineUserCntReq.attach_data)
}
inline void IMALLOnlineUserCntReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMALLOnlineUserCntReq.attach_data)
}
inline std::string* IMALLOnlineUserCntReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMALLOnlineUserCntReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMALLOnlineUserCntReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMALLOnlineUserCntReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMALLOnlineUserCntReq.attach_data)
}

// -------------------------------------------------------------------

// IMALLOnlineUserCntRsp

// string user_id = 1;
inline void IMALLOnlineUserCntRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMALLOnlineUserCntRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMALLOnlineUserCntRsp.user_id)
  return _internal_user_id();
}
inline void IMALLOnlineUserCntRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMALLOnlineUserCntRsp.user_id)
}
inline std::string* IMALLOnlineUserCntRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMALLOnlineUserCntRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMALLOnlineUserCntRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMALLOnlineUserCntRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMALLOnlineUserCntRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMALLOnlineUserCntRsp.user_id)
}
inline void IMALLOnlineUserCntRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMALLOnlineUserCntRsp.user_id)
}
inline void IMALLOnlineUserCntRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMALLOnlineUserCntRsp.user_id)
}
inline std::string* IMALLOnlineUserCntRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMALLOnlineUserCntRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMALLOnlineUserCntRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMALLOnlineUserCntRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMALLOnlineUserCntRsp.user_id)
}

// uint32 online_user_cnt = 2;
inline void IMALLOnlineUserCntRsp::clear_online_user_cnt() {
  online_user_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMALLOnlineUserCntRsp::_internal_online_user_cnt() const {
  return online_user_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMALLOnlineUserCntRsp::online_user_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMALLOnlineUserCntRsp.online_user_cnt)
  return _internal_online_user_cnt();
}
inline void IMALLOnlineUserCntRsp::_internal_set_online_user_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  online_user_cnt_ = value;
}
inline void IMALLOnlineUserCntRsp::set_online_user_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_online_user_cnt(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMALLOnlineUserCntRsp.online_user_cnt)
}

// bytes attach_data = 20;
inline void IMALLOnlineUserCntRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMALLOnlineUserCntRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMALLOnlineUserCntRsp.attach_data)
  return _internal_attach_data();
}
inline void IMALLOnlineUserCntRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMALLOnlineUserCntRsp.attach_data)
}
inline std::string* IMALLOnlineUserCntRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMALLOnlineUserCntRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMALLOnlineUserCntRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMALLOnlineUserCntRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMALLOnlineUserCntRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMALLOnlineUserCntRsp.attach_data)
}
inline void IMALLOnlineUserCntRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMALLOnlineUserCntRsp.attach_data)
}
inline void IMALLOnlineUserCntRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMALLOnlineUserCntRsp.attach_data)
}
inline std::string* IMALLOnlineUserCntRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMALLOnlineUserCntRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMALLOnlineUserCntRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMALLOnlineUserCntRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMALLOnlineUserCntRsp.attach_data)
}

// -------------------------------------------------------------------

// IMUpdateUsersInfoReq

// string user_id = 1;
inline void IMUpdateUsersInfoReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUpdateUsersInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateUsersInfoReq.user_id)
  return _internal_user_id();
}
inline void IMUpdateUsersInfoReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateUsersInfoReq.user_id)
}
inline std::string* IMUpdateUsersInfoReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUpdateUsersInfoReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMUpdateUsersInfoReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMUpdateUsersInfoReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUpdateUsersInfoReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUpdateUsersInfoReq.user_id)
}
inline void IMUpdateUsersInfoReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUpdateUsersInfoReq.user_id)
}
inline void IMUpdateUsersInfoReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUpdateUsersInfoReq.user_id)
}
inline std::string* IMUpdateUsersInfoReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUpdateUsersInfoReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUpdateUsersInfoReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUpdateUsersInfoReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUpdateUsersInfoReq.user_id)
}

// .IM.BaseDefine.UserInfo user_info = 2;
inline bool IMUpdateUsersInfoReq::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool IMUpdateUsersInfoReq::has_user_info() const {
  return _internal_has_user_info();
}
inline const ::IM::BaseDefine::UserInfo& IMUpdateUsersInfoReq::_internal_user_info() const {
  const ::IM::BaseDefine::UserInfo* p = user_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::BaseDefine::UserInfo*>(
      &::IM::BaseDefine::_UserInfo_default_instance_);
}
inline const ::IM::BaseDefine::UserInfo& IMUpdateUsersInfoReq::user_info() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateUsersInfoReq.user_info)
  return _internal_user_info();
}
inline void IMUpdateUsersInfoReq::unsafe_arena_set_allocated_user_info(
    ::IM::BaseDefine::UserInfo* user_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Buddy.IMUpdateUsersInfoReq.user_info)
}
inline ::IM::BaseDefine::UserInfo* IMUpdateUsersInfoReq::release_user_info() {
  
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMUpdateUsersInfoReq::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUpdateUsersInfoReq.user_info)
  
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMUpdateUsersInfoReq::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::UserInfo>(GetArena());
    user_info_ = p;
  }
  return user_info_;
}
inline ::IM::BaseDefine::UserInfo* IMUpdateUsersInfoReq::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUpdateUsersInfoReq.user_info)
  return _internal_mutable_user_info();
}
inline void IMUpdateUsersInfoReq::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info)->GetArena();
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUpdateUsersInfoReq.user_info)
}

// bytes attach_data = 20;
inline void IMUpdateUsersInfoReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUpdateUsersInfoReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateUsersInfoReq.attach_data)
  return _internal_attach_data();
}
inline void IMUpdateUsersInfoReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateUsersInfoReq.attach_data)
}
inline std::string* IMUpdateUsersInfoReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUpdateUsersInfoReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMUpdateUsersInfoReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMUpdateUsersInfoReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUpdateUsersInfoReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUpdateUsersInfoReq.attach_data)
}
inline void IMUpdateUsersInfoReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUpdateUsersInfoReq.attach_data)
}
inline void IMUpdateUsersInfoReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUpdateUsersInfoReq.attach_data)
}
inline std::string* IMUpdateUsersInfoReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUpdateUsersInfoReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUpdateUsersInfoReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUpdateUsersInfoReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUpdateUsersInfoReq.attach_data)
}

// -------------------------------------------------------------------

// IMUpdateUsersInfoRsp

// string user_id = 1;
inline void IMUpdateUsersInfoRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUpdateUsersInfoRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateUsersInfoRsp.user_id)
  return _internal_user_id();
}
inline void IMUpdateUsersInfoRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateUsersInfoRsp.user_id)
}
inline std::string* IMUpdateUsersInfoRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUpdateUsersInfoRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMUpdateUsersInfoRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMUpdateUsersInfoRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUpdateUsersInfoRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUpdateUsersInfoRsp.user_id)
}
inline void IMUpdateUsersInfoRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUpdateUsersInfoRsp.user_id)
}
inline void IMUpdateUsersInfoRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUpdateUsersInfoRsp.user_id)
}
inline std::string* IMUpdateUsersInfoRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUpdateUsersInfoRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUpdateUsersInfoRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUpdateUsersInfoRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUpdateUsersInfoRsp.user_id)
}

// uint32 result_code = 2;
inline void IMUpdateUsersInfoRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUpdateUsersInfoRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMUpdateUsersInfoRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateUsersInfoRsp.result_code)
  return _internal_result_code();
}
inline void IMUpdateUsersInfoRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMUpdateUsersInfoRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateUsersInfoRsp.result_code)
}

// bytes attach_data = 20;
inline void IMUpdateUsersInfoRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMUpdateUsersInfoRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMUpdateUsersInfoRsp.attach_data)
  return _internal_attach_data();
}
inline void IMUpdateUsersInfoRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMUpdateUsersInfoRsp.attach_data)
}
inline std::string* IMUpdateUsersInfoRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMUpdateUsersInfoRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMUpdateUsersInfoRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMUpdateUsersInfoRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMUpdateUsersInfoRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMUpdateUsersInfoRsp.attach_data)
}
inline void IMUpdateUsersInfoRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMUpdateUsersInfoRsp.attach_data)
}
inline void IMUpdateUsersInfoRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMUpdateUsersInfoRsp.attach_data)
}
inline std::string* IMUpdateUsersInfoRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMUpdateUsersInfoRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMUpdateUsersInfoRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMUpdateUsersInfoRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMUpdateUsersInfoRsp.attach_data)
}

// -------------------------------------------------------------------

// IMRecommendListReq

// string user_id = 1;
inline void IMRecommendListReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRecommendListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecommendListReq.user_id)
  return _internal_user_id();
}
inline void IMRecommendListReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListReq.user_id)
}
inline std::string* IMRecommendListReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecommendListReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMRecommendListReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMRecommendListReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRecommendListReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecommendListReq.user_id)
}
inline void IMRecommendListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecommendListReq.user_id)
}
inline void IMRecommendListReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecommendListReq.user_id)
}
inline std::string* IMRecommendListReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRecommendListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecommendListReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRecommendListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecommendListReq.user_id)
}

// uint32 page = 2;
inline void IMRecommendListReq::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRecommendListReq::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRecommendListReq::page() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecommendListReq.page)
  return _internal_page();
}
inline void IMRecommendListReq::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void IMRecommendListReq::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListReq.page)
}

// uint32 page_size = 3;
inline void IMRecommendListReq::clear_page_size() {
  page_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRecommendListReq::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMRecommendListReq::page_size() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecommendListReq.page_size)
  return _internal_page_size();
}
inline void IMRecommendListReq::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_size_ = value;
}
inline void IMRecommendListReq::set_page_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListReq.page_size)
}

// bytes attach_data = 20;
inline void IMRecommendListReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRecommendListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecommendListReq.attach_data)
  return _internal_attach_data();
}
inline void IMRecommendListReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListReq.attach_data)
}
inline std::string* IMRecommendListReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecommendListReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMRecommendListReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMRecommendListReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRecommendListReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecommendListReq.attach_data)
}
inline void IMRecommendListReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecommendListReq.attach_data)
}
inline void IMRecommendListReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecommendListReq.attach_data)
}
inline std::string* IMRecommendListReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRecommendListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecommendListReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRecommendListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecommendListReq.attach_data)
}

// -------------------------------------------------------------------

// IMRecommendListRsp

// repeated string recommend_list = 1;
inline int IMRecommendListRsp::_internal_recommend_list_size() const {
  return recommend_list_.size();
}
inline int IMRecommendListRsp::recommend_list_size() const {
  return _internal_recommend_list_size();
}
inline void IMRecommendListRsp::clear_recommend_list() {
  recommend_list_.Clear();
}
inline std::string* IMRecommendListRsp::add_recommend_list() {
  // @@protoc_insertion_point(field_add_mutable:IM.Buddy.IMRecommendListRsp.recommend_list)
  return _internal_add_recommend_list();
}
inline const std::string& IMRecommendListRsp::_internal_recommend_list(int index) const {
  return recommend_list_.Get(index);
}
inline const std::string& IMRecommendListRsp::recommend_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecommendListRsp.recommend_list)
  return _internal_recommend_list(index);
}
inline std::string* IMRecommendListRsp::mutable_recommend_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecommendListRsp.recommend_list)
  return recommend_list_.Mutable(index);
}
inline void IMRecommendListRsp::set_recommend_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListRsp.recommend_list)
  recommend_list_.Mutable(index)->assign(value);
}
inline void IMRecommendListRsp::set_recommend_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListRsp.recommend_list)
  recommend_list_.Mutable(index)->assign(std::move(value));
}
inline void IMRecommendListRsp::set_recommend_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recommend_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecommendListRsp.recommend_list)
}
inline void IMRecommendListRsp::set_recommend_list(int index, const char* value, size_t size) {
  recommend_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecommendListRsp.recommend_list)
}
inline std::string* IMRecommendListRsp::_internal_add_recommend_list() {
  return recommend_list_.Add();
}
inline void IMRecommendListRsp::add_recommend_list(const std::string& value) {
  recommend_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMRecommendListRsp.recommend_list)
}
inline void IMRecommendListRsp::add_recommend_list(std::string&& value) {
  recommend_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IM.Buddy.IMRecommendListRsp.recommend_list)
}
inline void IMRecommendListRsp::add_recommend_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recommend_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Buddy.IMRecommendListRsp.recommend_list)
}
inline void IMRecommendListRsp::add_recommend_list(const char* value, size_t size) {
  recommend_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Buddy.IMRecommendListRsp.recommend_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IMRecommendListRsp::recommend_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMRecommendListRsp.recommend_list)
  return recommend_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IMRecommendListRsp::mutable_recommend_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMRecommendListRsp.recommend_list)
  return &recommend_list_;
}

// repeated string recommend_nick_list = 2;
inline int IMRecommendListRsp::_internal_recommend_nick_list_size() const {
  return recommend_nick_list_.size();
}
inline int IMRecommendListRsp::recommend_nick_list_size() const {
  return _internal_recommend_nick_list_size();
}
inline void IMRecommendListRsp::clear_recommend_nick_list() {
  recommend_nick_list_.Clear();
}
inline std::string* IMRecommendListRsp::add_recommend_nick_list() {
  // @@protoc_insertion_point(field_add_mutable:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
  return _internal_add_recommend_nick_list();
}
inline const std::string& IMRecommendListRsp::_internal_recommend_nick_list(int index) const {
  return recommend_nick_list_.Get(index);
}
inline const std::string& IMRecommendListRsp::recommend_nick_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
  return _internal_recommend_nick_list(index);
}
inline std::string* IMRecommendListRsp::mutable_recommend_nick_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
  return recommend_nick_list_.Mutable(index);
}
inline void IMRecommendListRsp::set_recommend_nick_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
  recommend_nick_list_.Mutable(index)->assign(value);
}
inline void IMRecommendListRsp::set_recommend_nick_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
  recommend_nick_list_.Mutable(index)->assign(std::move(value));
}
inline void IMRecommendListRsp::set_recommend_nick_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recommend_nick_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
}
inline void IMRecommendListRsp::set_recommend_nick_list(int index, const char* value, size_t size) {
  recommend_nick_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
}
inline std::string* IMRecommendListRsp::_internal_add_recommend_nick_list() {
  return recommend_nick_list_.Add();
}
inline void IMRecommendListRsp::add_recommend_nick_list(const std::string& value) {
  recommend_nick_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
}
inline void IMRecommendListRsp::add_recommend_nick_list(std::string&& value) {
  recommend_nick_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
}
inline void IMRecommendListRsp::add_recommend_nick_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recommend_nick_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
}
inline void IMRecommendListRsp::add_recommend_nick_list(const char* value, size_t size) {
  recommend_nick_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IMRecommendListRsp::recommend_nick_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
  return recommend_nick_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IMRecommendListRsp::mutable_recommend_nick_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMRecommendListRsp.recommend_nick_list)
  return &recommend_nick_list_;
}

// bytes attach_data = 20;
inline void IMRecommendListRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMRecommendListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMRecommendListRsp.attach_data)
  return _internal_attach_data();
}
inline void IMRecommendListRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMRecommendListRsp.attach_data)
}
inline std::string* IMRecommendListRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMRecommendListRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMRecommendListRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMRecommendListRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMRecommendListRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMRecommendListRsp.attach_data)
}
inline void IMRecommendListRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMRecommendListRsp.attach_data)
}
inline void IMRecommendListRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMRecommendListRsp.attach_data)
}
inline std::string* IMRecommendListRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMRecommendListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMRecommendListRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMRecommendListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMRecommendListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetALLOnlineUserReq

// string user_id = 1;
inline void IMGetALLOnlineUserReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMGetALLOnlineUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetALLOnlineUserReq.user_id)
  return _internal_user_id();
}
inline void IMGetALLOnlineUserReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetALLOnlineUserReq.user_id)
}
inline std::string* IMGetALLOnlineUserReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetALLOnlineUserReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMGetALLOnlineUserReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMGetALLOnlineUserReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMGetALLOnlineUserReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMGetALLOnlineUserReq.user_id)
}
inline void IMGetALLOnlineUserReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMGetALLOnlineUserReq.user_id)
}
inline void IMGetALLOnlineUserReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMGetALLOnlineUserReq.user_id)
}
inline std::string* IMGetALLOnlineUserReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMGetALLOnlineUserReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMGetALLOnlineUserReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMGetALLOnlineUserReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMGetALLOnlineUserReq.user_id)
}

// bytes attach_data = 20;
inline void IMGetALLOnlineUserReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMGetALLOnlineUserReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetALLOnlineUserReq.attach_data)
  return _internal_attach_data();
}
inline void IMGetALLOnlineUserReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetALLOnlineUserReq.attach_data)
}
inline std::string* IMGetALLOnlineUserReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetALLOnlineUserReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMGetALLOnlineUserReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetALLOnlineUserReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMGetALLOnlineUserReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMGetALLOnlineUserReq.attach_data)
}
inline void IMGetALLOnlineUserReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMGetALLOnlineUserReq.attach_data)
}
inline void IMGetALLOnlineUserReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMGetALLOnlineUserReq.attach_data)
}
inline std::string* IMGetALLOnlineUserReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMGetALLOnlineUserReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMGetALLOnlineUserReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMGetALLOnlineUserReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMGetALLOnlineUserReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetALLOnlineUserRsp

// string user_id = 1;
inline void IMGetALLOnlineUserRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMGetALLOnlineUserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetALLOnlineUserRsp.user_id)
  return _internal_user_id();
}
inline void IMGetALLOnlineUserRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetALLOnlineUserRsp.user_id)
}
inline std::string* IMGetALLOnlineUserRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetALLOnlineUserRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMGetALLOnlineUserRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMGetALLOnlineUserRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMGetALLOnlineUserRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMGetALLOnlineUserRsp.user_id)
}
inline void IMGetALLOnlineUserRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMGetALLOnlineUserRsp.user_id)
}
inline void IMGetALLOnlineUserRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMGetALLOnlineUserRsp.user_id)
}
inline std::string* IMGetALLOnlineUserRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMGetALLOnlineUserRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMGetALLOnlineUserRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMGetALLOnlineUserRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMGetALLOnlineUserRsp.user_id)
}

// repeated .IM.BaseDefine.UserInfo user_list = 2;
inline int IMGetALLOnlineUserRsp::_internal_user_list_size() const {
  return user_list_.size();
}
inline int IMGetALLOnlineUserRsp::user_list_size() const {
  return _internal_user_list_size();
}
inline ::IM::BaseDefine::UserInfo* IMGetALLOnlineUserRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetALLOnlineUserRsp.user_list)
  return user_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMGetALLOnlineUserRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Buddy.IMGetALLOnlineUserRsp.user_list)
  return &user_list_;
}
inline const ::IM::BaseDefine::UserInfo& IMGetALLOnlineUserRsp::_internal_user_list(int index) const {
  return user_list_.Get(index);
}
inline const ::IM::BaseDefine::UserInfo& IMGetALLOnlineUserRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetALLOnlineUserRsp.user_list)
  return _internal_user_list(index);
}
inline ::IM::BaseDefine::UserInfo* IMGetALLOnlineUserRsp::_internal_add_user_list() {
  return user_list_.Add();
}
inline ::IM::BaseDefine::UserInfo* IMGetALLOnlineUserRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Buddy.IMGetALLOnlineUserRsp.user_list)
  return _internal_add_user_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMGetALLOnlineUserRsp::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Buddy.IMGetALLOnlineUserRsp.user_list)
  return user_list_;
}

// bytes attach_data = 20;
inline void IMGetALLOnlineUserRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMGetALLOnlineUserRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Buddy.IMGetALLOnlineUserRsp.attach_data)
  return _internal_attach_data();
}
inline void IMGetALLOnlineUserRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Buddy.IMGetALLOnlineUserRsp.attach_data)
}
inline std::string* IMGetALLOnlineUserRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Buddy.IMGetALLOnlineUserRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMGetALLOnlineUserRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMGetALLOnlineUserRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMGetALLOnlineUserRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Buddy.IMGetALLOnlineUserRsp.attach_data)
}
inline void IMGetALLOnlineUserRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Buddy.IMGetALLOnlineUserRsp.attach_data)
}
inline void IMGetALLOnlineUserRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Buddy.IMGetALLOnlineUserRsp.attach_data)
}
inline std::string* IMGetALLOnlineUserRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMGetALLOnlineUserRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Buddy.IMGetALLOnlineUserRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMGetALLOnlineUserRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Buddy.IMGetALLOnlineUserRsp.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Buddy
}  // namespace IM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::IM::Buddy::StudyState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eBuddy_2eproto
