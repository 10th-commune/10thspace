// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eBaseDefine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eBaseDefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eBaseDefine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eBaseDefine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace BaseDefine {
class BlogInfo;
class BlogInfoDefaultTypeInternal;
extern BlogInfoDefaultTypeInternal _BlogInfo_default_instance_;
class ContactSessionInfo;
class ContactSessionInfoDefaultTypeInternal;
extern ContactSessionInfoDefaultTypeInternal _ContactSessionInfo_default_instance_;
class DepartInfo;
class DepartInfoDefaultTypeInternal;
extern DepartInfoDefaultTypeInternal _DepartInfo_default_instance_;
class GroupInfo;
class GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupVersionInfo;
class GroupVersionInfoDefaultTypeInternal;
extern GroupVersionInfoDefaultTypeInternal _GroupVersionInfo_default_instance_;
class IpAddr;
class IpAddrDefaultTypeInternal;
extern IpAddrDefaultTypeInternal _IpAddr_default_instance_;
class MsgInfo;
class MsgInfoDefaultTypeInternal;
extern MsgInfoDefaultTypeInternal _MsgInfo_default_instance_;
class OfflineFileInfo;
class OfflineFileInfoDefaultTypeInternal;
extern OfflineFileInfoDefaultTypeInternal _OfflineFileInfo_default_instance_;
class PushResult;
class PushResultDefaultTypeInternal;
extern PushResultDefaultTypeInternal _PushResult_default_instance_;
class PushShieldStatus;
class PushShieldStatusDefaultTypeInternal;
extern PushShieldStatusDefaultTypeInternal _PushShieldStatus_default_instance_;
class ServerUserStat;
class ServerUserStatDefaultTypeInternal;
extern ServerUserStatDefaultTypeInternal _ServerUserStat_default_instance_;
class ShieldStatus;
class ShieldStatusDefaultTypeInternal;
extern ShieldStatusDefaultTypeInternal _ShieldStatus_default_instance_;
class UnreadInfo;
class UnreadInfoDefaultTypeInternal;
extern UnreadInfoDefaultTypeInternal _UnreadInfo_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserStat;
class UserStatDefaultTypeInternal;
extern UserStatDefaultTypeInternal _UserStat_default_instance_;
class UserTokenInfo;
class UserTokenInfoDefaultTypeInternal;
extern UserTokenInfoDefaultTypeInternal _UserTokenInfo_default_instance_;
}  // namespace BaseDefine
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::BaseDefine::BlogInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::BlogInfo>(Arena*);
template<> ::IM::BaseDefine::ContactSessionInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::ContactSessionInfo>(Arena*);
template<> ::IM::BaseDefine::DepartInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::DepartInfo>(Arena*);
template<> ::IM::BaseDefine::GroupInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::GroupInfo>(Arena*);
template<> ::IM::BaseDefine::GroupVersionInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::GroupVersionInfo>(Arena*);
template<> ::IM::BaseDefine::IpAddr* Arena::CreateMaybeMessage<::IM::BaseDefine::IpAddr>(Arena*);
template<> ::IM::BaseDefine::MsgInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::MsgInfo>(Arena*);
template<> ::IM::BaseDefine::OfflineFileInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::OfflineFileInfo>(Arena*);
template<> ::IM::BaseDefine::PushResult* Arena::CreateMaybeMessage<::IM::BaseDefine::PushResult>(Arena*);
template<> ::IM::BaseDefine::PushShieldStatus* Arena::CreateMaybeMessage<::IM::BaseDefine::PushShieldStatus>(Arena*);
template<> ::IM::BaseDefine::ServerUserStat* Arena::CreateMaybeMessage<::IM::BaseDefine::ServerUserStat>(Arena*);
template<> ::IM::BaseDefine::ShieldStatus* Arena::CreateMaybeMessage<::IM::BaseDefine::ShieldStatus>(Arena*);
template<> ::IM::BaseDefine::UnreadInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::UnreadInfo>(Arena*);
template<> ::IM::BaseDefine::UserInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::UserInfo>(Arena*);
template<> ::IM::BaseDefine::UserStat* Arena::CreateMaybeMessage<::IM::BaseDefine::UserStat>(Arena*);
template<> ::IM::BaseDefine::UserTokenInfo* Arena::CreateMaybeMessage<::IM::BaseDefine::UserTokenInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace BaseDefine {

enum ServiceID : int {
  PB3_UNUSE = 0,
  SID_LOGIN = 1,
  SID_BUDDY_LIST = 2,
  SID_MSG = 3,
  SID_GROUP = 4,
  SID_FILE = 5,
  SID_SWITCH_SERVICE = 6,
  SID_OTHER = 7,
  SID_INTERNAL = 8,
  SID_REGISTER = 9,
  SID_BLOG = 10,
  SID_SYS_MSG = 11,
  SID_SERVER = 12,
  SID_FRIENDSHIP = 16,
  ServiceID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServiceID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServiceID_IsValid(int value);
constexpr ServiceID ServiceID_MIN = PB3_UNUSE;
constexpr ServiceID ServiceID_MAX = SID_FRIENDSHIP;
constexpr int ServiceID_ARRAYSIZE = ServiceID_MAX + 1;

const std::string& ServiceID_Name(ServiceID value);
template<typename T>
inline const std::string& ServiceID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceID_Name.");
  return ServiceID_Name(static_cast<ServiceID>(enum_t_value));
}
bool ServiceID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceID* value);
enum FriendShipCmdID : int {
  PB3_UNUSE1 = 0,
  CID_FRIEND_SHIP_ADD_REQ = 4097,
  CID_FRIEND_SHIP_ADD_RES = 4098,
  CID_FRIEND_SHIP_ADD_NOTIFY = 4099,
  CID_FRIEND_SHIP_LIST_REQ = 4100,
  CID_FRIEND_SHIP_LIST_RES = 4101,
  CID_FRIEND_SHIP_UPDATE_RELATION_REQ = 4102,
  CID_FRIEND_SHIP_UPDATE_RELATION_RES = 4103,
  CID_FRIEND_SHIP_GET_UNAGREE_FRIEND_LIST_REQ = 4104,
  CID_FRIEND_SHIP_GET_UNAGREE_FRIEND_LIST_RES = 4105,
  CID_FRIEND_SHIP_SEARCH_FRIEND_REQ = 4106,
  CID_FRIEND_SHIP_SEARCH_FRIEND_RES = 4107,
  FriendShipCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FriendShipCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FriendShipCmdID_IsValid(int value);
constexpr FriendShipCmdID FriendShipCmdID_MIN = PB3_UNUSE1;
constexpr FriendShipCmdID FriendShipCmdID_MAX = CID_FRIEND_SHIP_SEARCH_FRIEND_RES;
constexpr int FriendShipCmdID_ARRAYSIZE = FriendShipCmdID_MAX + 1;

const std::string& FriendShipCmdID_Name(FriendShipCmdID value);
template<typename T>
inline const std::string& FriendShipCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FriendShipCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FriendShipCmdID_Name.");
  return FriendShipCmdID_Name(static_cast<FriendShipCmdID>(enum_t_value));
}
bool FriendShipCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FriendShipCmdID* value);
enum LoginCmdID : int {
  PB3_UNUSE2 = 0,
  CID_LOGIN_REQ_MSGSERVER = 257,
  CID_LOGIN_RES_MSGSERVER = 258,
  CID_LOGIN_REQ_USERLOGIN = 259,
  CID_LOGIN_RES_USERLOGIN = 260,
  CID_LOGIN_REQ_LOGINOUT = 261,
  CID_LOGIN_RES_LOGINOUT = 262,
  CID_LOGIN_KICK_USER = 263,
  CID_LOGIN_REQ_DEVICETOKEN = 264,
  CID_LOGIN_RES_DEVICETOKEN = 265,
  CID_LOGIN_REQ_KICKPCCLIENT = 266,
  CID_LOGIN_RES_KICKPCCLIENT = 267,
  CID_LOGIN_REQ_PUSH_SHIELD = 268,
  CID_LOGIN_RES_PUSH_SHIELD = 269,
  CID_LOGIN_REQ_QUERY_PUSH_SHIELD = 270,
  CID_LOGIN_RES_QUERY_PUSH_SHIELD = 271,
  LoginCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginCmdID_IsValid(int value);
constexpr LoginCmdID LoginCmdID_MIN = PB3_UNUSE2;
constexpr LoginCmdID LoginCmdID_MAX = CID_LOGIN_RES_QUERY_PUSH_SHIELD;
constexpr int LoginCmdID_ARRAYSIZE = LoginCmdID_MAX + 1;

const std::string& LoginCmdID_Name(LoginCmdID value);
template<typename T>
inline const std::string& LoginCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginCmdID_Name.");
  return LoginCmdID_Name(static_cast<LoginCmdID>(enum_t_value));
}
bool LoginCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoginCmdID* value);
enum BuddyListCmdID : int {
  PB3_UNUSE3 = 0,
  CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST = 513,
  CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE = 514,
  CID_BUDDY_LIST_STATUS_NOTIFY = 515,
  CID_BUDDY_LIST_USER_INFO_REQUEST = 516,
  CID_BUDDY_LIST_USER_INFO_RESPONSE = 517,
  CID_BUDDY_LIST_REMOVE_SESSION_REQ = 518,
  CID_BUDDY_LIST_REMOVE_SESSION_RES = 519,
  CID_BUDDY_LIST_ALL_USER_REQUEST = 520,
  CID_BUDDY_LIST_ALL_USER_RESPONSE = 521,
  CID_BUDDY_LIST_USERS_STATUS_REQUEST = 522,
  CID_BUDDY_LIST_USERS_STATUS_RESPONSE = 523,
  CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST = 524,
  CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE = 525,
  CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY = 526,
  CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY = 527,
  CID_BUDDY_LIST_DEPARTMENT_REQUEST = 528,
  CID_BUDDY_LIST_DEPARTMENT_RESPONSE = 529,
  CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY = 530,
  CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST = 531,
  CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE = 532,
  CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY = 533,
  CID_BUDDY_LIST_SEARCH_USER_REQUEST = 534,
  CID_BUDDY_LIST_SEARCH_USER_RESPONSE = 535,
  CID_BUDDY_LIST_FOLLOW_USER_REQUEST = 544,
  CID_BUDDY_LIST_FOLLOW_USER_RESPONSE = 545,
  CID_BUDDY_LIST_DEL_FRIEND_REQUEST = 546,
  CID_BUDDY_LIST_DEL_FRIEND_RESPONSE = 547,
  CID_BUDDY_LIST_DEL_FOLLOW_USER_REQUEST = 548,
  CID_BUDDY_LIST_DEL_FOLLOW_USER_RESPONSE = 549,
  CID_BUDDY_LIST_ALL_ONLINE_USER_CNT_REQUEST = 552,
  CID_BUDDY_LIST_ALL_ONLINE_USER_CNT_RESPONSE = 553,
  CID_BUDDY_LIST_UPDATE_USER_INFO_REQUEST = 554,
  CID_BUDDY_LIST_UPDATE_USER_INFO_RESPONSE = 555,
  CID_BUDDY_LIST_RECOMMEND_LIST_REQUEST = 556,
  CID_BUDDY_LIST_RECOMMEND_LIST_RESPONSE = 557,
  CID_BUDDY_LIST_GET_ALL_ONLINE_USER_INFO_REQUEST = 558,
  CID_BUDDY_LIST_GET_ALL_ONLINE_USER_INFO_RESPONSE = 559,
  BuddyListCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BuddyListCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BuddyListCmdID_IsValid(int value);
constexpr BuddyListCmdID BuddyListCmdID_MIN = PB3_UNUSE3;
constexpr BuddyListCmdID BuddyListCmdID_MAX = CID_BUDDY_LIST_GET_ALL_ONLINE_USER_INFO_RESPONSE;
constexpr int BuddyListCmdID_ARRAYSIZE = BuddyListCmdID_MAX + 1;

const std::string& BuddyListCmdID_Name(BuddyListCmdID value);
template<typename T>
inline const std::string& BuddyListCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BuddyListCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BuddyListCmdID_Name.");
  return BuddyListCmdID_Name(static_cast<BuddyListCmdID>(enum_t_value));
}
bool BuddyListCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BuddyListCmdID* value);
enum MessageCmdID : int {
  PB3_UNUSE4 = 0,
  CID_MSG_DATA = 769,
  CID_MSG_DATA_ACK = 770,
  CID_MSG_READ_ACK = 771,
  CID_MSG_READ_NOTIFY = 772,
  CID_MSG_TIME_REQUEST = 773,
  CID_MSG_TIME_RESPONSE = 774,
  CID_MSG_UNREAD_CNT_REQUEST = 775,
  CID_MSG_UNREAD_CNT_RESPONSE = 776,
  CID_MSG_LIST_REQUEST = 777,
  CID_MSG_LIST_RESPONSE = 778,
  CID_MSG_GET_LATEST_MSG_ID_REQ = 779,
  CID_MSG_GET_LATEST_MSG_ID_RSP = 780,
  CID_MSG_GET_BY_MSG_ID_REQ = 781,
  CID_MSG_GET_BY_MSG_ID_RES = 782,
  MessageCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageCmdID_IsValid(int value);
constexpr MessageCmdID MessageCmdID_MIN = PB3_UNUSE4;
constexpr MessageCmdID MessageCmdID_MAX = CID_MSG_GET_BY_MSG_ID_RES;
constexpr int MessageCmdID_ARRAYSIZE = MessageCmdID_MAX + 1;

const std::string& MessageCmdID_Name(MessageCmdID value);
template<typename T>
inline const std::string& MessageCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageCmdID_Name.");
  return MessageCmdID_Name(static_cast<MessageCmdID>(enum_t_value));
}
bool MessageCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageCmdID* value);
enum GroupCmdID : int {
  PB3_UNUSE5 = 0,
  CID_GROUP_NORMAL_LIST_REQUEST = 1025,
  CID_GROUP_NORMAL_LIST_RESPONSE = 1026,
  CID_GROUP_INFO_REQUEST = 1027,
  CID_GROUP_INFO_RESPONSE = 1028,
  CID_GROUP_CREATE_REQUEST = 1029,
  CID_GROUP_CREATE_RESPONSE = 1030,
  CID_GROUP_CHANGE_MEMBER_REQUEST = 1031,
  CID_GROUP_CHANGE_MEMBER_RESPONSE = 1032,
  CID_GROUP_SHIELD_GROUP_REQUEST = 1033,
  CID_GROUP_SHIELD_GROUP_RESPONSE = 1034,
  CID_GROUP_CHANGE_MEMBER_NOTIFY = 1035,
  CID_GROUP_RECOMMAND_LIST_INFO_REQUEST = 1036,
  CID_GROUP_RECOMMAND_LIST_INFO_RESPONSE = 1037,
  GroupCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GroupCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GroupCmdID_IsValid(int value);
constexpr GroupCmdID GroupCmdID_MIN = PB3_UNUSE5;
constexpr GroupCmdID GroupCmdID_MAX = CID_GROUP_RECOMMAND_LIST_INFO_RESPONSE;
constexpr int GroupCmdID_ARRAYSIZE = GroupCmdID_MAX + 1;

const std::string& GroupCmdID_Name(GroupCmdID value);
template<typename T>
inline const std::string& GroupCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupCmdID_Name.");
  return GroupCmdID_Name(static_cast<GroupCmdID>(enum_t_value));
}
bool GroupCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupCmdID* value);
enum FileCmdID : int {
  PB3_UNUSE6 = 0,
  CID_FILE_LOGIN_REQ = 1281,
  CID_FILE_LOGIN_RES = 1282,
  CID_FILE_STATE = 1283,
  CID_FILE_PULL_DATA_REQ = 1284,
  CID_FILE_PULL_DATA_RSP = 1285,
  CID_FILE_REQUEST = 1286,
  CID_FILE_RESPONSE = 1287,
  CID_FILE_NOTIFY = 1288,
  CID_FILE_HAS_OFFLINE_REQ = 1289,
  CID_FILE_HAS_OFFLINE_RES = 1290,
  CID_FILE_ADD_OFFLINE_REQ = 1291,
  CID_FILE_DEL_OFFLINE_REQ = 1292,
  FileCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileCmdID_IsValid(int value);
constexpr FileCmdID FileCmdID_MIN = PB3_UNUSE6;
constexpr FileCmdID FileCmdID_MAX = CID_FILE_DEL_OFFLINE_REQ;
constexpr int FileCmdID_ARRAYSIZE = FileCmdID_MAX + 1;

const std::string& FileCmdID_Name(FileCmdID value);
template<typename T>
inline const std::string& FileCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileCmdID_Name.");
  return FileCmdID_Name(static_cast<FileCmdID>(enum_t_value));
}
bool FileCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileCmdID* value);
enum SwitchServiceCmdID : int {
  PB3_UNUSE7 = 0,
  CID_SWITCH_P2P_CMD = 1537,
  SwitchServiceCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SwitchServiceCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SwitchServiceCmdID_IsValid(int value);
constexpr SwitchServiceCmdID SwitchServiceCmdID_MIN = PB3_UNUSE7;
constexpr SwitchServiceCmdID SwitchServiceCmdID_MAX = CID_SWITCH_P2P_CMD;
constexpr int SwitchServiceCmdID_ARRAYSIZE = SwitchServiceCmdID_MAX + 1;

const std::string& SwitchServiceCmdID_Name(SwitchServiceCmdID value);
template<typename T>
inline const std::string& SwitchServiceCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SwitchServiceCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SwitchServiceCmdID_Name.");
  return SwitchServiceCmdID_Name(static_cast<SwitchServiceCmdID>(enum_t_value));
}
bool SwitchServiceCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SwitchServiceCmdID* value);
enum OtherCmdID : int {
  PB3_UNUSE8 = 0,
  CID_OTHER_HEARTBEAT = 1793,
  CID_OTHER_STOP_RECV_PACKET = 1794,
  CID_OTHER_VALIDATE_REQ = 1795,
  CID_OTHER_VALIDATE_RSP = 1796,
  CID_OTHER_GET_DEVICE_TOKEN_REQ = 1797,
  CID_OTHER_GET_DEVICE_TOKEN_RSP = 1798,
  CID_OTHER_ROLE_SET = 1799,
  CID_OTHER_ONLINE_USER_INFO = 1800,
  CID_OTHER_MSG_SERV_INFO = 1801,
  CID_OTHER_USER_STATUS_UPDATE = 1802,
  CID_OTHER_USER_CNT_UPDATE = 1803,
  CID_OTHER_SERVER_KICK_USER = 1805,
  CID_OTHER_LOGIN_STATUS_NOTIFY = 1806,
  CID_OTHER_PUSH_TO_USER_REQ = 1807,
  CID_OTHER_PUSH_TO_USER_RSP = 1808,
  CID_OTHER_GET_SHIELD_REQ = 1809,
  CID_OTHER_GET_SHIELD_RSP = 1810,
  CID_OTHER_FILE_TRANSFER_REQ = 1841,
  CID_OTHER_FILE_TRANSFER_RSP = 1842,
  CID_OTHER_FILE_SERVER_IP_REQ = 1843,
  CID_OTHER_FILE_SERVER_IP_RSP = 1844,
  CID_OTHER_REGISTER_REQ = 1845,
  CID_OTHER_REGISTER_RSP = 1846,
  OtherCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OtherCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OtherCmdID_IsValid(int value);
constexpr OtherCmdID OtherCmdID_MIN = PB3_UNUSE8;
constexpr OtherCmdID OtherCmdID_MAX = CID_OTHER_REGISTER_RSP;
constexpr int OtherCmdID_ARRAYSIZE = OtherCmdID_MAX + 1;

const std::string& OtherCmdID_Name(OtherCmdID value);
template<typename T>
inline const std::string& OtherCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OtherCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OtherCmdID_Name.");
  return OtherCmdID_Name(static_cast<OtherCmdID>(enum_t_value));
}
bool OtherCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OtherCmdID* value);
enum RegisterCmdID : int {
  PB3_UNUSE9 = 0,
  CID_REGISTER_REQ = 2305,
  CID_REGISTER_RSP = 2306,
  RegisterCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RegisterCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RegisterCmdID_IsValid(int value);
constexpr RegisterCmdID RegisterCmdID_MIN = PB3_UNUSE9;
constexpr RegisterCmdID RegisterCmdID_MAX = CID_REGISTER_RSP;
constexpr int RegisterCmdID_ARRAYSIZE = RegisterCmdID_MAX + 1;

const std::string& RegisterCmdID_Name(RegisterCmdID value);
template<typename T>
inline const std::string& RegisterCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterCmdID_Name.");
  return RegisterCmdID_Name(static_cast<RegisterCmdID>(enum_t_value));
}
bool RegisterCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterCmdID* value);
enum BlogCmdID : int {
  PB3_UNUSE10 = 0,
  CID_BLOG_SEND = 2561,
  CID_BLOG_SEND_ACK = 2562,
  CID_BLOG_GET_LIST_REQUEST = 2563,
  CID_BLOG_GET_LIST_RESPONSE = 2564,
  CID_BLOG_ADD_COMMENT_REQUEST = 2565,
  CID_BLOG_ADD_COMMENT_RESPONSE = 2566,
  CID_BLOG_GET_COMMENT_REQUEST = 2567,
  CID_BLOG_GET_COMMENT_RESPONSE = 2568,
  BlogCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlogCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlogCmdID_IsValid(int value);
constexpr BlogCmdID BlogCmdID_MIN = PB3_UNUSE10;
constexpr BlogCmdID BlogCmdID_MAX = CID_BLOG_GET_COMMENT_RESPONSE;
constexpr int BlogCmdID_ARRAYSIZE = BlogCmdID_MAX + 1;

const std::string& BlogCmdID_Name(BlogCmdID value);
template<typename T>
inline const std::string& BlogCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlogCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlogCmdID_Name.");
  return BlogCmdID_Name(static_cast<BlogCmdID>(enum_t_value));
}
bool BlogCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlogCmdID* value);
enum SysMsgCmdID : int {
  PB3_UNUSE11 = 0,
  CID_SYS_MSG_SEND_DATA_REQUEST = 2817,
  CID_SYS_MSG_SEND_DATA_RESPONSE = 2818,
  CID_SYS_MSG_DATA = 2819,
  CID_SYS_MSG_GET_UNREAD_CNT_REQUEST = 2820,
  CID_SYS_MSG_GET_UNREAD_CNT_RESPONSE = 2821,
  CID_SYS_MSG_GET_DATA_REQUEST = 2822,
  CID_SYS_MSG_GET_DATA_RESPONSE = 2823,
  CID_SYS_MSG_READ_ACK = 2824,
  CID_SYS_GET_STUDY_TIME_REQUEST = 2825,
  CID_SYS_GET_STUDY_TIME_RESPONSE = 2826,
  SysMsgCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SysMsgCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SysMsgCmdID_IsValid(int value);
constexpr SysMsgCmdID SysMsgCmdID_MIN = PB3_UNUSE11;
constexpr SysMsgCmdID SysMsgCmdID_MAX = CID_SYS_GET_STUDY_TIME_RESPONSE;
constexpr int SysMsgCmdID_ARRAYSIZE = SysMsgCmdID_MAX + 1;

const std::string& SysMsgCmdID_Name(SysMsgCmdID value);
template<typename T>
inline const std::string& SysMsgCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SysMsgCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SysMsgCmdID_Name.");
  return SysMsgCmdID_Name(static_cast<SysMsgCmdID>(enum_t_value));
}
bool SysMsgCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SysMsgCmdID* value);
enum ServerCmdID : int {
  PB3_UNUSE12 = 0,
  CID_SERVER_SAVE_TIME_CMD = 3073,
  CID_ONLINEUSER_INFO = 3074,
  ServerCmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerCmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerCmdID_IsValid(int value);
constexpr ServerCmdID ServerCmdID_MIN = PB3_UNUSE12;
constexpr ServerCmdID ServerCmdID_MAX = CID_ONLINEUSER_INFO;
constexpr int ServerCmdID_ARRAYSIZE = ServerCmdID_MAX + 1;

const std::string& ServerCmdID_Name(ServerCmdID value);
template<typename T>
inline const std::string& ServerCmdID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerCmdID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerCmdID_Name.");
  return ServerCmdID_Name(static_cast<ServerCmdID>(enum_t_value));
}
bool ServerCmdID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCmdID* value);
enum ResultType : int {
  REFUSE_REASON_NONE = 0,
  REFUSE_REASON_NO_MSG_SERVER = 1,
  REFUSE_REASON_MSG_SERVER_FULL = 2,
  REFUSE_REASON_NO_DB_SERVER = 3,
  REFUSE_REASON_NO_LOGIN_SERVER = 4,
  REFUSE_REASON_NO_ROUTE_SERVER = 5,
  REFUSE_REASON_DB_VALIDATE_FAILED = 6,
  REFUSE_REASON_VERSION_TOO_OLD = 7,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResultType_IsValid(int value);
constexpr ResultType ResultType_MIN = REFUSE_REASON_NONE;
constexpr ResultType ResultType_MAX = REFUSE_REASON_VERSION_TOO_OLD;
constexpr int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const std::string& ResultType_Name(ResultType value);
template<typename T>
inline const std::string& ResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResultType_Name.");
  return ResultType_Name(static_cast<ResultType>(enum_t_value));
}
bool ResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResultType* value);
enum KickReasonType : int {
  PB3_UNUSE13 = 0,
  KICK_REASON_DUPLICATE_USER = 1,
  KICK_REASON_MOBILE_KICK = 2,
  KickReasonType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KickReasonType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KickReasonType_IsValid(int value);
constexpr KickReasonType KickReasonType_MIN = PB3_UNUSE13;
constexpr KickReasonType KickReasonType_MAX = KICK_REASON_MOBILE_KICK;
constexpr int KickReasonType_ARRAYSIZE = KickReasonType_MAX + 1;

const std::string& KickReasonType_Name(KickReasonType value);
template<typename T>
inline const std::string& KickReasonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KickReasonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KickReasonType_Name.");
  return KickReasonType_Name(static_cast<KickReasonType>(enum_t_value));
}
bool KickReasonType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KickReasonType* value);
enum OnlineListType : int {
  PB3_UNUSE14 = 0,
  ONLINE_LIST_TYPE_FRIEND_LIST = 1,
  OnlineListType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OnlineListType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OnlineListType_IsValid(int value);
constexpr OnlineListType OnlineListType_MIN = PB3_UNUSE14;
constexpr OnlineListType OnlineListType_MAX = ONLINE_LIST_TYPE_FRIEND_LIST;
constexpr int OnlineListType_ARRAYSIZE = OnlineListType_MAX + 1;

const std::string& OnlineListType_Name(OnlineListType value);
template<typename T>
inline const std::string& OnlineListType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OnlineListType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OnlineListType_Name.");
  return OnlineListType_Name(static_cast<OnlineListType>(enum_t_value));
}
bool OnlineListType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OnlineListType* value);
enum UserStatType : int {
  PB3_UNUSE15 = 0,
  USER_STATUS_ONLINE = 1,
  USER_STATUS_OFFLINE = 2,
  USER_STATUS_LEAVE = 3,
  UserStatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserStatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserStatType_IsValid(int value);
constexpr UserStatType UserStatType_MIN = PB3_UNUSE15;
constexpr UserStatType UserStatType_MAX = USER_STATUS_LEAVE;
constexpr int UserStatType_ARRAYSIZE = UserStatType_MAX + 1;

const std::string& UserStatType_Name(UserStatType value);
template<typename T>
inline const std::string& UserStatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserStatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserStatType_Name.");
  return UserStatType_Name(static_cast<UserStatType>(enum_t_value));
}
bool UserStatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserStatType* value);
enum SessionType : int {
  PB3_UNUSE16 = 0,
  SESSION_TYPE_SINGLE = 1,
  SESSION_TYPE_GROUP = 2,
  SESSION_TYPE_SYSTEM = 3,
  SESSION_TYPE_ERROR_NOT_FRIEND = 32,
  SessionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SessionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SessionType_IsValid(int value);
constexpr SessionType SessionType_MIN = PB3_UNUSE16;
constexpr SessionType SessionType_MAX = SESSION_TYPE_ERROR_NOT_FRIEND;
constexpr int SessionType_ARRAYSIZE = SessionType_MAX + 1;

const std::string& SessionType_Name(SessionType value);
template<typename T>
inline const std::string& SessionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionType_Name.");
  return SessionType_Name(static_cast<SessionType>(enum_t_value));
}
bool SessionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionType* value);
enum MsgType : int {
  PB3_UNUSE17 = 0,
  MSG_TYPE_SINGLE_TEXT = 1,
  MSG_TYPE_SINGLE_AUDIO = 2,
  MSG_TYPE_GROUP_TEXT = 17,
  MSG_TYPE_GROUP_AUDIO = 18,
  MSG_TYPE_SINGLE_PAY = 33,
  MSG_TYPE_GROUP_PAY = 34,
  MSG_TYPE_ERROR_NOT_FRIEND = 240,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = PB3_UNUSE17;
constexpr MsgType MsgType_MAX = MSG_TYPE_ERROR_NOT_FRIEND;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const std::string& MsgType_Name(MsgType value);
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return MsgType_Name(static_cast<MsgType>(enum_t_value));
}
bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value);
enum BlogType : int {
  PB3_UNUSE18 = 0,
  BLOG_TYPE_RCOMMEND = 1,
  BLOG_TYPE_FRIEND = 2,
  BLOG_TYPE_FOLLOWUSER = 3,
  BlogType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlogType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlogType_IsValid(int value);
constexpr BlogType BlogType_MIN = PB3_UNUSE18;
constexpr BlogType BlogType_MAX = BLOG_TYPE_FOLLOWUSER;
constexpr int BlogType_ARRAYSIZE = BlogType_MAX + 1;

const std::string& BlogType_Name(BlogType value);
template<typename T>
inline const std::string& BlogType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlogType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlogType_Name.");
  return BlogType_Name(static_cast<BlogType>(enum_t_value));
}
bool BlogType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlogType* value);
enum BlogType2 : int {
  PB3_UNUSE19 = 0,
  BLOG_TYPE2_BLOG = 1,
  BLOG_TYPE2_COMMENT = 2,
  BlogType2_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlogType2_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlogType2_IsValid(int value);
constexpr BlogType2 BlogType2_MIN = PB3_UNUSE19;
constexpr BlogType2 BlogType2_MAX = BLOG_TYPE2_COMMENT;
constexpr int BlogType2_ARRAYSIZE = BlogType2_MAX + 1;

const std::string& BlogType2_Name(BlogType2 value);
template<typename T>
inline const std::string& BlogType2_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlogType2>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlogType2_Name.");
  return BlogType2_Name(static_cast<BlogType2>(enum_t_value));
}
bool BlogType2_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlogType2* value);
enum ClientType : int {
  PB3_UNUSE20 = 0,
  CLIENT_TYPE_WINDOWS = 1,
  CLIENT_TYPE_MAC = 2,
  CLIENT_TYPE_IOS = 17,
  CLIENT_TYPE_ANDROID = 18,
  ClientType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientType_IsValid(int value);
constexpr ClientType ClientType_MIN = PB3_UNUSE20;
constexpr ClientType ClientType_MAX = CLIENT_TYPE_ANDROID;
constexpr int ClientType_ARRAYSIZE = ClientType_MAX + 1;

const std::string& ClientType_Name(ClientType value);
template<typename T>
inline const std::string& ClientType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientType_Name.");
  return ClientType_Name(static_cast<ClientType>(enum_t_value));
}
bool ClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientType* value);
enum GroupType : int {
  PB3_UNUSE21 = 0,
  GROUP_TYPE_NORMAL = 1,
  GROUP_TYPE_TMP = 2,
  GROUP_TYPE_ACTIVE = 3,
  GroupType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GroupType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GroupType_IsValid(int value);
constexpr GroupType GroupType_MIN = PB3_UNUSE21;
constexpr GroupType GroupType_MAX = GROUP_TYPE_ACTIVE;
constexpr int GroupType_ARRAYSIZE = GroupType_MAX + 1;

const std::string& GroupType_Name(GroupType value);
template<typename T>
inline const std::string& GroupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupType_Name.");
  return GroupType_Name(static_cast<GroupType>(enum_t_value));
}
bool GroupType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupType* value);
enum GroupModifyType : int {
  PB3_UNUSE22 = 0,
  GROUP_MODIFY_TYPE_ADD = 1,
  GROUP_MODIFY_TYPE_DEL = 2,
  GroupModifyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GroupModifyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GroupModifyType_IsValid(int value);
constexpr GroupModifyType GroupModifyType_MIN = PB3_UNUSE22;
constexpr GroupModifyType GroupModifyType_MAX = GROUP_MODIFY_TYPE_DEL;
constexpr int GroupModifyType_ARRAYSIZE = GroupModifyType_MAX + 1;

const std::string& GroupModifyType_Name(GroupModifyType value);
template<typename T>
inline const std::string& GroupModifyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupModifyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupModifyType_Name.");
  return GroupModifyType_Name(static_cast<GroupModifyType>(enum_t_value));
}
bool GroupModifyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupModifyType* value);
enum TransferFileType : int {
  PB3_UNUSE23 = 0,
  FILE_TYPE_ONLINE = 1,
  FILE_TYPE_OFFLINE = 2,
  TransferFileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransferFileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransferFileType_IsValid(int value);
constexpr TransferFileType TransferFileType_MIN = PB3_UNUSE23;
constexpr TransferFileType TransferFileType_MAX = FILE_TYPE_OFFLINE;
constexpr int TransferFileType_ARRAYSIZE = TransferFileType_MAX + 1;

const std::string& TransferFileType_Name(TransferFileType value);
template<typename T>
inline const std::string& TransferFileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransferFileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransferFileType_Name.");
  return TransferFileType_Name(static_cast<TransferFileType>(enum_t_value));
}
bool TransferFileType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransferFileType* value);
enum ClientFileState : int {
  CLIENT_FILE_PEER_READY = 0,
  CLIENT_FILE_CANCEL = 1,
  CLIENT_FILE_REFUSE = 2,
  CLIENT_FILE_DONE = 3,
  ClientFileState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientFileState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientFileState_IsValid(int value);
constexpr ClientFileState ClientFileState_MIN = CLIENT_FILE_PEER_READY;
constexpr ClientFileState ClientFileState_MAX = CLIENT_FILE_DONE;
constexpr int ClientFileState_ARRAYSIZE = ClientFileState_MAX + 1;

const std::string& ClientFileState_Name(ClientFileState value);
template<typename T>
inline const std::string& ClientFileState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientFileState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientFileState_Name.");
  return ClientFileState_Name(static_cast<ClientFileState>(enum_t_value));
}
bool ClientFileState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientFileState* value);
enum ClientFileRole : int {
  PB3_UNUSE24 = 0,
  CLIENT_REALTIME_SENDER = 1,
  CLIENT_REALTIME_RECVER = 2,
  CLIENT_OFFLINE_UPLOAD = 3,
  CLIENT_OFFLINE_DOWNLOAD = 4,
  ClientFileRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientFileRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientFileRole_IsValid(int value);
constexpr ClientFileRole ClientFileRole_MIN = PB3_UNUSE24;
constexpr ClientFileRole ClientFileRole_MAX = CLIENT_OFFLINE_DOWNLOAD;
constexpr int ClientFileRole_ARRAYSIZE = ClientFileRole_MAX + 1;

const std::string& ClientFileRole_Name(ClientFileRole value);
template<typename T>
inline const std::string& ClientFileRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientFileRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientFileRole_Name.");
  return ClientFileRole_Name(static_cast<ClientFileRole>(enum_t_value));
}
bool ClientFileRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientFileRole* value);
enum FileServerError : int {
  FILE_SERVER_ERRNO_OK = 0,
  FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR = 1,
  FILE_SERVER_ERRNO_CREATE_TASK_ERROR = 2,
  FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN = 3,
  FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK = 4,
  FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID = 5,
  FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER = 6,
  FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR = 7,
  FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR = 8,
  FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR = 9,
  FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR = 10,
  FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR = 11,
  FILE_SERVER_ERRNO_PULL_DATA_FINISHED = 12,
  FileServerError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileServerError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileServerError_IsValid(int value);
constexpr FileServerError FileServerError_MIN = FILE_SERVER_ERRNO_OK;
constexpr FileServerError FileServerError_MAX = FILE_SERVER_ERRNO_PULL_DATA_FINISHED;
constexpr int FileServerError_ARRAYSIZE = FileServerError_MAX + 1;

const std::string& FileServerError_Name(FileServerError value);
template<typename T>
inline const std::string& FileServerError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileServerError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileServerError_Name.");
  return FileServerError_Name(static_cast<FileServerError>(enum_t_value));
}
bool FileServerError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileServerError* value);
enum SessionStatusType : int {
  SESSION_STATUS_OK = 0,
  SESSION_STATUS_DELETE = 1,
  SessionStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SessionStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SessionStatusType_IsValid(int value);
constexpr SessionStatusType SessionStatusType_MIN = SESSION_STATUS_OK;
constexpr SessionStatusType SessionStatusType_MAX = SESSION_STATUS_DELETE;
constexpr int SessionStatusType_ARRAYSIZE = SessionStatusType_MAX + 1;

const std::string& SessionStatusType_Name(SessionStatusType value);
template<typename T>
inline const std::string& SessionStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionStatusType_Name.");
  return SessionStatusType_Name(static_cast<SessionStatusType>(enum_t_value));
}
bool SessionStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionStatusType* value);
enum DepartmentStatusType : int {
  DEPT_STATUS_OK = 0,
  DEPT_STATUS_DELETE = 1,
  DepartmentStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DepartmentStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DepartmentStatusType_IsValid(int value);
constexpr DepartmentStatusType DepartmentStatusType_MIN = DEPT_STATUS_OK;
constexpr DepartmentStatusType DepartmentStatusType_MAX = DEPT_STATUS_DELETE;
constexpr int DepartmentStatusType_ARRAYSIZE = DepartmentStatusType_MAX + 1;

const std::string& DepartmentStatusType_Name(DepartmentStatusType value);
template<typename T>
inline const std::string& DepartmentStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DepartmentStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DepartmentStatusType_Name.");
  return DepartmentStatusType_Name(static_cast<DepartmentStatusType>(enum_t_value));
}
bool DepartmentStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DepartmentStatusType* value);
enum UserRelationType : int {
  RELATION_RECOMMEND = 0,
  RELATION_FRIEND = 1,
  RELATION_FOLLOW = 2,
  RELATION_UNCONFIRMED = 3,
  UserRelationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UserRelationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UserRelationType_IsValid(int value);
constexpr UserRelationType UserRelationType_MIN = RELATION_RECOMMEND;
constexpr UserRelationType UserRelationType_MAX = RELATION_UNCONFIRMED;
constexpr int UserRelationType_ARRAYSIZE = UserRelationType_MAX + 1;

const std::string& UserRelationType_Name(UserRelationType value);
template<typename T>
inline const std::string& UserRelationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserRelationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserRelationType_Name.");
  return UserRelationType_Name(static_cast<UserRelationType>(enum_t_value));
}
bool UserRelationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UserRelationType* value);
// ===================================================================

class IpAddr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.IpAddr) */ {
 public:
  inline IpAddr() : IpAddr(nullptr) {};
  virtual ~IpAddr();

  IpAddr(const IpAddr& from);
  IpAddr(IpAddr&& from) noexcept
    : IpAddr() {
    *this = ::std::move(from);
  }

  inline IpAddr& operator=(const IpAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpAddr& operator=(IpAddr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IpAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpAddr* internal_default_instance() {
    return reinterpret_cast<const IpAddr*>(
               &_IpAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IpAddr& a, IpAddr& b) {
    a.Swap(&b);
  }
  inline void Swap(IpAddr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpAddr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpAddr* New() const final {
    return CreateMaybeMessage<IpAddr>(nullptr);
  }

  IpAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpAddr>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IpAddr& from);
  void MergeFrom(const IpAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IpAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.IpAddr";
  }
  protected:
  explicit IpAddr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.IpAddr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {};
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserNickNameFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kEmailFieldNumber = 6,
    kUserRealNameFieldNumber = 7,
    kUserTelFieldNumber = 8,
    kUserDomainFieldNumber = 9,
    kSignInfoFieldNumber = 11,
    kUserAddrFieldNumber = 15,
    kUserPubkeyFieldNumber = 16,
    kReferralCodeFieldNumber = 17,
    kUserGenderFieldNumber = 2,
    kDepartmentIdFieldNumber = 5,
    kStatusFieldNumber = 10,
    kUpdatedFieldNumber = 12,
    kRelationFieldNumber = 13,
    kFansCntFieldNumber = 14,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string user_nick_name = 3;
  void clear_user_nick_name();
  const std::string& user_nick_name() const;
  void set_user_nick_name(const std::string& value);
  void set_user_nick_name(std::string&& value);
  void set_user_nick_name(const char* value);
  void set_user_nick_name(const char* value, size_t size);
  std::string* mutable_user_nick_name();
  std::string* release_user_nick_name();
  void set_allocated_user_nick_name(std::string* user_nick_name);
  private:
  const std::string& _internal_user_nick_name() const;
  void _internal_set_user_nick_name(const std::string& value);
  std::string* _internal_mutable_user_nick_name();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string email = 6;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string user_real_name = 7;
  void clear_user_real_name();
  const std::string& user_real_name() const;
  void set_user_real_name(const std::string& value);
  void set_user_real_name(std::string&& value);
  void set_user_real_name(const char* value);
  void set_user_real_name(const char* value, size_t size);
  std::string* mutable_user_real_name();
  std::string* release_user_real_name();
  void set_allocated_user_real_name(std::string* user_real_name);
  private:
  const std::string& _internal_user_real_name() const;
  void _internal_set_user_real_name(const std::string& value);
  std::string* _internal_mutable_user_real_name();
  public:

  // string user_tel = 8;
  void clear_user_tel();
  const std::string& user_tel() const;
  void set_user_tel(const std::string& value);
  void set_user_tel(std::string&& value);
  void set_user_tel(const char* value);
  void set_user_tel(const char* value, size_t size);
  std::string* mutable_user_tel();
  std::string* release_user_tel();
  void set_allocated_user_tel(std::string* user_tel);
  private:
  const std::string& _internal_user_tel() const;
  void _internal_set_user_tel(const std::string& value);
  std::string* _internal_mutable_user_tel();
  public:

  // string user_domain = 9;
  void clear_user_domain();
  const std::string& user_domain() const;
  void set_user_domain(const std::string& value);
  void set_user_domain(std::string&& value);
  void set_user_domain(const char* value);
  void set_user_domain(const char* value, size_t size);
  std::string* mutable_user_domain();
  std::string* release_user_domain();
  void set_allocated_user_domain(std::string* user_domain);
  private:
  const std::string& _internal_user_domain() const;
  void _internal_set_user_domain(const std::string& value);
  std::string* _internal_mutable_user_domain();
  public:

  // string sign_info = 11;
  void clear_sign_info();
  const std::string& sign_info() const;
  void set_sign_info(const std::string& value);
  void set_sign_info(std::string&& value);
  void set_sign_info(const char* value);
  void set_sign_info(const char* value, size_t size);
  std::string* mutable_sign_info();
  std::string* release_sign_info();
  void set_allocated_sign_info(std::string* sign_info);
  private:
  const std::string& _internal_sign_info() const;
  void _internal_set_sign_info(const std::string& value);
  std::string* _internal_mutable_sign_info();
  public:

  // string user_addr = 15;
  void clear_user_addr();
  const std::string& user_addr() const;
  void set_user_addr(const std::string& value);
  void set_user_addr(std::string&& value);
  void set_user_addr(const char* value);
  void set_user_addr(const char* value, size_t size);
  std::string* mutable_user_addr();
  std::string* release_user_addr();
  void set_allocated_user_addr(std::string* user_addr);
  private:
  const std::string& _internal_user_addr() const;
  void _internal_set_user_addr(const std::string& value);
  std::string* _internal_mutable_user_addr();
  public:

  // string user_pubkey = 16;
  void clear_user_pubkey();
  const std::string& user_pubkey() const;
  void set_user_pubkey(const std::string& value);
  void set_user_pubkey(std::string&& value);
  void set_user_pubkey(const char* value);
  void set_user_pubkey(const char* value, size_t size);
  std::string* mutable_user_pubkey();
  std::string* release_user_pubkey();
  void set_allocated_user_pubkey(std::string* user_pubkey);
  private:
  const std::string& _internal_user_pubkey() const;
  void _internal_set_user_pubkey(const std::string& value);
  std::string* _internal_mutable_user_pubkey();
  public:

  // string referral_code = 17;
  void clear_referral_code();
  const std::string& referral_code() const;
  void set_referral_code(const std::string& value);
  void set_referral_code(std::string&& value);
  void set_referral_code(const char* value);
  void set_referral_code(const char* value, size_t size);
  std::string* mutable_referral_code();
  std::string* release_referral_code();
  void set_allocated_referral_code(std::string* referral_code);
  private:
  const std::string& _internal_referral_code() const;
  void _internal_set_referral_code(const std::string& value);
  std::string* _internal_mutable_referral_code();
  public:

  // uint32 user_gender = 2;
  void clear_user_gender();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_gender() const;
  void set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_gender() const;
  void _internal_set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 department_id = 5;
  void clear_department_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 department_id() const;
  void set_department_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_department_id() const;
  void _internal_set_department_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 10;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 updated = 12;
  void clear_updated();
  ::PROTOBUF_NAMESPACE_ID::uint32 updated() const;
  void set_updated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_updated() const;
  void _internal_set_updated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.UserRelationType relation = 13;
  void clear_relation();
  ::IM::BaseDefine::UserRelationType relation() const;
  void set_relation(::IM::BaseDefine::UserRelationType value);
  private:
  ::IM::BaseDefine::UserRelationType _internal_relation() const;
  void _internal_set_relation(::IM::BaseDefine::UserRelationType value);
  public:

  // uint32 fans_cnt = 14;
  void clear_fans_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 fans_cnt() const;
  void set_fans_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fans_cnt() const;
  void _internal_set_fans_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_real_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_tel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referral_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_gender_;
  ::PROTOBUF_NAMESPACE_ID::uint32 department_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 updated_;
  int relation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fans_cnt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class ContactSessionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.ContactSessionInfo) */ {
 public:
  inline ContactSessionInfo() : ContactSessionInfo(nullptr) {};
  virtual ~ContactSessionInfo();

  ContactSessionInfo(const ContactSessionInfo& from);
  ContactSessionInfo(ContactSessionInfo&& from) noexcept
    : ContactSessionInfo() {
    *this = ::std::move(from);
  }

  inline ContactSessionInfo& operator=(const ContactSessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContactSessionInfo& operator=(ContactSessionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ContactSessionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactSessionInfo* internal_default_instance() {
    return reinterpret_cast<const ContactSessionInfo*>(
               &_ContactSessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContactSessionInfo& a, ContactSessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ContactSessionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContactSessionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContactSessionInfo* New() const final {
    return CreateMaybeMessage<ContactSessionInfo>(nullptr);
  }

  ContactSessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContactSessionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContactSessionInfo& from);
  void MergeFrom(const ContactSessionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContactSessionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.ContactSessionInfo";
  }
  protected:
  explicit ContactSessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kLatestMsgDataFieldNumber = 6,
    kLatestMsgFromUserIdFieldNumber = 8,
    kSessionTypeFieldNumber = 2,
    kSessionStatusFieldNumber = 3,
    kUpdatedTimeFieldNumber = 4,
    kLatestMsgIdFieldNumber = 5,
    kLatestMsgTypeFieldNumber = 7,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // bytes latest_msg_data = 6;
  void clear_latest_msg_data();
  const std::string& latest_msg_data() const;
  void set_latest_msg_data(const std::string& value);
  void set_latest_msg_data(std::string&& value);
  void set_latest_msg_data(const char* value);
  void set_latest_msg_data(const void* value, size_t size);
  std::string* mutable_latest_msg_data();
  std::string* release_latest_msg_data();
  void set_allocated_latest_msg_data(std::string* latest_msg_data);
  private:
  const std::string& _internal_latest_msg_data() const;
  void _internal_set_latest_msg_data(const std::string& value);
  std::string* _internal_mutable_latest_msg_data();
  public:

  // string latest_msg_from_user_id = 8;
  void clear_latest_msg_from_user_id();
  const std::string& latest_msg_from_user_id() const;
  void set_latest_msg_from_user_id(const std::string& value);
  void set_latest_msg_from_user_id(std::string&& value);
  void set_latest_msg_from_user_id(const char* value);
  void set_latest_msg_from_user_id(const char* value, size_t size);
  std::string* mutable_latest_msg_from_user_id();
  std::string* release_latest_msg_from_user_id();
  void set_allocated_latest_msg_from_user_id(std::string* latest_msg_from_user_id);
  private:
  const std::string& _internal_latest_msg_from_user_id() const;
  void _internal_set_latest_msg_from_user_id(const std::string& value);
  std::string* _internal_mutable_latest_msg_from_user_id();
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // .IM.BaseDefine.SessionStatusType session_status = 3;
  void clear_session_status();
  ::IM::BaseDefine::SessionStatusType session_status() const;
  void set_session_status(::IM::BaseDefine::SessionStatusType value);
  private:
  ::IM::BaseDefine::SessionStatusType _internal_session_status() const;
  void _internal_set_session_status(::IM::BaseDefine::SessionStatusType value);
  public:

  // uint32 updated_time = 4;
  void clear_updated_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 updated_time() const;
  void set_updated_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_updated_time() const;
  void _internal_set_updated_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 latest_msg_id = 5;
  void clear_latest_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_msg_id() const;
  void set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_msg_id() const;
  void _internal_set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.MsgType latest_msg_type = 7;
  void clear_latest_msg_type();
  ::IM::BaseDefine::MsgType latest_msg_type() const;
  void set_latest_msg_type(::IM::BaseDefine::MsgType value);
  private:
  ::IM::BaseDefine::MsgType _internal_latest_msg_type() const;
  void _internal_set_latest_msg_type(::IM::BaseDefine::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ContactSessionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_msg_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_msg_from_user_id_;
  int session_type_;
  int session_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 updated_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_msg_id_;
  int latest_msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class UserStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.UserStat) */ {
 public:
  inline UserStat() : UserStat(nullptr) {};
  virtual ~UserStat();

  UserStat(const UserStat& from);
  UserStat(UserStat&& from) noexcept
    : UserStat() {
    *this = ::std::move(from);
  }

  inline UserStat& operator=(const UserStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserStat& operator=(UserStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UserStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserStat* internal_default_instance() {
    return reinterpret_cast<const UserStat*>(
               &_UserStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserStat& a, UserStat& b) {
    a.Swap(&b);
  }
  inline void Swap(UserStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserStat* New() const final {
    return CreateMaybeMessage<UserStat>(nullptr);
  }

  UserStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserStat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserStat& from);
  void MergeFrom(const UserStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.UserStat";
  }
  protected:
  explicit UserStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .IM.BaseDefine.UserStatType status = 2;
  void clear_status();
  ::IM::BaseDefine::UserStatType status() const;
  void set_status(::IM::BaseDefine::UserStatType value);
  private:
  ::IM::BaseDefine::UserStatType _internal_status() const;
  void _internal_set_status(::IM::BaseDefine::UserStatType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.UserStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class ServerUserStat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.ServerUserStat) */ {
 public:
  inline ServerUserStat() : ServerUserStat(nullptr) {};
  virtual ~ServerUserStat();

  ServerUserStat(const ServerUserStat& from);
  ServerUserStat(ServerUserStat&& from) noexcept
    : ServerUserStat() {
    *this = ::std::move(from);
  }

  inline ServerUserStat& operator=(const ServerUserStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUserStat& operator=(ServerUserStat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerUserStat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerUserStat* internal_default_instance() {
    return reinterpret_cast<const ServerUserStat*>(
               &_ServerUserStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerUserStat& a, ServerUserStat& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUserStat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUserStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerUserStat* New() const final {
    return CreateMaybeMessage<ServerUserStat>(nullptr);
  }

  ServerUserStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerUserStat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerUserStat& from);
  void MergeFrom(const ServerUserStat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerUserStat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.ServerUserStat";
  }
  protected:
  explicit ServerUserStat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kClientTypeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .IM.BaseDefine.UserStatType status = 2;
  void clear_status();
  ::IM::BaseDefine::UserStatType status() const;
  void set_status(::IM::BaseDefine::UserStatType value);
  private:
  ::IM::BaseDefine::UserStatType _internal_status() const;
  void _internal_set_status(::IM::BaseDefine::UserStatType value);
  public:

  // .IM.BaseDefine.ClientType client_type = 3;
  void clear_client_type();
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);
  private:
  ::IM::BaseDefine::ClientType _internal_client_type() const;
  void _internal_set_client_type(::IM::BaseDefine::ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ServerUserStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  int status_;
  int client_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class UnreadInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.UnreadInfo) */ {
 public:
  inline UnreadInfo() : UnreadInfo(nullptr) {};
  virtual ~UnreadInfo();

  UnreadInfo(const UnreadInfo& from);
  UnreadInfo(UnreadInfo&& from) noexcept
    : UnreadInfo() {
    *this = ::std::move(from);
  }

  inline UnreadInfo& operator=(const UnreadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnreadInfo& operator=(UnreadInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UnreadInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnreadInfo* internal_default_instance() {
    return reinterpret_cast<const UnreadInfo*>(
               &_UnreadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UnreadInfo& a, UnreadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UnreadInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnreadInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnreadInfo* New() const final {
    return CreateMaybeMessage<UnreadInfo>(nullptr);
  }

  UnreadInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnreadInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UnreadInfo& from);
  void MergeFrom(const UnreadInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnreadInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.UnreadInfo";
  }
  protected:
  explicit UnreadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllPayMsgFieldNumber = 8,
    kSessionIdFieldNumber = 1,
    kLatestMsgDataFieldNumber = 5,
    kLatestMsgFromUserIdFieldNumber = 7,
    kSessionTypeFieldNumber = 2,
    kUnreadCntFieldNumber = 3,
    kLatestMsgIdFieldNumber = 4,
    kLatestMsgTypeFieldNumber = 6,
  };
  // repeated bytes all_pay_msg = 8;
  int all_pay_msg_size() const;
  private:
  int _internal_all_pay_msg_size() const;
  public:
  void clear_all_pay_msg();
  const std::string& all_pay_msg(int index) const;
  std::string* mutable_all_pay_msg(int index);
  void set_all_pay_msg(int index, const std::string& value);
  void set_all_pay_msg(int index, std::string&& value);
  void set_all_pay_msg(int index, const char* value);
  void set_all_pay_msg(int index, const void* value, size_t size);
  std::string* add_all_pay_msg();
  void add_all_pay_msg(const std::string& value);
  void add_all_pay_msg(std::string&& value);
  void add_all_pay_msg(const char* value);
  void add_all_pay_msg(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& all_pay_msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_all_pay_msg();
  private:
  const std::string& _internal_all_pay_msg(int index) const;
  std::string* _internal_add_all_pay_msg();
  public:

  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // bytes latest_msg_data = 5;
  void clear_latest_msg_data();
  const std::string& latest_msg_data() const;
  void set_latest_msg_data(const std::string& value);
  void set_latest_msg_data(std::string&& value);
  void set_latest_msg_data(const char* value);
  void set_latest_msg_data(const void* value, size_t size);
  std::string* mutable_latest_msg_data();
  std::string* release_latest_msg_data();
  void set_allocated_latest_msg_data(std::string* latest_msg_data);
  private:
  const std::string& _internal_latest_msg_data() const;
  void _internal_set_latest_msg_data(const std::string& value);
  std::string* _internal_mutable_latest_msg_data();
  public:

  // string latest_msg_from_user_id = 7;
  void clear_latest_msg_from_user_id();
  const std::string& latest_msg_from_user_id() const;
  void set_latest_msg_from_user_id(const std::string& value);
  void set_latest_msg_from_user_id(std::string&& value);
  void set_latest_msg_from_user_id(const char* value);
  void set_latest_msg_from_user_id(const char* value, size_t size);
  std::string* mutable_latest_msg_from_user_id();
  std::string* release_latest_msg_from_user_id();
  void set_allocated_latest_msg_from_user_id(std::string* latest_msg_from_user_id);
  private:
  const std::string& _internal_latest_msg_from_user_id() const;
  void _internal_set_latest_msg_from_user_id(const std::string& value);
  std::string* _internal_mutable_latest_msg_from_user_id();
  public:

  // .IM.BaseDefine.SessionType session_type = 2;
  void clear_session_type();
  ::IM::BaseDefine::SessionType session_type() const;
  void set_session_type(::IM::BaseDefine::SessionType value);
  private:
  ::IM::BaseDefine::SessionType _internal_session_type() const;
  void _internal_set_session_type(::IM::BaseDefine::SessionType value);
  public:

  // uint32 unread_cnt = 3;
  void clear_unread_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 unread_cnt() const;
  void set_unread_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unread_cnt() const;
  void _internal_set_unread_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 latest_msg_id = 4;
  void clear_latest_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_msg_id() const;
  void set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_latest_msg_id() const;
  void _internal_set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.MsgType latest_msg_type = 6;
  void clear_latest_msg_type();
  ::IM::BaseDefine::MsgType latest_msg_type() const;
  void set_latest_msg_type(::IM::BaseDefine::MsgType value);
  private:
  ::IM::BaseDefine::MsgType _internal_latest_msg_type() const;
  void _internal_set_latest_msg_type(::IM::BaseDefine::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.UnreadInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> all_pay_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_msg_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_msg_from_user_id_;
  int session_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unread_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 latest_msg_id_;
  int latest_msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class MsgInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.MsgInfo) */ {
 public:
  inline MsgInfo() : MsgInfo(nullptr) {};
  virtual ~MsgInfo();

  MsgInfo(const MsgInfo& from);
  MsgInfo(MsgInfo&& from) noexcept
    : MsgInfo() {
    *this = ::std::move(from);
  }

  inline MsgInfo& operator=(const MsgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgInfo& operator=(MsgInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MsgInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgInfo* internal_default_instance() {
    return reinterpret_cast<const MsgInfo*>(
               &_MsgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgInfo& a, MsgInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgInfo* New() const final {
    return CreateMaybeMessage<MsgInfo>(nullptr);
  }

  MsgInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MsgInfo& from);
  void MergeFrom(const MsgInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.MsgInfo";
  }
  protected:
  explicit MsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromSessionIdFieldNumber = 2,
    kMsgDataFieldNumber = 5,
    kMsgSigFieldNumber = 6,
    kMsgIdFieldNumber = 1,
    kCreateTimeFieldNumber = 3,
    kMsgTypeFieldNumber = 4,
  };
  // string from_session_id = 2;
  void clear_from_session_id();
  const std::string& from_session_id() const;
  void set_from_session_id(const std::string& value);
  void set_from_session_id(std::string&& value);
  void set_from_session_id(const char* value);
  void set_from_session_id(const char* value, size_t size);
  std::string* mutable_from_session_id();
  std::string* release_from_session_id();
  void set_allocated_from_session_id(std::string* from_session_id);
  private:
  const std::string& _internal_from_session_id() const;
  void _internal_set_from_session_id(const std::string& value);
  std::string* _internal_mutable_from_session_id();
  public:

  // bytes msg_data = 5;
  void clear_msg_data();
  const std::string& msg_data() const;
  void set_msg_data(const std::string& value);
  void set_msg_data(std::string&& value);
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  std::string* mutable_msg_data();
  std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);
  private:
  const std::string& _internal_msg_data() const;
  void _internal_set_msg_data(const std::string& value);
  std::string* _internal_mutable_msg_data();
  public:

  // bytes msg_sig = 6;
  void clear_msg_sig();
  const std::string& msg_sig() const;
  void set_msg_sig(const std::string& value);
  void set_msg_sig(std::string&& value);
  void set_msg_sig(const char* value);
  void set_msg_sig(const void* value, size_t size);
  std::string* mutable_msg_sig();
  std::string* release_msg_sig();
  void set_allocated_msg_sig(std::string* msg_sig);
  private:
  const std::string& _internal_msg_sig() const;
  void _internal_set_msg_sig(const std::string& value);
  std::string* _internal_mutable_msg_sig();
  public:

  // uint32 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 create_time = 3;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.MsgType msg_type = 4;
  void clear_msg_type();
  ::IM::BaseDefine::MsgType msg_type() const;
  void set_msg_type(::IM::BaseDefine::MsgType value);
  private:
  ::IM::BaseDefine::MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::IM::BaseDefine::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.MsgInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_sig_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class BlogInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.BlogInfo) */ {
 public:
  inline BlogInfo() : BlogInfo(nullptr) {};
  virtual ~BlogInfo();

  BlogInfo(const BlogInfo& from);
  BlogInfo(BlogInfo&& from) noexcept
    : BlogInfo() {
    *this = ::std::move(from);
  }

  inline BlogInfo& operator=(const BlogInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlogInfo& operator=(BlogInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BlogInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlogInfo* internal_default_instance() {
    return reinterpret_cast<const BlogInfo*>(
               &_BlogInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlogInfo& a, BlogInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BlogInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlogInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlogInfo* New() const final {
    return CreateMaybeMessage<BlogInfo>(nullptr);
  }

  BlogInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlogInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BlogInfo& from);
  void MergeFrom(const BlogInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlogInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.BlogInfo";
  }
  protected:
  explicit BlogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWriterUserIdFieldNumber = 2,
    kNickNameFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kBlogDataFieldNumber = 8,
    kBlogIdFieldNumber = 1,
    kLikeCntFieldNumber = 5,
    kCommentCntFieldNumber = 6,
    kCreateTimeFieldNumber = 7,
  };
  // string writer_user_id = 2;
  void clear_writer_user_id();
  const std::string& writer_user_id() const;
  void set_writer_user_id(const std::string& value);
  void set_writer_user_id(std::string&& value);
  void set_writer_user_id(const char* value);
  void set_writer_user_id(const char* value, size_t size);
  std::string* mutable_writer_user_id();
  std::string* release_writer_user_id();
  void set_allocated_writer_user_id(std::string* writer_user_id);
  private:
  const std::string& _internal_writer_user_id() const;
  void _internal_set_writer_user_id(const std::string& value);
  std::string* _internal_mutable_writer_user_id();
  public:

  // string nick_name = 3;
  void clear_nick_name();
  const std::string& nick_name() const;
  void set_nick_name(const std::string& value);
  void set_nick_name(std::string&& value);
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  std::string* mutable_nick_name();
  std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bytes blog_data = 8;
  void clear_blog_data();
  const std::string& blog_data() const;
  void set_blog_data(const std::string& value);
  void set_blog_data(std::string&& value);
  void set_blog_data(const char* value);
  void set_blog_data(const void* value, size_t size);
  std::string* mutable_blog_data();
  std::string* release_blog_data();
  void set_allocated_blog_data(std::string* blog_data);
  private:
  const std::string& _internal_blog_data() const;
  void _internal_set_blog_data(const std::string& value);
  std::string* _internal_mutable_blog_data();
  public:

  // uint32 blog_id = 1;
  void clear_blog_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id() const;
  void set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blog_id() const;
  void _internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 like_cnt = 5;
  void clear_like_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 like_cnt() const;
  void set_like_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_like_cnt() const;
  void _internal_set_like_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 comment_cnt = 6;
  void clear_comment_cnt();
  ::PROTOBUF_NAMESPACE_ID::uint32 comment_cnt() const;
  void set_comment_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_comment_cnt() const;
  void _internal_set_comment_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 create_time = 7;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.BlogInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr writer_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blog_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blog_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 like_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 comment_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class GroupVersionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.GroupVersionInfo) */ {
 public:
  inline GroupVersionInfo() : GroupVersionInfo(nullptr) {};
  virtual ~GroupVersionInfo();

  GroupVersionInfo(const GroupVersionInfo& from);
  GroupVersionInfo(GroupVersionInfo&& from) noexcept
    : GroupVersionInfo() {
    *this = ::std::move(from);
  }

  inline GroupVersionInfo& operator=(const GroupVersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupVersionInfo& operator=(GroupVersionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GroupVersionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupVersionInfo* internal_default_instance() {
    return reinterpret_cast<const GroupVersionInfo*>(
               &_GroupVersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GroupVersionInfo& a, GroupVersionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupVersionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupVersionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupVersionInfo* New() const final {
    return CreateMaybeMessage<GroupVersionInfo>(nullptr);
  }

  GroupVersionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupVersionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GroupVersionInfo& from);
  void MergeFrom(const GroupVersionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupVersionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.GroupVersionInfo";
  }
  protected:
  explicit GroupVersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.GroupVersionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.GroupInfo) */ {
 public:
  inline GroupInfo() : GroupInfo(nullptr) {};
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GroupInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const final {
    return CreateMaybeMessage<GroupInfo>(nullptr);
  }

  GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.GroupInfo";
  }
  protected:
  explicit GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupMemberListFieldNumber = 8,
    kGroupMemberUsersFieldNumber = 9,
    kGroupIdFieldNumber = 1,
    kGroupNameFieldNumber = 3,
    kGroupAvatarFieldNumber = 4,
    kGroupCreatorIdFieldNumber = 5,
    kVersionFieldNumber = 2,
    kGroupTypeFieldNumber = 6,
    kShieldStatusFieldNumber = 7,
  };
  // repeated string group_member_list = 8;
  int group_member_list_size() const;
  private:
  int _internal_group_member_list_size() const;
  public:
  void clear_group_member_list();
  const std::string& group_member_list(int index) const;
  std::string* mutable_group_member_list(int index);
  void set_group_member_list(int index, const std::string& value);
  void set_group_member_list(int index, std::string&& value);
  void set_group_member_list(int index, const char* value);
  void set_group_member_list(int index, const char* value, size_t size);
  std::string* add_group_member_list();
  void add_group_member_list(const std::string& value);
  void add_group_member_list(std::string&& value);
  void add_group_member_list(const char* value);
  void add_group_member_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_member_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_member_list();
  private:
  const std::string& _internal_group_member_list(int index) const;
  std::string* _internal_add_group_member_list();
  public:

  // repeated .IM.BaseDefine.UserInfo group_member_users = 9;
  int group_member_users_size() const;
  private:
  int _internal_group_member_users_size() const;
  public:
  void clear_group_member_users();
  ::IM::BaseDefine::UserInfo* mutable_group_member_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_group_member_users();
  private:
  const ::IM::BaseDefine::UserInfo& _internal_group_member_users(int index) const;
  ::IM::BaseDefine::UserInfo* _internal_add_group_member_users();
  public:
  const ::IM::BaseDefine::UserInfo& group_member_users(int index) const;
  ::IM::BaseDefine::UserInfo* add_group_member_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      group_member_users() const;

  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string group_name = 3;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string group_avatar = 4;
  void clear_group_avatar();
  const std::string& group_avatar() const;
  void set_group_avatar(const std::string& value);
  void set_group_avatar(std::string&& value);
  void set_group_avatar(const char* value);
  void set_group_avatar(const char* value, size_t size);
  std::string* mutable_group_avatar();
  std::string* release_group_avatar();
  void set_allocated_group_avatar(std::string* group_avatar);
  private:
  const std::string& _internal_group_avatar() const;
  void _internal_set_group_avatar(const std::string& value);
  std::string* _internal_mutable_group_avatar();
  public:

  // string group_creator_id = 5;
  void clear_group_creator_id();
  const std::string& group_creator_id() const;
  void set_group_creator_id(const std::string& value);
  void set_group_creator_id(std::string&& value);
  void set_group_creator_id(const char* value);
  void set_group_creator_id(const char* value, size_t size);
  std::string* mutable_group_creator_id();
  std::string* release_group_creator_id();
  void set_allocated_group_creator_id(std::string* group_creator_id);
  private:
  const std::string& _internal_group_creator_id() const;
  void _internal_set_group_creator_id(const std::string& value);
  std::string* _internal_mutable_group_creator_id();
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.GroupType group_type = 6;
  void clear_group_type();
  ::IM::BaseDefine::GroupType group_type() const;
  void set_group_type(::IM::BaseDefine::GroupType value);
  private:
  ::IM::BaseDefine::GroupType _internal_group_type() const;
  void _internal_set_group_type(::IM::BaseDefine::GroupType value);
  public:

  // uint32 shield_status = 7;
  void clear_shield_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status() const;
  void set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shield_status() const;
  void _internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.GroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_member_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo > group_member_users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_creator_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int group_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class UserTokenInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.UserTokenInfo) */ {
 public:
  inline UserTokenInfo() : UserTokenInfo(nullptr) {};
  virtual ~UserTokenInfo();

  UserTokenInfo(const UserTokenInfo& from);
  UserTokenInfo(UserTokenInfo&& from) noexcept
    : UserTokenInfo() {
    *this = ::std::move(from);
  }

  inline UserTokenInfo& operator=(const UserTokenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTokenInfo& operator=(UserTokenInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UserTokenInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTokenInfo* internal_default_instance() {
    return reinterpret_cast<const UserTokenInfo*>(
               &_UserTokenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UserTokenInfo& a, UserTokenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTokenInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserTokenInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserTokenInfo* New() const final {
    return CreateMaybeMessage<UserTokenInfo>(nullptr);
  }

  UserTokenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserTokenInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserTokenInfo& from);
  void MergeFrom(const UserTokenInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserTokenInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.UserTokenInfo";
  }
  protected:
  explicit UserTokenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kTokenFieldNumber = 3,
    kUserTypeFieldNumber = 2,
    kPushCountFieldNumber = 4,
    kPushTypeFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .IM.BaseDefine.ClientType user_type = 2;
  void clear_user_type();
  ::IM::BaseDefine::ClientType user_type() const;
  void set_user_type(::IM::BaseDefine::ClientType value);
  private:
  ::IM::BaseDefine::ClientType _internal_user_type() const;
  void _internal_set_user_type(::IM::BaseDefine::ClientType value);
  public:

  // uint32 push_count = 4;
  void clear_push_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 push_count() const;
  void set_push_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_push_count() const;
  void _internal_set_push_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 push_type = 5;
  void clear_push_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 push_type() const;
  void set_push_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_push_type() const;
  void _internal_set_push_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.UserTokenInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int user_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 push_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 push_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class PushResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.PushResult) */ {
 public:
  inline PushResult() : PushResult(nullptr) {};
  virtual ~PushResult();

  PushResult(const PushResult& from);
  PushResult(PushResult&& from) noexcept
    : PushResult() {
    *this = ::std::move(from);
  }

  inline PushResult& operator=(const PushResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushResult& operator=(PushResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PushResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushResult* internal_default_instance() {
    return reinterpret_cast<const PushResult*>(
               &_PushResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PushResult& a, PushResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PushResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushResult* New() const final {
    return CreateMaybeMessage<PushResult>(nullptr);
  }

  PushResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PushResult& from);
  void MergeFrom(const PushResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PushResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.PushResult";
  }
  protected:
  explicit PushResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTokenFieldNumber = 1,
    kResultCodeFieldNumber = 2,
  };
  // string user_token = 1;
  void clear_user_token();
  const std::string& user_token() const;
  void set_user_token(const std::string& value);
  void set_user_token(std::string&& value);
  void set_user_token(const char* value);
  void set_user_token(const char* value, size_t size);
  std::string* mutable_user_token();
  std::string* release_user_token();
  void set_allocated_user_token(std::string* user_token);
  private:
  const std::string& _internal_user_token() const;
  void _internal_set_user_token(const std::string& value);
  std::string* _internal_mutable_user_token();
  public:

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.PushResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_token_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class ShieldStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.ShieldStatus) */ {
 public:
  inline ShieldStatus() : ShieldStatus(nullptr) {};
  virtual ~ShieldStatus();

  ShieldStatus(const ShieldStatus& from);
  ShieldStatus(ShieldStatus&& from) noexcept
    : ShieldStatus() {
    *this = ::std::move(from);
  }

  inline ShieldStatus& operator=(const ShieldStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShieldStatus& operator=(ShieldStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ShieldStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShieldStatus* internal_default_instance() {
    return reinterpret_cast<const ShieldStatus*>(
               &_ShieldStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ShieldStatus& a, ShieldStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ShieldStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShieldStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShieldStatus* New() const final {
    return CreateMaybeMessage<ShieldStatus>(nullptr);
  }

  ShieldStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShieldStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ShieldStatus& from);
  void MergeFrom(const ShieldStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShieldStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.ShieldStatus";
  }
  protected:
  explicit ShieldStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
    kShieldStatusFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string group_id = 2;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // uint32 shield_status = 3;
  void clear_shield_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status() const;
  void set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shield_status() const;
  void _internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.ShieldStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class OfflineFileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.OfflineFileInfo) */ {
 public:
  inline OfflineFileInfo() : OfflineFileInfo(nullptr) {};
  virtual ~OfflineFileInfo();

  OfflineFileInfo(const OfflineFileInfo& from);
  OfflineFileInfo(OfflineFileInfo&& from) noexcept
    : OfflineFileInfo() {
    *this = ::std::move(from);
  }

  inline OfflineFileInfo& operator=(const OfflineFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineFileInfo& operator=(OfflineFileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const OfflineFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineFileInfo* internal_default_instance() {
    return reinterpret_cast<const OfflineFileInfo*>(
               &_OfflineFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OfflineFileInfo& a, OfflineFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineFileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineFileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OfflineFileInfo* New() const final {
    return CreateMaybeMessage<OfflineFileInfo>(nullptr);
  }

  OfflineFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OfflineFileInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OfflineFileInfo& from);
  void MergeFrom(const OfflineFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OfflineFileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.OfflineFileInfo";
  }
  protected:
  explicit OfflineFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUserIdFieldNumber = 1,
    kTaskIdFieldNumber = 2,
    kFileNameFieldNumber = 3,
    kFileSizeFieldNumber = 4,
  };
  // string from_user_id = 1;
  void clear_from_user_id();
  const std::string& from_user_id() const;
  void set_from_user_id(const std::string& value);
  void set_from_user_id(std::string&& value);
  void set_from_user_id(const char* value);
  void set_from_user_id(const char* value, size_t size);
  std::string* mutable_from_user_id();
  std::string* release_from_user_id();
  void set_allocated_from_user_id(std::string* from_user_id);
  private:
  const std::string& _internal_from_user_id() const;
  void _internal_set_from_user_id(const std::string& value);
  std::string* _internal_mutable_from_user_id();
  public:

  // string task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // string file_name = 3;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // uint32 file_size = 4;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.OfflineFileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class DepartInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.DepartInfo) */ {
 public:
  inline DepartInfo() : DepartInfo(nullptr) {};
  virtual ~DepartInfo();

  DepartInfo(const DepartInfo& from);
  DepartInfo(DepartInfo&& from) noexcept
    : DepartInfo() {
    *this = ::std::move(from);
  }

  inline DepartInfo& operator=(const DepartInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepartInfo& operator=(DepartInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DepartInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepartInfo* internal_default_instance() {
    return reinterpret_cast<const DepartInfo*>(
               &_DepartInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DepartInfo& a, DepartInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DepartInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepartInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepartInfo* New() const final {
    return CreateMaybeMessage<DepartInfo>(nullptr);
  }

  DepartInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepartInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DepartInfo& from);
  void MergeFrom(const DepartInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DepartInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.DepartInfo";
  }
  protected:
  explicit DepartInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeptNameFieldNumber = 3,
    kDeptIdFieldNumber = 1,
    kPriorityFieldNumber = 2,
    kParentDeptIdFieldNumber = 4,
    kDeptStatusFieldNumber = 5,
  };
  // string dept_name = 3;
  void clear_dept_name();
  const std::string& dept_name() const;
  void set_dept_name(const std::string& value);
  void set_dept_name(std::string&& value);
  void set_dept_name(const char* value);
  void set_dept_name(const char* value, size_t size);
  std::string* mutable_dept_name();
  std::string* release_dept_name();
  void set_allocated_dept_name(std::string* dept_name);
  private:
  const std::string& _internal_dept_name() const;
  void _internal_set_dept_name(const std::string& value);
  std::string* _internal_mutable_dept_name();
  public:

  // uint32 dept_id = 1;
  void clear_dept_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dept_id() const;
  void set_dept_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dept_id() const;
  void _internal_set_dept_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 priority = 2;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 parent_dept_id = 4;
  void clear_parent_dept_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_dept_id() const;
  void set_parent_dept_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_parent_dept_id() const;
  void _internal_set_parent_dept_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .IM.BaseDefine.DepartmentStatusType dept_status = 5;
  void clear_dept_status();
  ::IM::BaseDefine::DepartmentStatusType dept_status() const;
  void set_dept_status(::IM::BaseDefine::DepartmentStatusType value);
  private:
  ::IM::BaseDefine::DepartmentStatusType _internal_dept_status() const;
  void _internal_set_dept_status(::IM::BaseDefine::DepartmentStatusType value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.DepartInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dept_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dept_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_dept_id_;
  int dept_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// -------------------------------------------------------------------

class PushShieldStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.BaseDefine.PushShieldStatus) */ {
 public:
  inline PushShieldStatus() : PushShieldStatus(nullptr) {};
  virtual ~PushShieldStatus();

  PushShieldStatus(const PushShieldStatus& from);
  PushShieldStatus(PushShieldStatus&& from) noexcept
    : PushShieldStatus() {
    *this = ::std::move(from);
  }

  inline PushShieldStatus& operator=(const PushShieldStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushShieldStatus& operator=(PushShieldStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PushShieldStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushShieldStatus* internal_default_instance() {
    return reinterpret_cast<const PushShieldStatus*>(
               &_PushShieldStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PushShieldStatus& a, PushShieldStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PushShieldStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushShieldStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushShieldStatus* New() const final {
    return CreateMaybeMessage<PushShieldStatus>(nullptr);
  }

  PushShieldStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushShieldStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PushShieldStatus& from);
  void MergeFrom(const PushShieldStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PushShieldStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.BaseDefine.PushShieldStatus";
  }
  protected:
  explicit PushShieldStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kShieldStatusFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // uint32 shield_status = 2;
  void clear_shield_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status() const;
  void set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shield_status() const;
  void _internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.BaseDefine.PushShieldStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shield_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eBaseDefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IpAddr

// string ip = 1;
inline void IpAddr::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IpAddr::ip() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.IpAddr.ip)
  return _internal_ip();
}
inline void IpAddr::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.IpAddr.ip)
}
inline std::string* IpAddr::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.IpAddr.ip)
  return _internal_mutable_ip();
}
inline const std::string& IpAddr::_internal_ip() const {
  return ip_.Get();
}
inline void IpAddr::_internal_set_ip(const std::string& value) {
  
  ip_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IpAddr::set_ip(std::string&& value) {
  
  ip_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.IpAddr.ip)
}
inline void IpAddr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.IpAddr.ip)
}
inline void IpAddr::set_ip(const char* value,
    size_t size) {
  
  ip_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.IpAddr.ip)
}
inline std::string* IpAddr::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IpAddr::release_ip() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.IpAddr.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IpAddr::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.IpAddr.ip)
}

// uint32 port = 2;
inline void IpAddr::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddr::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IpAddr::port() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.IpAddr.port)
  return _internal_port();
}
inline void IpAddr::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void IpAddr::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.IpAddr.port)
}

// -------------------------------------------------------------------

// UserInfo

// string user_id = 1;
inline void UserInfo::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_id)
  return _internal_user_id();
}
inline void UserInfo::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_id)
}
inline std::string* UserInfo::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_id)
}
inline void UserInfo::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_id)
}
inline void UserInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_id)
}
inline std::string* UserInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_id)
}

// uint32 user_gender = 2;
inline void UserInfo::clear_user_gender() {
  user_gender_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_user_gender() const {
  return user_gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_gender)
  return _internal_user_gender();
}
inline void UserInfo::_internal_set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_gender_ = value;
}
inline void UserInfo::set_user_gender(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_gender(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_gender)
}

// string user_nick_name = 3;
inline void UserInfo::clear_user_nick_name() {
  user_nick_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::user_nick_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_nick_name)
  return _internal_user_nick_name();
}
inline void UserInfo::set_user_nick_name(const std::string& value) {
  _internal_set_user_nick_name(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_nick_name)
}
inline std::string* UserInfo::mutable_user_nick_name() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_nick_name)
  return _internal_mutable_user_nick_name();
}
inline const std::string& UserInfo::_internal_user_nick_name() const {
  return user_nick_name_.Get();
}
inline void UserInfo::_internal_set_user_nick_name(const std::string& value) {
  
  user_nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_user_nick_name(std::string&& value) {
  
  user_nick_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_nick_name)
}
inline void UserInfo::set_user_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_nick_name)
}
inline void UserInfo::set_user_nick_name(const char* value,
    size_t size) {
  
  user_nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_nick_name)
}
inline std::string* UserInfo::_internal_mutable_user_nick_name() {
  
  return user_nick_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_user_nick_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_nick_name)
  return user_nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_user_nick_name(std::string* user_nick_name) {
  if (user_nick_name != nullptr) {
    
  } else {
    
  }
  user_nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_nick_name)
}

// string avatar_url = 4;
inline void UserInfo::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.avatar_url)
  return _internal_avatar_url();
}
inline void UserInfo::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.avatar_url)
}
inline std::string* UserInfo::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& UserInfo::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void UserInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_avatar_url(std::string&& value) {
  
  avatar_url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.avatar_url)
}
inline void UserInfo::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.avatar_url)
}
inline void UserInfo::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.avatar_url)
}
inline std::string* UserInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.avatar_url)
}

// uint32 department_id = 5;
inline void UserInfo::clear_department_id() {
  department_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_department_id() const {
  return department_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::department_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.department_id)
  return _internal_department_id();
}
inline void UserInfo::_internal_set_department_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  department_id_ = value;
}
inline void UserInfo::set_department_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_department_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.department_id)
}

// string email = 6;
inline void UserInfo::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.email)
  return _internal_email();
}
inline void UserInfo::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.email)
}
inline std::string* UserInfo::mutable_email() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.email)
  return _internal_mutable_email();
}
inline const std::string& UserInfo::_internal_email() const {
  return email_.Get();
}
inline void UserInfo::_internal_set_email(const std::string& value) {
  
  email_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_email(std::string&& value) {
  
  email_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.email)
}
inline void UserInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.email)
}
inline void UserInfo::set_email(const char* value,
    size_t size) {
  
  email_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.email)
}
inline std::string* UserInfo::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.email)
}

// string user_real_name = 7;
inline void UserInfo::clear_user_real_name() {
  user_real_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::user_real_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_real_name)
  return _internal_user_real_name();
}
inline void UserInfo::set_user_real_name(const std::string& value) {
  _internal_set_user_real_name(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_real_name)
}
inline std::string* UserInfo::mutable_user_real_name() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_real_name)
  return _internal_mutable_user_real_name();
}
inline const std::string& UserInfo::_internal_user_real_name() const {
  return user_real_name_.Get();
}
inline void UserInfo::_internal_set_user_real_name(const std::string& value) {
  
  user_real_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_user_real_name(std::string&& value) {
  
  user_real_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_real_name)
}
inline void UserInfo::set_user_real_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_real_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_real_name)
}
inline void UserInfo::set_user_real_name(const char* value,
    size_t size) {
  
  user_real_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_real_name)
}
inline std::string* UserInfo::_internal_mutable_user_real_name() {
  
  return user_real_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_user_real_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_real_name)
  return user_real_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_user_real_name(std::string* user_real_name) {
  if (user_real_name != nullptr) {
    
  } else {
    
  }
  user_real_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_real_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_real_name)
}

// string user_tel = 8;
inline void UserInfo::clear_user_tel() {
  user_tel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::user_tel() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_tel)
  return _internal_user_tel();
}
inline void UserInfo::set_user_tel(const std::string& value) {
  _internal_set_user_tel(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_tel)
}
inline std::string* UserInfo::mutable_user_tel() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_tel)
  return _internal_mutable_user_tel();
}
inline const std::string& UserInfo::_internal_user_tel() const {
  return user_tel_.Get();
}
inline void UserInfo::_internal_set_user_tel(const std::string& value) {
  
  user_tel_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_user_tel(std::string&& value) {
  
  user_tel_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_tel)
}
inline void UserInfo::set_user_tel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_tel_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_tel)
}
inline void UserInfo::set_user_tel(const char* value,
    size_t size) {
  
  user_tel_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_tel)
}
inline std::string* UserInfo::_internal_mutable_user_tel() {
  
  return user_tel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_user_tel() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_tel)
  return user_tel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_user_tel(std::string* user_tel) {
  if (user_tel != nullptr) {
    
  } else {
    
  }
  user_tel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_tel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_tel)
}

// string user_domain = 9;
inline void UserInfo::clear_user_domain() {
  user_domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::user_domain() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_domain)
  return _internal_user_domain();
}
inline void UserInfo::set_user_domain(const std::string& value) {
  _internal_set_user_domain(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_domain)
}
inline std::string* UserInfo::mutable_user_domain() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_domain)
  return _internal_mutable_user_domain();
}
inline const std::string& UserInfo::_internal_user_domain() const {
  return user_domain_.Get();
}
inline void UserInfo::_internal_set_user_domain(const std::string& value) {
  
  user_domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_user_domain(std::string&& value) {
  
  user_domain_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_domain)
}
inline void UserInfo::set_user_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_domain)
}
inline void UserInfo::set_user_domain(const char* value,
    size_t size) {
  
  user_domain_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_domain)
}
inline std::string* UserInfo::_internal_mutable_user_domain() {
  
  return user_domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_user_domain() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_domain)
  return user_domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_user_domain(std::string* user_domain) {
  if (user_domain != nullptr) {
    
  } else {
    
  }
  user_domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_domain)
}

// uint32 status = 10;
inline void UserInfo::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.status)
  return _internal_status();
}
inline void UserInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void UserInfo::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.status)
}

// string sign_info = 11;
inline void UserInfo::clear_sign_info() {
  sign_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::sign_info() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.sign_info)
  return _internal_sign_info();
}
inline void UserInfo::set_sign_info(const std::string& value) {
  _internal_set_sign_info(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.sign_info)
}
inline std::string* UserInfo::mutable_sign_info() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.sign_info)
  return _internal_mutable_sign_info();
}
inline const std::string& UserInfo::_internal_sign_info() const {
  return sign_info_.Get();
}
inline void UserInfo::_internal_set_sign_info(const std::string& value) {
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_sign_info(std::string&& value) {
  
  sign_info_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.sign_info)
}
inline void UserInfo::set_sign_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.sign_info)
}
inline void UserInfo::set_sign_info(const char* value,
    size_t size) {
  
  sign_info_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.sign_info)
}
inline std::string* UserInfo::_internal_mutable_sign_info() {
  
  return sign_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_sign_info() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.sign_info)
  return sign_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_sign_info(std::string* sign_info) {
  if (sign_info != nullptr) {
    
  } else {
    
  }
  sign_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.sign_info)
}

// uint32 updated = 12;
inline void UserInfo::clear_updated() {
  updated_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_updated() const {
  return updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::updated() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.updated)
  return _internal_updated();
}
inline void UserInfo::_internal_set_updated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  updated_ = value;
}
inline void UserInfo::set_updated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_updated(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.updated)
}

// .IM.BaseDefine.UserRelationType relation = 13;
inline void UserInfo::clear_relation() {
  relation_ = 0;
}
inline ::IM::BaseDefine::UserRelationType UserInfo::_internal_relation() const {
  return static_cast< ::IM::BaseDefine::UserRelationType >(relation_);
}
inline ::IM::BaseDefine::UserRelationType UserInfo::relation() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.relation)
  return _internal_relation();
}
inline void UserInfo::_internal_set_relation(::IM::BaseDefine::UserRelationType value) {
  
  relation_ = value;
}
inline void UserInfo::set_relation(::IM::BaseDefine::UserRelationType value) {
  _internal_set_relation(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.relation)
}

// uint32 fans_cnt = 14;
inline void UserInfo::clear_fans_cnt() {
  fans_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::_internal_fans_cnt() const {
  return fans_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserInfo::fans_cnt() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.fans_cnt)
  return _internal_fans_cnt();
}
inline void UserInfo::_internal_set_fans_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fans_cnt_ = value;
}
inline void UserInfo::set_fans_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fans_cnt(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.fans_cnt)
}

// string user_addr = 15;
inline void UserInfo::clear_user_addr() {
  user_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::user_addr() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_addr)
  return _internal_user_addr();
}
inline void UserInfo::set_user_addr(const std::string& value) {
  _internal_set_user_addr(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_addr)
}
inline std::string* UserInfo::mutable_user_addr() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_addr)
  return _internal_mutable_user_addr();
}
inline const std::string& UserInfo::_internal_user_addr() const {
  return user_addr_.Get();
}
inline void UserInfo::_internal_set_user_addr(const std::string& value) {
  
  user_addr_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_user_addr(std::string&& value) {
  
  user_addr_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_addr)
}
inline void UserInfo::set_user_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_addr_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_addr)
}
inline void UserInfo::set_user_addr(const char* value,
    size_t size) {
  
  user_addr_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_addr)
}
inline std::string* UserInfo::_internal_mutable_user_addr() {
  
  return user_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_user_addr() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_addr)
  return user_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_user_addr(std::string* user_addr) {
  if (user_addr != nullptr) {
    
  } else {
    
  }
  user_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_addr)
}

// string user_pubkey = 16;
inline void UserInfo::clear_user_pubkey() {
  user_pubkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::user_pubkey() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.user_pubkey)
  return _internal_user_pubkey();
}
inline void UserInfo::set_user_pubkey(const std::string& value) {
  _internal_set_user_pubkey(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.user_pubkey)
}
inline std::string* UserInfo::mutable_user_pubkey() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.user_pubkey)
  return _internal_mutable_user_pubkey();
}
inline const std::string& UserInfo::_internal_user_pubkey() const {
  return user_pubkey_.Get();
}
inline void UserInfo::_internal_set_user_pubkey(const std::string& value) {
  
  user_pubkey_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_user_pubkey(std::string&& value) {
  
  user_pubkey_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.user_pubkey)
}
inline void UserInfo::set_user_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_pubkey_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.user_pubkey)
}
inline void UserInfo::set_user_pubkey(const char* value,
    size_t size) {
  
  user_pubkey_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.user_pubkey)
}
inline std::string* UserInfo::_internal_mutable_user_pubkey() {
  
  return user_pubkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_user_pubkey() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.user_pubkey)
  return user_pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_user_pubkey(std::string* user_pubkey) {
  if (user_pubkey != nullptr) {
    
  } else {
    
  }
  user_pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_pubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.user_pubkey)
}

// string referral_code = 17;
inline void UserInfo::clear_referral_code() {
  referral_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::referral_code() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserInfo.referral_code)
  return _internal_referral_code();
}
inline void UserInfo::set_referral_code(const std::string& value) {
  _internal_set_referral_code(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserInfo.referral_code)
}
inline std::string* UserInfo::mutable_referral_code() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserInfo.referral_code)
  return _internal_mutable_referral_code();
}
inline const std::string& UserInfo::_internal_referral_code() const {
  return referral_code_.Get();
}
inline void UserInfo::_internal_set_referral_code(const std::string& value) {
  
  referral_code_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_referral_code(std::string&& value) {
  
  referral_code_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserInfo.referral_code)
}
inline void UserInfo::set_referral_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referral_code_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserInfo.referral_code)
}
inline void UserInfo::set_referral_code(const char* value,
    size_t size) {
  
  referral_code_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserInfo.referral_code)
}
inline std::string* UserInfo::_internal_mutable_referral_code() {
  
  return referral_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_referral_code() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserInfo.referral_code)
  return referral_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_referral_code(std::string* referral_code) {
  if (referral_code != nullptr) {
    
  } else {
    
  }
  referral_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referral_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserInfo.referral_code)
}

// -------------------------------------------------------------------

// ContactSessionInfo

// string session_id = 1;
inline void ContactSessionInfo::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContactSessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_id)
  return _internal_session_id();
}
inline void ContactSessionInfo::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_id)
}
inline std::string* ContactSessionInfo::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.ContactSessionInfo.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& ContactSessionInfo::_internal_session_id() const {
  return session_id_.Get();
}
inline void ContactSessionInfo::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContactSessionInfo::set_session_id(std::string&& value) {
  
  session_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.ContactSessionInfo.session_id)
}
inline void ContactSessionInfo::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.ContactSessionInfo.session_id)
}
inline void ContactSessionInfo::set_session_id(const char* value,
    size_t size) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.ContactSessionInfo.session_id)
}
inline std::string* ContactSessionInfo::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContactSessionInfo::release_session_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.ContactSessionInfo.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContactSessionInfo::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.ContactSessionInfo.session_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void ContactSessionInfo::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType ContactSessionInfo::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType ContactSessionInfo::session_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_type)
  return _internal_session_type();
}
inline void ContactSessionInfo::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void ContactSessionInfo::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_type)
}

// .IM.BaseDefine.SessionStatusType session_status = 3;
inline void ContactSessionInfo::clear_session_status() {
  session_status_ = 0;
}
inline ::IM::BaseDefine::SessionStatusType ContactSessionInfo::_internal_session_status() const {
  return static_cast< ::IM::BaseDefine::SessionStatusType >(session_status_);
}
inline ::IM::BaseDefine::SessionStatusType ContactSessionInfo::session_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.session_status)
  return _internal_session_status();
}
inline void ContactSessionInfo::_internal_set_session_status(::IM::BaseDefine::SessionStatusType value) {
  
  session_status_ = value;
}
inline void ContactSessionInfo::set_session_status(::IM::BaseDefine::SessionStatusType value) {
  _internal_set_session_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.session_status)
}

// uint32 updated_time = 4;
inline void ContactSessionInfo::clear_updated_time() {
  updated_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContactSessionInfo::_internal_updated_time() const {
  return updated_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContactSessionInfo::updated_time() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.updated_time)
  return _internal_updated_time();
}
inline void ContactSessionInfo::_internal_set_updated_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  updated_time_ = value;
}
inline void ContactSessionInfo::set_updated_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_updated_time(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.updated_time)
}

// uint32 latest_msg_id = 5;
inline void ContactSessionInfo::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContactSessionInfo::_internal_latest_msg_id() const {
  return latest_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContactSessionInfo::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_id)
  return _internal_latest_msg_id();
}
inline void ContactSessionInfo::_internal_set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_msg_id_ = value;
}
inline void ContactSessionInfo::set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_msg_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_id)
}

// bytes latest_msg_data = 6;
inline void ContactSessionInfo::clear_latest_msg_data() {
  latest_msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContactSessionInfo::latest_msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  return _internal_latest_msg_data();
}
inline void ContactSessionInfo::set_latest_msg_data(const std::string& value) {
  _internal_set_latest_msg_data(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
inline std::string* ContactSessionInfo::mutable_latest_msg_data() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  return _internal_mutable_latest_msg_data();
}
inline const std::string& ContactSessionInfo::_internal_latest_msg_data() const {
  return latest_msg_data_.Get();
}
inline void ContactSessionInfo::_internal_set_latest_msg_data(const std::string& value) {
  
  latest_msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContactSessionInfo::set_latest_msg_data(std::string&& value) {
  
  latest_msg_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
inline void ContactSessionInfo::set_latest_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latest_msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
inline void ContactSessionInfo::set_latest_msg_data(const void* value,
    size_t size) {
  
  latest_msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}
inline std::string* ContactSessionInfo::_internal_mutable_latest_msg_data() {
  
  return latest_msg_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContactSessionInfo::release_latest_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
  return latest_msg_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContactSessionInfo::set_allocated_latest_msg_data(std::string* latest_msg_data) {
  if (latest_msg_data != nullptr) {
    
  } else {
    
  }
  latest_msg_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latest_msg_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.ContactSessionInfo.latest_msg_data)
}

// .IM.BaseDefine.MsgType latest_msg_type = 7;
inline void ContactSessionInfo::clear_latest_msg_type() {
  latest_msg_type_ = 0;
}
inline ::IM::BaseDefine::MsgType ContactSessionInfo::_internal_latest_msg_type() const {
  return static_cast< ::IM::BaseDefine::MsgType >(latest_msg_type_);
}
inline ::IM::BaseDefine::MsgType ContactSessionInfo::latest_msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_type)
  return _internal_latest_msg_type();
}
inline void ContactSessionInfo::_internal_set_latest_msg_type(::IM::BaseDefine::MsgType value) {
  
  latest_msg_type_ = value;
}
inline void ContactSessionInfo::set_latest_msg_type(::IM::BaseDefine::MsgType value) {
  _internal_set_latest_msg_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_type)
}

// string latest_msg_from_user_id = 8;
inline void ContactSessionInfo::clear_latest_msg_from_user_id() {
  latest_msg_from_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContactSessionInfo::latest_msg_from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
  return _internal_latest_msg_from_user_id();
}
inline void ContactSessionInfo::set_latest_msg_from_user_id(const std::string& value) {
  _internal_set_latest_msg_from_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
}
inline std::string* ContactSessionInfo::mutable_latest_msg_from_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
  return _internal_mutable_latest_msg_from_user_id();
}
inline const std::string& ContactSessionInfo::_internal_latest_msg_from_user_id() const {
  return latest_msg_from_user_id_.Get();
}
inline void ContactSessionInfo::_internal_set_latest_msg_from_user_id(const std::string& value) {
  
  latest_msg_from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContactSessionInfo::set_latest_msg_from_user_id(std::string&& value) {
  
  latest_msg_from_user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
}
inline void ContactSessionInfo::set_latest_msg_from_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latest_msg_from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
}
inline void ContactSessionInfo::set_latest_msg_from_user_id(const char* value,
    size_t size) {
  
  latest_msg_from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
}
inline std::string* ContactSessionInfo::_internal_mutable_latest_msg_from_user_id() {
  
  return latest_msg_from_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContactSessionInfo::release_latest_msg_from_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
  return latest_msg_from_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContactSessionInfo::set_allocated_latest_msg_from_user_id(std::string* latest_msg_from_user_id) {
  if (latest_msg_from_user_id != nullptr) {
    
  } else {
    
  }
  latest_msg_from_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latest_msg_from_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.ContactSessionInfo.latest_msg_from_user_id)
}

// -------------------------------------------------------------------

// UserStat

// string user_id = 1;
inline void UserStat::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserStat::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserStat.user_id)
  return _internal_user_id();
}
inline void UserStat::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserStat.user_id)
}
inline std::string* UserStat::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserStat.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserStat::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserStat::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserStat::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserStat.user_id)
}
inline void UserStat::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserStat.user_id)
}
inline void UserStat::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserStat.user_id)
}
inline std::string* UserStat::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserStat::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserStat.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserStat::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserStat.user_id)
}

// .IM.BaseDefine.UserStatType status = 2;
inline void UserStat::clear_status() {
  status_ = 0;
}
inline ::IM::BaseDefine::UserStatType UserStat::_internal_status() const {
  return static_cast< ::IM::BaseDefine::UserStatType >(status_);
}
inline ::IM::BaseDefine::UserStatType UserStat::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserStat.status)
  return _internal_status();
}
inline void UserStat::_internal_set_status(::IM::BaseDefine::UserStatType value) {
  
  status_ = value;
}
inline void UserStat::set_status(::IM::BaseDefine::UserStatType value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserStat.status)
}

// -------------------------------------------------------------------

// ServerUserStat

// string user_id = 1;
inline void ServerUserStat::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServerUserStat::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.user_id)
  return _internal_user_id();
}
inline void ServerUserStat::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.user_id)
}
inline std::string* ServerUserStat::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.ServerUserStat.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ServerUserStat::_internal_user_id() const {
  return user_id_.Get();
}
inline void ServerUserStat::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServerUserStat::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.ServerUserStat.user_id)
}
inline void ServerUserStat::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.ServerUserStat.user_id)
}
inline void ServerUserStat::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.ServerUserStat.user_id)
}
inline std::string* ServerUserStat::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServerUserStat::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.ServerUserStat.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerUserStat::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.ServerUserStat.user_id)
}

// .IM.BaseDefine.UserStatType status = 2;
inline void ServerUserStat::clear_status() {
  status_ = 0;
}
inline ::IM::BaseDefine::UserStatType ServerUserStat::_internal_status() const {
  return static_cast< ::IM::BaseDefine::UserStatType >(status_);
}
inline ::IM::BaseDefine::UserStatType ServerUserStat::status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.status)
  return _internal_status();
}
inline void ServerUserStat::_internal_set_status(::IM::BaseDefine::UserStatType value) {
  
  status_ = value;
}
inline void ServerUserStat::set_status(::IM::BaseDefine::UserStatType value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.status)
}

// .IM.BaseDefine.ClientType client_type = 3;
inline void ServerUserStat::clear_client_type() {
  client_type_ = 0;
}
inline ::IM::BaseDefine::ClientType ServerUserStat::_internal_client_type() const {
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline ::IM::BaseDefine::ClientType ServerUserStat::client_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ServerUserStat.client_type)
  return _internal_client_type();
}
inline void ServerUserStat::_internal_set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
}
inline void ServerUserStat::set_client_type(::IM::BaseDefine::ClientType value) {
  _internal_set_client_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ServerUserStat.client_type)
}

// -------------------------------------------------------------------

// UnreadInfo

// string session_id = 1;
inline void UnreadInfo::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnreadInfo::session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.session_id)
  return _internal_session_id();
}
inline void UnreadInfo::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.session_id)
}
inline std::string* UnreadInfo::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UnreadInfo.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& UnreadInfo::_internal_session_id() const {
  return session_id_.Get();
}
inline void UnreadInfo::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnreadInfo::set_session_id(std::string&& value) {
  
  session_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UnreadInfo.session_id)
}
inline void UnreadInfo::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UnreadInfo.session_id)
}
inline void UnreadInfo::set_session_id(const char* value,
    size_t size) {
  
  session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UnreadInfo.session_id)
}
inline std::string* UnreadInfo::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnreadInfo::release_session_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UnreadInfo.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnreadInfo::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UnreadInfo.session_id)
}

// .IM.BaseDefine.SessionType session_type = 2;
inline void UnreadInfo::clear_session_type() {
  session_type_ = 0;
}
inline ::IM::BaseDefine::SessionType UnreadInfo::_internal_session_type() const {
  return static_cast< ::IM::BaseDefine::SessionType >(session_type_);
}
inline ::IM::BaseDefine::SessionType UnreadInfo::session_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.session_type)
  return _internal_session_type();
}
inline void UnreadInfo::_internal_set_session_type(::IM::BaseDefine::SessionType value) {
  
  session_type_ = value;
}
inline void UnreadInfo::set_session_type(::IM::BaseDefine::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.session_type)
}

// uint32 unread_cnt = 3;
inline void UnreadInfo::clear_unread_cnt() {
  unread_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnreadInfo::_internal_unread_cnt() const {
  return unread_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnreadInfo::unread_cnt() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.unread_cnt)
  return _internal_unread_cnt();
}
inline void UnreadInfo::_internal_set_unread_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unread_cnt_ = value;
}
inline void UnreadInfo::set_unread_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unread_cnt(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.unread_cnt)
}

// uint32 latest_msg_id = 4;
inline void UnreadInfo::clear_latest_msg_id() {
  latest_msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnreadInfo::_internal_latest_msg_id() const {
  return latest_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UnreadInfo::latest_msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_id)
  return _internal_latest_msg_id();
}
inline void UnreadInfo::_internal_set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  latest_msg_id_ = value;
}
inline void UnreadInfo::set_latest_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_latest_msg_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_id)
}

// bytes latest_msg_data = 5;
inline void UnreadInfo::clear_latest_msg_data() {
  latest_msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnreadInfo::latest_msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_data)
  return _internal_latest_msg_data();
}
inline void UnreadInfo::set_latest_msg_data(const std::string& value) {
  _internal_set_latest_msg_data(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
inline std::string* UnreadInfo::mutable_latest_msg_data() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UnreadInfo.latest_msg_data)
  return _internal_mutable_latest_msg_data();
}
inline const std::string& UnreadInfo::_internal_latest_msg_data() const {
  return latest_msg_data_.Get();
}
inline void UnreadInfo::_internal_set_latest_msg_data(const std::string& value) {
  
  latest_msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnreadInfo::set_latest_msg_data(std::string&& value) {
  
  latest_msg_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
inline void UnreadInfo::set_latest_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latest_msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
inline void UnreadInfo::set_latest_msg_data(const void* value,
    size_t size) {
  
  latest_msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UnreadInfo.latest_msg_data)
}
inline std::string* UnreadInfo::_internal_mutable_latest_msg_data() {
  
  return latest_msg_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnreadInfo::release_latest_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UnreadInfo.latest_msg_data)
  return latest_msg_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnreadInfo::set_allocated_latest_msg_data(std::string* latest_msg_data) {
  if (latest_msg_data != nullptr) {
    
  } else {
    
  }
  latest_msg_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latest_msg_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UnreadInfo.latest_msg_data)
}

// .IM.BaseDefine.MsgType latest_msg_type = 6;
inline void UnreadInfo::clear_latest_msg_type() {
  latest_msg_type_ = 0;
}
inline ::IM::BaseDefine::MsgType UnreadInfo::_internal_latest_msg_type() const {
  return static_cast< ::IM::BaseDefine::MsgType >(latest_msg_type_);
}
inline ::IM::BaseDefine::MsgType UnreadInfo::latest_msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_type)
  return _internal_latest_msg_type();
}
inline void UnreadInfo::_internal_set_latest_msg_type(::IM::BaseDefine::MsgType value) {
  
  latest_msg_type_ = value;
}
inline void UnreadInfo::set_latest_msg_type(::IM::BaseDefine::MsgType value) {
  _internal_set_latest_msg_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_type)
}

// string latest_msg_from_user_id = 7;
inline void UnreadInfo::clear_latest_msg_from_user_id() {
  latest_msg_from_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UnreadInfo::latest_msg_from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
  return _internal_latest_msg_from_user_id();
}
inline void UnreadInfo::set_latest_msg_from_user_id(const std::string& value) {
  _internal_set_latest_msg_from_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
}
inline std::string* UnreadInfo::mutable_latest_msg_from_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
  return _internal_mutable_latest_msg_from_user_id();
}
inline const std::string& UnreadInfo::_internal_latest_msg_from_user_id() const {
  return latest_msg_from_user_id_.Get();
}
inline void UnreadInfo::_internal_set_latest_msg_from_user_id(const std::string& value) {
  
  latest_msg_from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UnreadInfo::set_latest_msg_from_user_id(std::string&& value) {
  
  latest_msg_from_user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
}
inline void UnreadInfo::set_latest_msg_from_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latest_msg_from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
}
inline void UnreadInfo::set_latest_msg_from_user_id(const char* value,
    size_t size) {
  
  latest_msg_from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
}
inline std::string* UnreadInfo::_internal_mutable_latest_msg_from_user_id() {
  
  return latest_msg_from_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UnreadInfo::release_latest_msg_from_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
  return latest_msg_from_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UnreadInfo::set_allocated_latest_msg_from_user_id(std::string* latest_msg_from_user_id) {
  if (latest_msg_from_user_id != nullptr) {
    
  } else {
    
  }
  latest_msg_from_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latest_msg_from_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UnreadInfo.latest_msg_from_user_id)
}

// repeated bytes all_pay_msg = 8;
inline int UnreadInfo::_internal_all_pay_msg_size() const {
  return all_pay_msg_.size();
}
inline int UnreadInfo::all_pay_msg_size() const {
  return _internal_all_pay_msg_size();
}
inline void UnreadInfo::clear_all_pay_msg() {
  all_pay_msg_.Clear();
}
inline std::string* UnreadInfo::add_all_pay_msg() {
  // @@protoc_insertion_point(field_add_mutable:IM.BaseDefine.UnreadInfo.all_pay_msg)
  return _internal_add_all_pay_msg();
}
inline const std::string& UnreadInfo::_internal_all_pay_msg(int index) const {
  return all_pay_msg_.Get(index);
}
inline const std::string& UnreadInfo::all_pay_msg(int index) const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UnreadInfo.all_pay_msg)
  return _internal_all_pay_msg(index);
}
inline std::string* UnreadInfo::mutable_all_pay_msg(int index) {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UnreadInfo.all_pay_msg)
  return all_pay_msg_.Mutable(index);
}
inline void UnreadInfo::set_all_pay_msg(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.all_pay_msg)
  all_pay_msg_.Mutable(index)->assign(value);
}
inline void UnreadInfo::set_all_pay_msg(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UnreadInfo.all_pay_msg)
  all_pay_msg_.Mutable(index)->assign(std::move(value));
}
inline void UnreadInfo::set_all_pay_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  all_pay_msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UnreadInfo.all_pay_msg)
}
inline void UnreadInfo::set_all_pay_msg(int index, const void* value, size_t size) {
  all_pay_msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UnreadInfo.all_pay_msg)
}
inline std::string* UnreadInfo::_internal_add_all_pay_msg() {
  return all_pay_msg_.Add();
}
inline void UnreadInfo::add_all_pay_msg(const std::string& value) {
  all_pay_msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.BaseDefine.UnreadInfo.all_pay_msg)
}
inline void UnreadInfo::add_all_pay_msg(std::string&& value) {
  all_pay_msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IM.BaseDefine.UnreadInfo.all_pay_msg)
}
inline void UnreadInfo::add_all_pay_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  all_pay_msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.BaseDefine.UnreadInfo.all_pay_msg)
}
inline void UnreadInfo::add_all_pay_msg(const void* value, size_t size) {
  all_pay_msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.BaseDefine.UnreadInfo.all_pay_msg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UnreadInfo::all_pay_msg() const {
  // @@protoc_insertion_point(field_list:IM.BaseDefine.UnreadInfo.all_pay_msg)
  return all_pay_msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UnreadInfo::mutable_all_pay_msg() {
  // @@protoc_insertion_point(field_mutable_list:IM.BaseDefine.UnreadInfo.all_pay_msg)
  return &all_pay_msg_;
}

// -------------------------------------------------------------------

// MsgInfo

// uint32 msg_id = 1;
inline void MsgInfo::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MsgInfo::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MsgInfo::msg_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_id)
  return _internal_msg_id();
}
inline void MsgInfo::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
}
inline void MsgInfo::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_id)
}

// string from_session_id = 2;
inline void MsgInfo::clear_from_session_id() {
  from_session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MsgInfo::from_session_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.from_session_id)
  return _internal_from_session_id();
}
inline void MsgInfo::set_from_session_id(const std::string& value) {
  _internal_set_from_session_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.from_session_id)
}
inline std::string* MsgInfo::mutable_from_session_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.MsgInfo.from_session_id)
  return _internal_mutable_from_session_id();
}
inline const std::string& MsgInfo::_internal_from_session_id() const {
  return from_session_id_.Get();
}
inline void MsgInfo::_internal_set_from_session_id(const std::string& value) {
  
  from_session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MsgInfo::set_from_session_id(std::string&& value) {
  
  from_session_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.MsgInfo.from_session_id)
}
inline void MsgInfo::set_from_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.MsgInfo.from_session_id)
}
inline void MsgInfo::set_from_session_id(const char* value,
    size_t size) {
  
  from_session_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.MsgInfo.from_session_id)
}
inline std::string* MsgInfo::_internal_mutable_from_session_id() {
  
  return from_session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MsgInfo::release_from_session_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.MsgInfo.from_session_id)
  return from_session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgInfo::set_allocated_from_session_id(std::string* from_session_id) {
  if (from_session_id != nullptr) {
    
  } else {
    
  }
  from_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.MsgInfo.from_session_id)
}

// uint32 create_time = 3;
inline void MsgInfo::clear_create_time() {
  create_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MsgInfo::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MsgInfo::create_time() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.create_time)
  return _internal_create_time();
}
inline void MsgInfo::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  create_time_ = value;
}
inline void MsgInfo::set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.create_time)
}

// .IM.BaseDefine.MsgType msg_type = 4;
inline void MsgInfo::clear_msg_type() {
  msg_type_ = 0;
}
inline ::IM::BaseDefine::MsgType MsgInfo::_internal_msg_type() const {
  return static_cast< ::IM::BaseDefine::MsgType >(msg_type_);
}
inline ::IM::BaseDefine::MsgType MsgInfo::msg_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_type)
  return _internal_msg_type();
}
inline void MsgInfo::_internal_set_msg_type(::IM::BaseDefine::MsgType value) {
  
  msg_type_ = value;
}
inline void MsgInfo::set_msg_type(::IM::BaseDefine::MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_type)
}

// bytes msg_data = 5;
inline void MsgInfo::clear_msg_data() {
  msg_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MsgInfo::msg_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_data)
  return _internal_msg_data();
}
inline void MsgInfo::set_msg_data(const std::string& value) {
  _internal_set_msg_data(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_data)
}
inline std::string* MsgInfo::mutable_msg_data() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.MsgInfo.msg_data)
  return _internal_mutable_msg_data();
}
inline const std::string& MsgInfo::_internal_msg_data() const {
  return msg_data_.Get();
}
inline void MsgInfo::_internal_set_msg_data(const std::string& value) {
  
  msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MsgInfo::set_msg_data(std::string&& value) {
  
  msg_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.MsgInfo.msg_data)
}
inline void MsgInfo::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.MsgInfo.msg_data)
}
inline void MsgInfo::set_msg_data(const void* value,
    size_t size) {
  
  msg_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.MsgInfo.msg_data)
}
inline std::string* MsgInfo::_internal_mutable_msg_data() {
  
  return msg_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MsgInfo::release_msg_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.MsgInfo.msg_data)
  return msg_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgInfo::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    
  } else {
    
  }
  msg_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.MsgInfo.msg_data)
}

// bytes msg_sig = 6;
inline void MsgInfo::clear_msg_sig() {
  msg_sig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MsgInfo::msg_sig() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.MsgInfo.msg_sig)
  return _internal_msg_sig();
}
inline void MsgInfo::set_msg_sig(const std::string& value) {
  _internal_set_msg_sig(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.MsgInfo.msg_sig)
}
inline std::string* MsgInfo::mutable_msg_sig() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.MsgInfo.msg_sig)
  return _internal_mutable_msg_sig();
}
inline const std::string& MsgInfo::_internal_msg_sig() const {
  return msg_sig_.Get();
}
inline void MsgInfo::_internal_set_msg_sig(const std::string& value) {
  
  msg_sig_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MsgInfo::set_msg_sig(std::string&& value) {
  
  msg_sig_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.MsgInfo.msg_sig)
}
inline void MsgInfo::set_msg_sig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_sig_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.MsgInfo.msg_sig)
}
inline void MsgInfo::set_msg_sig(const void* value,
    size_t size) {
  
  msg_sig_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.MsgInfo.msg_sig)
}
inline std::string* MsgInfo::_internal_mutable_msg_sig() {
  
  return msg_sig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MsgInfo::release_msg_sig() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.MsgInfo.msg_sig)
  return msg_sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgInfo::set_allocated_msg_sig(std::string* msg_sig) {
  if (msg_sig != nullptr) {
    
  } else {
    
  }
  msg_sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_sig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.MsgInfo.msg_sig)
}

// -------------------------------------------------------------------

// BlogInfo

// uint32 blog_id = 1;
inline void BlogInfo::clear_blog_id() {
  blog_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlogInfo::_internal_blog_id() const {
  return blog_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlogInfo::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.BlogInfo.blog_id)
  return _internal_blog_id();
}
inline void BlogInfo::_internal_set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blog_id_ = value;
}
inline void BlogInfo::set_blog_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blog_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.BlogInfo.blog_id)
}

// string writer_user_id = 2;
inline void BlogInfo::clear_writer_user_id() {
  writer_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlogInfo::writer_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.BlogInfo.writer_user_id)
  return _internal_writer_user_id();
}
inline void BlogInfo::set_writer_user_id(const std::string& value) {
  _internal_set_writer_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.BlogInfo.writer_user_id)
}
inline std::string* BlogInfo::mutable_writer_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.BlogInfo.writer_user_id)
  return _internal_mutable_writer_user_id();
}
inline const std::string& BlogInfo::_internal_writer_user_id() const {
  return writer_user_id_.Get();
}
inline void BlogInfo::_internal_set_writer_user_id(const std::string& value) {
  
  writer_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlogInfo::set_writer_user_id(std::string&& value) {
  
  writer_user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.BlogInfo.writer_user_id)
}
inline void BlogInfo::set_writer_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  writer_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.BlogInfo.writer_user_id)
}
inline void BlogInfo::set_writer_user_id(const char* value,
    size_t size) {
  
  writer_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.BlogInfo.writer_user_id)
}
inline std::string* BlogInfo::_internal_mutable_writer_user_id() {
  
  return writer_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlogInfo::release_writer_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.BlogInfo.writer_user_id)
  return writer_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlogInfo::set_allocated_writer_user_id(std::string* writer_user_id) {
  if (writer_user_id != nullptr) {
    
  } else {
    
  }
  writer_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), writer_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.BlogInfo.writer_user_id)
}

// string nick_name = 3;
inline void BlogInfo::clear_nick_name() {
  nick_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlogInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.BlogInfo.nick_name)
  return _internal_nick_name();
}
inline void BlogInfo::set_nick_name(const std::string& value) {
  _internal_set_nick_name(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.BlogInfo.nick_name)
}
inline std::string* BlogInfo::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.BlogInfo.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& BlogInfo::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void BlogInfo::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlogInfo::set_nick_name(std::string&& value) {
  
  nick_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.BlogInfo.nick_name)
}
inline void BlogInfo::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.BlogInfo.nick_name)
}
inline void BlogInfo::set_nick_name(const char* value,
    size_t size) {
  
  nick_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.BlogInfo.nick_name)
}
inline std::string* BlogInfo::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlogInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.BlogInfo.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlogInfo::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.BlogInfo.nick_name)
}

// string avatar_url = 4;
inline void BlogInfo::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlogInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.BlogInfo.avatar_url)
  return _internal_avatar_url();
}
inline void BlogInfo::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.BlogInfo.avatar_url)
}
inline std::string* BlogInfo::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.BlogInfo.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& BlogInfo::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void BlogInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlogInfo::set_avatar_url(std::string&& value) {
  
  avatar_url_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.BlogInfo.avatar_url)
}
inline void BlogInfo::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.BlogInfo.avatar_url)
}
inline void BlogInfo::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.BlogInfo.avatar_url)
}
inline std::string* BlogInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlogInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.BlogInfo.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlogInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.BlogInfo.avatar_url)
}

// uint32 like_cnt = 5;
inline void BlogInfo::clear_like_cnt() {
  like_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlogInfo::_internal_like_cnt() const {
  return like_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlogInfo::like_cnt() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.BlogInfo.like_cnt)
  return _internal_like_cnt();
}
inline void BlogInfo::_internal_set_like_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  like_cnt_ = value;
}
inline void BlogInfo::set_like_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_like_cnt(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.BlogInfo.like_cnt)
}

// uint32 comment_cnt = 6;
inline void BlogInfo::clear_comment_cnt() {
  comment_cnt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlogInfo::_internal_comment_cnt() const {
  return comment_cnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlogInfo::comment_cnt() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.BlogInfo.comment_cnt)
  return _internal_comment_cnt();
}
inline void BlogInfo::_internal_set_comment_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  comment_cnt_ = value;
}
inline void BlogInfo::set_comment_cnt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_comment_cnt(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.BlogInfo.comment_cnt)
}

// uint32 create_time = 7;
inline void BlogInfo::clear_create_time() {
  create_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlogInfo::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlogInfo::create_time() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.BlogInfo.create_time)
  return _internal_create_time();
}
inline void BlogInfo::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  create_time_ = value;
}
inline void BlogInfo::set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.BlogInfo.create_time)
}

// bytes blog_data = 8;
inline void BlogInfo::clear_blog_data() {
  blog_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlogInfo::blog_data() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.BlogInfo.blog_data)
  return _internal_blog_data();
}
inline void BlogInfo::set_blog_data(const std::string& value) {
  _internal_set_blog_data(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.BlogInfo.blog_data)
}
inline std::string* BlogInfo::mutable_blog_data() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.BlogInfo.blog_data)
  return _internal_mutable_blog_data();
}
inline const std::string& BlogInfo::_internal_blog_data() const {
  return blog_data_.Get();
}
inline void BlogInfo::_internal_set_blog_data(const std::string& value) {
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlogInfo::set_blog_data(std::string&& value) {
  
  blog_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.BlogInfo.blog_data)
}
inline void BlogInfo::set_blog_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.BlogInfo.blog_data)
}
inline void BlogInfo::set_blog_data(const void* value,
    size_t size) {
  
  blog_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.BlogInfo.blog_data)
}
inline std::string* BlogInfo::_internal_mutable_blog_data() {
  
  return blog_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlogInfo::release_blog_data() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.BlogInfo.blog_data)
  return blog_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlogInfo::set_allocated_blog_data(std::string* blog_data) {
  if (blog_data != nullptr) {
    
  } else {
    
  }
  blog_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blog_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.BlogInfo.blog_data)
}

// -------------------------------------------------------------------

// GroupVersionInfo

// string group_id = 1;
inline void GroupVersionInfo::clear_group_id() {
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupVersionInfo::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupVersionInfo.group_id)
  return _internal_group_id();
}
inline void GroupVersionInfo::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupVersionInfo.group_id)
}
inline std::string* GroupVersionInfo::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupVersionInfo.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& GroupVersionInfo::_internal_group_id() const {
  return group_id_.Get();
}
inline void GroupVersionInfo::_internal_set_group_id(const std::string& value) {
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupVersionInfo::set_group_id(std::string&& value) {
  
  group_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.GroupVersionInfo.group_id)
}
inline void GroupVersionInfo::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupVersionInfo.group_id)
}
inline void GroupVersionInfo::set_group_id(const char* value,
    size_t size) {
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupVersionInfo.group_id)
}
inline std::string* GroupVersionInfo::_internal_mutable_group_id() {
  
  return group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupVersionInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupVersionInfo.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupVersionInfo::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupVersionInfo.group_id)
}

// uint32 version = 2;
inline void GroupVersionInfo::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupVersionInfo::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupVersionInfo::version() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupVersionInfo.version)
  return _internal_version();
}
inline void GroupVersionInfo::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void GroupVersionInfo::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupVersionInfo.version)
}

// -------------------------------------------------------------------

// GroupInfo

// string group_id = 1;
inline void GroupInfo::clear_group_id() {
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupInfo::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_id)
  return _internal_group_id();
}
inline void GroupInfo::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_id)
}
inline std::string* GroupInfo::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& GroupInfo::_internal_group_id() const {
  return group_id_.Get();
}
inline void GroupInfo::_internal_set_group_id(const std::string& value) {
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupInfo::set_group_id(std::string&& value) {
  
  group_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.GroupInfo.group_id)
}
inline void GroupInfo::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_id)
}
inline void GroupInfo::set_group_id(const char* value,
    size_t size) {
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_id)
}
inline std::string* GroupInfo::_internal_mutable_group_id() {
  
  return group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupInfo.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupInfo::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupInfo.group_id)
}

// uint32 version = 2;
inline void GroupInfo::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupInfo::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupInfo::version() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.version)
  return _internal_version();
}
inline void GroupInfo::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void GroupInfo::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.version)
}

// string group_name = 3;
inline void GroupInfo::clear_group_name() {
  group_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupInfo::group_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_name)
  return _internal_group_name();
}
inline void GroupInfo::set_group_name(const std::string& value) {
  _internal_set_group_name(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_name)
}
inline std::string* GroupInfo::mutable_group_name() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_name)
  return _internal_mutable_group_name();
}
inline const std::string& GroupInfo::_internal_group_name() const {
  return group_name_.Get();
}
inline void GroupInfo::_internal_set_group_name(const std::string& value) {
  
  group_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupInfo::set_group_name(std::string&& value) {
  
  group_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.GroupInfo.group_name)
}
inline void GroupInfo::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_name)
}
inline void GroupInfo::set_group_name(const char* value,
    size_t size) {
  
  group_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_name)
}
inline std::string* GroupInfo::_internal_mutable_group_name() {
  
  return group_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupInfo::release_group_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupInfo.group_name)
  return group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupInfo::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupInfo.group_name)
}

// string group_avatar = 4;
inline void GroupInfo::clear_group_avatar() {
  group_avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupInfo::group_avatar() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_avatar)
  return _internal_group_avatar();
}
inline void GroupInfo::set_group_avatar(const std::string& value) {
  _internal_set_group_avatar(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_avatar)
}
inline std::string* GroupInfo::mutable_group_avatar() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_avatar)
  return _internal_mutable_group_avatar();
}
inline const std::string& GroupInfo::_internal_group_avatar() const {
  return group_avatar_.Get();
}
inline void GroupInfo::_internal_set_group_avatar(const std::string& value) {
  
  group_avatar_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupInfo::set_group_avatar(std::string&& value) {
  
  group_avatar_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.GroupInfo.group_avatar)
}
inline void GroupInfo::set_group_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_avatar_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_avatar)
}
inline void GroupInfo::set_group_avatar(const char* value,
    size_t size) {
  
  group_avatar_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_avatar)
}
inline std::string* GroupInfo::_internal_mutable_group_avatar() {
  
  return group_avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupInfo::release_group_avatar() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupInfo.group_avatar)
  return group_avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupInfo::set_allocated_group_avatar(std::string* group_avatar) {
  if (group_avatar != nullptr) {
    
  } else {
    
  }
  group_avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_avatar,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupInfo.group_avatar)
}

// string group_creator_id = 5;
inline void GroupInfo::clear_group_creator_id() {
  group_creator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GroupInfo::group_creator_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_creator_id)
  return _internal_group_creator_id();
}
inline void GroupInfo::set_group_creator_id(const std::string& value) {
  _internal_set_group_creator_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_creator_id)
}
inline std::string* GroupInfo::mutable_group_creator_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_creator_id)
  return _internal_mutable_group_creator_id();
}
inline const std::string& GroupInfo::_internal_group_creator_id() const {
  return group_creator_id_.Get();
}
inline void GroupInfo::_internal_set_group_creator_id(const std::string& value) {
  
  group_creator_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GroupInfo::set_group_creator_id(std::string&& value) {
  
  group_creator_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.GroupInfo.group_creator_id)
}
inline void GroupInfo::set_group_creator_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_creator_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_creator_id)
}
inline void GroupInfo::set_group_creator_id(const char* value,
    size_t size) {
  
  group_creator_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_creator_id)
}
inline std::string* GroupInfo::_internal_mutable_group_creator_id() {
  
  return group_creator_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GroupInfo::release_group_creator_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.GroupInfo.group_creator_id)
  return group_creator_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GroupInfo::set_allocated_group_creator_id(std::string* group_creator_id) {
  if (group_creator_id != nullptr) {
    
  } else {
    
  }
  group_creator_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_creator_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.GroupInfo.group_creator_id)
}

// .IM.BaseDefine.GroupType group_type = 6;
inline void GroupInfo::clear_group_type() {
  group_type_ = 0;
}
inline ::IM::BaseDefine::GroupType GroupInfo::_internal_group_type() const {
  return static_cast< ::IM::BaseDefine::GroupType >(group_type_);
}
inline ::IM::BaseDefine::GroupType GroupInfo::group_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_type)
  return _internal_group_type();
}
inline void GroupInfo::_internal_set_group_type(::IM::BaseDefine::GroupType value) {
  
  group_type_ = value;
}
inline void GroupInfo::set_group_type(::IM::BaseDefine::GroupType value) {
  _internal_set_group_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_type)
}

// uint32 shield_status = 7;
inline void GroupInfo::clear_shield_status() {
  shield_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupInfo::_internal_shield_status() const {
  return shield_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroupInfo::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.shield_status)
  return _internal_shield_status();
}
inline void GroupInfo::_internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shield_status_ = value;
}
inline void GroupInfo::set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shield_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.shield_status)
}

// repeated string group_member_list = 8;
inline int GroupInfo::_internal_group_member_list_size() const {
  return group_member_list_.size();
}
inline int GroupInfo::group_member_list_size() const {
  return _internal_group_member_list_size();
}
inline void GroupInfo::clear_group_member_list() {
  group_member_list_.Clear();
}
inline std::string* GroupInfo::add_group_member_list() {
  // @@protoc_insertion_point(field_add_mutable:IM.BaseDefine.GroupInfo.group_member_list)
  return _internal_add_group_member_list();
}
inline const std::string& GroupInfo::_internal_group_member_list(int index) const {
  return group_member_list_.Get(index);
}
inline const std::string& GroupInfo::group_member_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_member_list)
  return _internal_group_member_list(index);
}
inline std::string* GroupInfo::mutable_group_member_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_member_list)
  return group_member_list_.Mutable(index);
}
inline void GroupInfo::set_group_member_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_member_list)
  group_member_list_.Mutable(index)->assign(value);
}
inline void GroupInfo::set_group_member_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IM.BaseDefine.GroupInfo.group_member_list)
  group_member_list_.Mutable(index)->assign(std::move(value));
}
inline void GroupInfo::set_group_member_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_member_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.GroupInfo.group_member_list)
}
inline void GroupInfo::set_group_member_list(int index, const char* value, size_t size) {
  group_member_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.GroupInfo.group_member_list)
}
inline std::string* GroupInfo::_internal_add_group_member_list() {
  return group_member_list_.Add();
}
inline void GroupInfo::add_group_member_list(const std::string& value) {
  group_member_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IM.BaseDefine.GroupInfo.group_member_list)
}
inline void GroupInfo::add_group_member_list(std::string&& value) {
  group_member_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IM.BaseDefine.GroupInfo.group_member_list)
}
inline void GroupInfo::add_group_member_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_member_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IM.BaseDefine.GroupInfo.group_member_list)
}
inline void GroupInfo::add_group_member_list(const char* value, size_t size) {
  group_member_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IM.BaseDefine.GroupInfo.group_member_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GroupInfo::group_member_list() const {
  // @@protoc_insertion_point(field_list:IM.BaseDefine.GroupInfo.group_member_list)
  return group_member_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GroupInfo::mutable_group_member_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.BaseDefine.GroupInfo.group_member_list)
  return &group_member_list_;
}

// repeated .IM.BaseDefine.UserInfo group_member_users = 9;
inline int GroupInfo::_internal_group_member_users_size() const {
  return group_member_users_.size();
}
inline int GroupInfo::group_member_users_size() const {
  return _internal_group_member_users_size();
}
inline void GroupInfo::clear_group_member_users() {
  group_member_users_.Clear();
}
inline ::IM::BaseDefine::UserInfo* GroupInfo::mutable_group_member_users(int index) {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.GroupInfo.group_member_users)
  return group_member_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
GroupInfo::mutable_group_member_users() {
  // @@protoc_insertion_point(field_mutable_list:IM.BaseDefine.GroupInfo.group_member_users)
  return &group_member_users_;
}
inline const ::IM::BaseDefine::UserInfo& GroupInfo::_internal_group_member_users(int index) const {
  return group_member_users_.Get(index);
}
inline const ::IM::BaseDefine::UserInfo& GroupInfo::group_member_users(int index) const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.GroupInfo.group_member_users)
  return _internal_group_member_users(index);
}
inline ::IM::BaseDefine::UserInfo* GroupInfo::_internal_add_group_member_users() {
  return group_member_users_.Add();
}
inline ::IM::BaseDefine::UserInfo* GroupInfo::add_group_member_users() {
  // @@protoc_insertion_point(field_add:IM.BaseDefine.GroupInfo.group_member_users)
  return _internal_add_group_member_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
GroupInfo::group_member_users() const {
  // @@protoc_insertion_point(field_list:IM.BaseDefine.GroupInfo.group_member_users)
  return group_member_users_;
}

// -------------------------------------------------------------------

// UserTokenInfo

// string user_id = 1;
inline void UserTokenInfo::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserTokenInfo::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.user_id)
  return _internal_user_id();
}
inline void UserTokenInfo::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.user_id)
}
inline std::string* UserTokenInfo::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserTokenInfo.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserTokenInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserTokenInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserTokenInfo::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserTokenInfo.user_id)
}
inline void UserTokenInfo::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserTokenInfo.user_id)
}
inline void UserTokenInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserTokenInfo.user_id)
}
inline std::string* UserTokenInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserTokenInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserTokenInfo.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserTokenInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserTokenInfo.user_id)
}

// .IM.BaseDefine.ClientType user_type = 2;
inline void UserTokenInfo::clear_user_type() {
  user_type_ = 0;
}
inline ::IM::BaseDefine::ClientType UserTokenInfo::_internal_user_type() const {
  return static_cast< ::IM::BaseDefine::ClientType >(user_type_);
}
inline ::IM::BaseDefine::ClientType UserTokenInfo::user_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.user_type)
  return _internal_user_type();
}
inline void UserTokenInfo::_internal_set_user_type(::IM::BaseDefine::ClientType value) {
  
  user_type_ = value;
}
inline void UserTokenInfo::set_user_type(::IM::BaseDefine::ClientType value) {
  _internal_set_user_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.user_type)
}

// string token = 3;
inline void UserTokenInfo::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserTokenInfo::token() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.token)
  return _internal_token();
}
inline void UserTokenInfo::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.token)
}
inline std::string* UserTokenInfo::mutable_token() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.UserTokenInfo.token)
  return _internal_mutable_token();
}
inline const std::string& UserTokenInfo::_internal_token() const {
  return token_.Get();
}
inline void UserTokenInfo::_internal_set_token(const std::string& value) {
  
  token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserTokenInfo::set_token(std::string&& value) {
  
  token_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.UserTokenInfo.token)
}
inline void UserTokenInfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.UserTokenInfo.token)
}
inline void UserTokenInfo::set_token(const char* value,
    size_t size) {
  
  token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.UserTokenInfo.token)
}
inline std::string* UserTokenInfo::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserTokenInfo::release_token() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.UserTokenInfo.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserTokenInfo::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.UserTokenInfo.token)
}

// uint32 push_count = 4;
inline void UserTokenInfo::clear_push_count() {
  push_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserTokenInfo::_internal_push_count() const {
  return push_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserTokenInfo::push_count() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.push_count)
  return _internal_push_count();
}
inline void UserTokenInfo::_internal_set_push_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  push_count_ = value;
}
inline void UserTokenInfo::set_push_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_push_count(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.push_count)
}

// uint32 push_type = 5;
inline void UserTokenInfo::clear_push_type() {
  push_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserTokenInfo::_internal_push_type() const {
  return push_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserTokenInfo::push_type() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.UserTokenInfo.push_type)
  return _internal_push_type();
}
inline void UserTokenInfo::_internal_set_push_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  push_type_ = value;
}
inline void UserTokenInfo::set_push_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_push_type(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.UserTokenInfo.push_type)
}

// -------------------------------------------------------------------

// PushResult

// string user_token = 1;
inline void PushResult::clear_user_token() {
  user_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PushResult::user_token() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushResult.user_token)
  return _internal_user_token();
}
inline void PushResult::set_user_token(const std::string& value) {
  _internal_set_user_token(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushResult.user_token)
}
inline std::string* PushResult::mutable_user_token() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.PushResult.user_token)
  return _internal_mutable_user_token();
}
inline const std::string& PushResult::_internal_user_token() const {
  return user_token_.Get();
}
inline void PushResult::_internal_set_user_token(const std::string& value) {
  
  user_token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PushResult::set_user_token(std::string&& value) {
  
  user_token_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.PushResult.user_token)
}
inline void PushResult::set_user_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.PushResult.user_token)
}
inline void PushResult::set_user_token(const char* value,
    size_t size) {
  
  user_token_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.PushResult.user_token)
}
inline std::string* PushResult::_internal_mutable_user_token() {
  
  return user_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PushResult::release_user_token() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.PushResult.user_token)
  return user_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushResult::set_allocated_user_token(std::string* user_token) {
  if (user_token != nullptr) {
    
  } else {
    
  }
  user_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.PushResult.user_token)
}

// uint32 result_code = 2;
inline void PushResult::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushResult::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushResult::result_code() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushResult.result_code)
  return _internal_result_code();
}
inline void PushResult::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void PushResult::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushResult.result_code)
}

// -------------------------------------------------------------------

// ShieldStatus

// string user_id = 1;
inline void ShieldStatus::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShieldStatus::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.user_id)
  return _internal_user_id();
}
inline void ShieldStatus::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.user_id)
}
inline std::string* ShieldStatus::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.ShieldStatus.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ShieldStatus::_internal_user_id() const {
  return user_id_.Get();
}
inline void ShieldStatus::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShieldStatus::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.ShieldStatus.user_id)
}
inline void ShieldStatus::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.ShieldStatus.user_id)
}
inline void ShieldStatus::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.ShieldStatus.user_id)
}
inline std::string* ShieldStatus::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShieldStatus::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.ShieldStatus.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShieldStatus::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.ShieldStatus.user_id)
}

// string group_id = 2;
inline void ShieldStatus::clear_group_id() {
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShieldStatus::group_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.group_id)
  return _internal_group_id();
}
inline void ShieldStatus::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.group_id)
}
inline std::string* ShieldStatus::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.ShieldStatus.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& ShieldStatus::_internal_group_id() const {
  return group_id_.Get();
}
inline void ShieldStatus::_internal_set_group_id(const std::string& value) {
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShieldStatus::set_group_id(std::string&& value) {
  
  group_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.ShieldStatus.group_id)
}
inline void ShieldStatus::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.ShieldStatus.group_id)
}
inline void ShieldStatus::set_group_id(const char* value,
    size_t size) {
  
  group_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.ShieldStatus.group_id)
}
inline std::string* ShieldStatus::_internal_mutable_group_id() {
  
  return group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShieldStatus::release_group_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.ShieldStatus.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShieldStatus::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.ShieldStatus.group_id)
}

// uint32 shield_status = 3;
inline void ShieldStatus::clear_shield_status() {
  shield_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShieldStatus::_internal_shield_status() const {
  return shield_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShieldStatus::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.ShieldStatus.shield_status)
  return _internal_shield_status();
}
inline void ShieldStatus::_internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shield_status_ = value;
}
inline void ShieldStatus::set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shield_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.ShieldStatus.shield_status)
}

// -------------------------------------------------------------------

// OfflineFileInfo

// string from_user_id = 1;
inline void OfflineFileInfo::clear_from_user_id() {
  from_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OfflineFileInfo::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.from_user_id)
  return _internal_from_user_id();
}
inline void OfflineFileInfo::set_from_user_id(const std::string& value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.from_user_id)
}
inline std::string* OfflineFileInfo::mutable_from_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.OfflineFileInfo.from_user_id)
  return _internal_mutable_from_user_id();
}
inline const std::string& OfflineFileInfo::_internal_from_user_id() const {
  return from_user_id_.Get();
}
inline void OfflineFileInfo::_internal_set_from_user_id(const std::string& value) {
  
  from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OfflineFileInfo::set_from_user_id(std::string&& value) {
  
  from_user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.OfflineFileInfo.from_user_id)
}
inline void OfflineFileInfo::set_from_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.OfflineFileInfo.from_user_id)
}
inline void OfflineFileInfo::set_from_user_id(const char* value,
    size_t size) {
  
  from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.OfflineFileInfo.from_user_id)
}
inline std::string* OfflineFileInfo::_internal_mutable_from_user_id() {
  
  return from_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OfflineFileInfo::release_from_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.OfflineFileInfo.from_user_id)
  return from_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfflineFileInfo::set_allocated_from_user_id(std::string* from_user_id) {
  if (from_user_id != nullptr) {
    
  } else {
    
  }
  from_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.OfflineFileInfo.from_user_id)
}

// string task_id = 2;
inline void OfflineFileInfo::clear_task_id() {
  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OfflineFileInfo::task_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.task_id)
  return _internal_task_id();
}
inline void OfflineFileInfo::set_task_id(const std::string& value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.task_id)
}
inline std::string* OfflineFileInfo::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.OfflineFileInfo.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& OfflineFileInfo::_internal_task_id() const {
  return task_id_.Get();
}
inline void OfflineFileInfo::_internal_set_task_id(const std::string& value) {
  
  task_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OfflineFileInfo::set_task_id(std::string&& value) {
  
  task_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.OfflineFileInfo.task_id)
}
inline void OfflineFileInfo::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.OfflineFileInfo.task_id)
}
inline void OfflineFileInfo::set_task_id(const char* value,
    size_t size) {
  
  task_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.OfflineFileInfo.task_id)
}
inline std::string* OfflineFileInfo::_internal_mutable_task_id() {
  
  return task_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OfflineFileInfo::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.OfflineFileInfo.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfflineFileInfo::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.OfflineFileInfo.task_id)
}

// string file_name = 3;
inline void OfflineFileInfo::clear_file_name() {
  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OfflineFileInfo::file_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.file_name)
  return _internal_file_name();
}
inline void OfflineFileInfo::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.file_name)
}
inline std::string* OfflineFileInfo::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.OfflineFileInfo.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& OfflineFileInfo::_internal_file_name() const {
  return file_name_.Get();
}
inline void OfflineFileInfo::_internal_set_file_name(const std::string& value) {
  
  file_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OfflineFileInfo::set_file_name(std::string&& value) {
  
  file_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.OfflineFileInfo.file_name)
}
inline void OfflineFileInfo::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.OfflineFileInfo.file_name)
}
inline void OfflineFileInfo::set_file_name(const char* value,
    size_t size) {
  
  file_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.OfflineFileInfo.file_name)
}
inline std::string* OfflineFileInfo::_internal_mutable_file_name() {
  
  return file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OfflineFileInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.OfflineFileInfo.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OfflineFileInfo::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.OfflineFileInfo.file_name)
}

// uint32 file_size = 4;
inline void OfflineFileInfo::clear_file_size() {
  file_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OfflineFileInfo::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OfflineFileInfo::file_size() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.OfflineFileInfo.file_size)
  return _internal_file_size();
}
inline void OfflineFileInfo::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_size_ = value;
}
inline void OfflineFileInfo::set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.OfflineFileInfo.file_size)
}

// -------------------------------------------------------------------

// DepartInfo

// uint32 dept_id = 1;
inline void DepartInfo::clear_dept_id() {
  dept_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepartInfo::_internal_dept_id() const {
  return dept_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepartInfo::dept_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_id)
  return _internal_dept_id();
}
inline void DepartInfo::_internal_set_dept_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dept_id_ = value;
}
inline void DepartInfo::set_dept_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dept_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_id)
}

// uint32 priority = 2;
inline void DepartInfo::clear_priority() {
  priority_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepartInfo::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepartInfo::priority() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.priority)
  return _internal_priority();
}
inline void DepartInfo::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  priority_ = value;
}
inline void DepartInfo::set_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.priority)
}

// string dept_name = 3;
inline void DepartInfo::clear_dept_name() {
  dept_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepartInfo::dept_name() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_name)
  return _internal_dept_name();
}
inline void DepartInfo::set_dept_name(const std::string& value) {
  _internal_set_dept_name(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_name)
}
inline std::string* DepartInfo::mutable_dept_name() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.DepartInfo.dept_name)
  return _internal_mutable_dept_name();
}
inline const std::string& DepartInfo::_internal_dept_name() const {
  return dept_name_.Get();
}
inline void DepartInfo::_internal_set_dept_name(const std::string& value) {
  
  dept_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepartInfo::set_dept_name(std::string&& value) {
  
  dept_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.DepartInfo.dept_name)
}
inline void DepartInfo::set_dept_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dept_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.DepartInfo.dept_name)
}
inline void DepartInfo::set_dept_name(const char* value,
    size_t size) {
  
  dept_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.DepartInfo.dept_name)
}
inline std::string* DepartInfo::_internal_mutable_dept_name() {
  
  return dept_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepartInfo::release_dept_name() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.DepartInfo.dept_name)
  return dept_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepartInfo::set_allocated_dept_name(std::string* dept_name) {
  if (dept_name != nullptr) {
    
  } else {
    
  }
  dept_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dept_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.DepartInfo.dept_name)
}

// uint32 parent_dept_id = 4;
inline void DepartInfo::clear_parent_dept_id() {
  parent_dept_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepartInfo::_internal_parent_dept_id() const {
  return parent_dept_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DepartInfo::parent_dept_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.parent_dept_id)
  return _internal_parent_dept_id();
}
inline void DepartInfo::_internal_set_parent_dept_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  parent_dept_id_ = value;
}
inline void DepartInfo::set_parent_dept_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_parent_dept_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.parent_dept_id)
}

// .IM.BaseDefine.DepartmentStatusType dept_status = 5;
inline void DepartInfo::clear_dept_status() {
  dept_status_ = 0;
}
inline ::IM::BaseDefine::DepartmentStatusType DepartInfo::_internal_dept_status() const {
  return static_cast< ::IM::BaseDefine::DepartmentStatusType >(dept_status_);
}
inline ::IM::BaseDefine::DepartmentStatusType DepartInfo::dept_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.DepartInfo.dept_status)
  return _internal_dept_status();
}
inline void DepartInfo::_internal_set_dept_status(::IM::BaseDefine::DepartmentStatusType value) {
  
  dept_status_ = value;
}
inline void DepartInfo::set_dept_status(::IM::BaseDefine::DepartmentStatusType value) {
  _internal_set_dept_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.DepartInfo.dept_status)
}

// -------------------------------------------------------------------

// PushShieldStatus

// string user_id = 1;
inline void PushShieldStatus::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PushShieldStatus::user_id() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushShieldStatus.user_id)
  return _internal_user_id();
}
inline void PushShieldStatus::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushShieldStatus.user_id)
}
inline std::string* PushShieldStatus::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.BaseDefine.PushShieldStatus.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& PushShieldStatus::_internal_user_id() const {
  return user_id_.Get();
}
inline void PushShieldStatus::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PushShieldStatus::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.BaseDefine.PushShieldStatus.user_id)
}
inline void PushShieldStatus::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.BaseDefine.PushShieldStatus.user_id)
}
inline void PushShieldStatus::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.BaseDefine.PushShieldStatus.user_id)
}
inline std::string* PushShieldStatus::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PushShieldStatus::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.BaseDefine.PushShieldStatus.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PushShieldStatus::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.BaseDefine.PushShieldStatus.user_id)
}

// uint32 shield_status = 2;
inline void PushShieldStatus::clear_shield_status() {
  shield_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushShieldStatus::_internal_shield_status() const {
  return shield_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PushShieldStatus::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.BaseDefine.PushShieldStatus.shield_status)
  return _internal_shield_status();
}
inline void PushShieldStatus::_internal_set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shield_status_ = value;
}
inline void PushShieldStatus::set_shield_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shield_status(value);
  // @@protoc_insertion_point(field_set:IM.BaseDefine.PushShieldStatus.shield_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BaseDefine
}  // namespace IM

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::IM::BaseDefine::ServiceID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::FriendShipCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::LoginCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::BuddyListCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::MessageCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::GroupCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::FileCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::SwitchServiceCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::OtherCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::RegisterCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::BlogCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::SysMsgCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::ServerCmdID> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::ResultType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::KickReasonType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::OnlineListType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::UserStatType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::SessionType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::MsgType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::BlogType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::BlogType2> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::ClientType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::GroupType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::GroupModifyType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::TransferFileType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::ClientFileState> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::ClientFileRole> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::FileServerError> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::SessionStatusType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::DepartmentStatusType> : ::std::true_type {};
template <> struct is_proto_enum< ::IM::BaseDefine::UserRelationType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eBaseDefine_2eproto
