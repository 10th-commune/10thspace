// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Friendship.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IM_2eFriendship_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IM_2eFriendship_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IM_2eFriendship_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IM_2eFriendship_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace IM {
namespace Friend {
class IMFriendGetUnAgreeListReq;
class IMFriendGetUnAgreeListReqDefaultTypeInternal;
extern IMFriendGetUnAgreeListReqDefaultTypeInternal _IMFriendGetUnAgreeListReq_default_instance_;
class IMFriendGetUnAgreeListRsp;
class IMFriendGetUnAgreeListRspDefaultTypeInternal;
extern IMFriendGetUnAgreeListRspDefaultTypeInternal _IMFriendGetUnAgreeListRsp_default_instance_;
class IMFriendShipAddNotify;
class IMFriendShipAddNotifyDefaultTypeInternal;
extern IMFriendShipAddNotifyDefaultTypeInternal _IMFriendShipAddNotify_default_instance_;
class IMFriendShipAddReq;
class IMFriendShipAddReqDefaultTypeInternal;
extern IMFriendShipAddReqDefaultTypeInternal _IMFriendShipAddReq_default_instance_;
class IMFriendShipAddRsp;
class IMFriendShipAddRspDefaultTypeInternal;
extern IMFriendShipAddRspDefaultTypeInternal _IMFriendShipAddRsp_default_instance_;
class IMFriendShipListReq;
class IMFriendShipListReqDefaultTypeInternal;
extern IMFriendShipListReqDefaultTypeInternal _IMFriendShipListReq_default_instance_;
class IMFriendShipListRsp;
class IMFriendShipListRspDefaultTypeInternal;
extern IMFriendShipListRspDefaultTypeInternal _IMFriendShipListRsp_default_instance_;
class IMFriendShipSearchReq;
class IMFriendShipSearchReqDefaultTypeInternal;
extern IMFriendShipSearchReqDefaultTypeInternal _IMFriendShipSearchReq_default_instance_;
class IMFriendShipSearchRes;
class IMFriendShipSearchResDefaultTypeInternal;
extern IMFriendShipSearchResDefaultTypeInternal _IMFriendShipSearchRes_default_instance_;
class IMFriendShipUpdateRelationReq;
class IMFriendShipUpdateRelationReqDefaultTypeInternal;
extern IMFriendShipUpdateRelationReqDefaultTypeInternal _IMFriendShipUpdateRelationReq_default_instance_;
class IMFriendShipUpdateRelationRes;
class IMFriendShipUpdateRelationResDefaultTypeInternal;
extern IMFriendShipUpdateRelationResDefaultTypeInternal _IMFriendShipUpdateRelationRes_default_instance_;
}  // namespace Friend
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> ::IM::Friend::IMFriendGetUnAgreeListReq* Arena::CreateMaybeMessage<::IM::Friend::IMFriendGetUnAgreeListReq>(Arena*);
template<> ::IM::Friend::IMFriendGetUnAgreeListRsp* Arena::CreateMaybeMessage<::IM::Friend::IMFriendGetUnAgreeListRsp>(Arena*);
template<> ::IM::Friend::IMFriendShipAddNotify* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipAddNotify>(Arena*);
template<> ::IM::Friend::IMFriendShipAddReq* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipAddReq>(Arena*);
template<> ::IM::Friend::IMFriendShipAddRsp* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipAddRsp>(Arena*);
template<> ::IM::Friend::IMFriendShipListReq* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipListReq>(Arena*);
template<> ::IM::Friend::IMFriendShipListRsp* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipListRsp>(Arena*);
template<> ::IM::Friend::IMFriendShipSearchReq* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipSearchReq>(Arena*);
template<> ::IM::Friend::IMFriendShipSearchRes* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipSearchRes>(Arena*);
template<> ::IM::Friend::IMFriendShipUpdateRelationReq* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipUpdateRelationReq>(Arena*);
template<> ::IM::Friend::IMFriendShipUpdateRelationRes* Arena::CreateMaybeMessage<::IM::Friend::IMFriendShipUpdateRelationRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IM {
namespace Friend {

// ===================================================================

class IMFriendShipAddReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipAddReq) */ {
 public:
  inline IMFriendShipAddReq() : IMFriendShipAddReq(nullptr) {};
  virtual ~IMFriendShipAddReq();

  IMFriendShipAddReq(const IMFriendShipAddReq& from);
  IMFriendShipAddReq(IMFriendShipAddReq&& from) noexcept
    : IMFriendShipAddReq() {
    *this = ::std::move(from);
  }

  inline IMFriendShipAddReq& operator=(const IMFriendShipAddReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipAddReq& operator=(IMFriendShipAddReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipAddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipAddReq* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipAddReq*>(
               &_IMFriendShipAddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IMFriendShipAddReq& a, IMFriendShipAddReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipAddReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipAddReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipAddReq* New() const final {
    return CreateMaybeMessage<IMFriendShipAddReq>(nullptr);
  }

  IMFriendShipAddReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipAddReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipAddReq& from);
  void MergeFrom(const IMFriendShipAddReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipAddReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipAddReq";
  }
  protected:
  explicit IMFriendShipAddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyidFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kFriendNicknameFieldNumber = 3,
    kAttachMsgFieldNumber = 4,
    kAttachDataFieldNumber = 20,
  };
  // string myid = 1;
  void clear_myid();
  const std::string& myid() const;
  void set_myid(const std::string& value);
  void set_myid(std::string&& value);
  void set_myid(const char* value);
  void set_myid(const char* value, size_t size);
  std::string* mutable_myid();
  std::string* release_myid();
  void set_allocated_myid(std::string* myid);
  private:
  const std::string& _internal_myid() const;
  void _internal_set_myid(const std::string& value);
  std::string* _internal_mutable_myid();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // string friend_nickname = 3;
  void clear_friend_nickname();
  const std::string& friend_nickname() const;
  void set_friend_nickname(const std::string& value);
  void set_friend_nickname(std::string&& value);
  void set_friend_nickname(const char* value);
  void set_friend_nickname(const char* value, size_t size);
  std::string* mutable_friend_nickname();
  std::string* release_friend_nickname();
  void set_allocated_friend_nickname(std::string* friend_nickname);
  private:
  const std::string& _internal_friend_nickname() const;
  void _internal_set_friend_nickname(const std::string& value);
  std::string* _internal_mutable_friend_nickname();
  public:

  // string attach_msg = 4;
  void clear_attach_msg();
  const std::string& attach_msg() const;
  void set_attach_msg(const std::string& value);
  void set_attach_msg(std::string&& value);
  void set_attach_msg(const char* value);
  void set_attach_msg(const char* value, size_t size);
  std::string* mutable_attach_msg();
  std::string* release_attach_msg();
  void set_allocated_attach_msg(std::string* attach_msg);
  private:
  const std::string& _internal_attach_msg() const;
  void _internal_set_attach_msg(const std::string& value);
  std::string* _internal_mutable_attach_msg();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipAddReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr myid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendShipAddRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipAddRsp) */ {
 public:
  inline IMFriendShipAddRsp() : IMFriendShipAddRsp(nullptr) {};
  virtual ~IMFriendShipAddRsp();

  IMFriendShipAddRsp(const IMFriendShipAddRsp& from);
  IMFriendShipAddRsp(IMFriendShipAddRsp&& from) noexcept
    : IMFriendShipAddRsp() {
    *this = ::std::move(from);
  }

  inline IMFriendShipAddRsp& operator=(const IMFriendShipAddRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipAddRsp& operator=(IMFriendShipAddRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipAddRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipAddRsp* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipAddRsp*>(
               &_IMFriendShipAddRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMFriendShipAddRsp& a, IMFriendShipAddRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipAddRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipAddRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipAddRsp* New() const final {
    return CreateMaybeMessage<IMFriendShipAddRsp>(nullptr);
  }

  IMFriendShipAddRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipAddRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipAddRsp& from);
  void MergeFrom(const IMFriendShipAddRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipAddRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipAddRsp";
  }
  protected:
  explicit IMFriendShipAddRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kResultStringFieldNumber = 3,
    kAttachDataFieldNumber = 20,
    kFriendInfoFieldNumber = 4,
    kResultCodeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string result_string = 3;
  void clear_result_string();
  const std::string& result_string() const;
  void set_result_string(const std::string& value);
  void set_result_string(std::string&& value);
  void set_result_string(const char* value);
  void set_result_string(const char* value, size_t size);
  std::string* mutable_result_string();
  std::string* release_result_string();
  void set_allocated_result_string(std::string* result_string);
  private:
  const std::string& _internal_result_string() const;
  void _internal_set_result_string(const std::string& value);
  std::string* _internal_mutable_result_string();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.BaseDefine.UserInfo friend_info = 4;
  bool has_friend_info() const;
  private:
  bool _internal_has_friend_info() const;
  public:
  void clear_friend_info();
  const ::IM::BaseDefine::UserInfo& friend_info() const;
  ::IM::BaseDefine::UserInfo* release_friend_info();
  ::IM::BaseDefine::UserInfo* mutable_friend_info();
  void set_allocated_friend_info(::IM::BaseDefine::UserInfo* friend_info);
  private:
  const ::IM::BaseDefine::UserInfo& _internal_friend_info() const;
  ::IM::BaseDefine::UserInfo* _internal_mutable_friend_info();
  public:
  void unsafe_arena_set_allocated_friend_info(
      ::IM::BaseDefine::UserInfo* friend_info);
  ::IM::BaseDefine::UserInfo* unsafe_arena_release_friend_info();

  // uint32 result_code = 2;
  void clear_result_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code() const;
  void set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_code() const;
  void _internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipAddRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::IM::BaseDefine::UserInfo* friend_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendShipAddNotify PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipAddNotify) */ {
 public:
  inline IMFriendShipAddNotify() : IMFriendShipAddNotify(nullptr) {};
  virtual ~IMFriendShipAddNotify();

  IMFriendShipAddNotify(const IMFriendShipAddNotify& from);
  IMFriendShipAddNotify(IMFriendShipAddNotify&& from) noexcept
    : IMFriendShipAddNotify() {
    *this = ::std::move(from);
  }

  inline IMFriendShipAddNotify& operator=(const IMFriendShipAddNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipAddNotify& operator=(IMFriendShipAddNotify&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipAddNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipAddNotify* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipAddNotify*>(
               &_IMFriendShipAddNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IMFriendShipAddNotify& a, IMFriendShipAddNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipAddNotify* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipAddNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipAddNotify* New() const final {
    return CreateMaybeMessage<IMFriendShipAddNotify>(nullptr);
  }

  IMFriendShipAddNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipAddNotify>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipAddNotify& from);
  void MergeFrom(const IMFriendShipAddNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipAddNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipAddNotify";
  }
  protected:
  explicit IMFriendShipAddNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromUserIdFieldNumber = 1,
    kToUserIdFieldNumber = 2,
    kAttachMsgFieldNumber = 5,
    kAttachDataFieldNumber = 20,
    kFriendInfoFieldNumber = 4,
    kNotifyValueFieldNumber = 3,
  };
  // string from_user_id = 1;
  void clear_from_user_id();
  const std::string& from_user_id() const;
  void set_from_user_id(const std::string& value);
  void set_from_user_id(std::string&& value);
  void set_from_user_id(const char* value);
  void set_from_user_id(const char* value, size_t size);
  std::string* mutable_from_user_id();
  std::string* release_from_user_id();
  void set_allocated_from_user_id(std::string* from_user_id);
  private:
  const std::string& _internal_from_user_id() const;
  void _internal_set_from_user_id(const std::string& value);
  std::string* _internal_mutable_from_user_id();
  public:

  // string to_user_id = 2;
  void clear_to_user_id();
  const std::string& to_user_id() const;
  void set_to_user_id(const std::string& value);
  void set_to_user_id(std::string&& value);
  void set_to_user_id(const char* value);
  void set_to_user_id(const char* value, size_t size);
  std::string* mutable_to_user_id();
  std::string* release_to_user_id();
  void set_allocated_to_user_id(std::string* to_user_id);
  private:
  const std::string& _internal_to_user_id() const;
  void _internal_set_to_user_id(const std::string& value);
  std::string* _internal_mutable_to_user_id();
  public:

  // string attach_msg = 5;
  void clear_attach_msg();
  const std::string& attach_msg() const;
  void set_attach_msg(const std::string& value);
  void set_attach_msg(std::string&& value);
  void set_attach_msg(const char* value);
  void set_attach_msg(const char* value, size_t size);
  std::string* mutable_attach_msg();
  std::string* release_attach_msg();
  void set_allocated_attach_msg(std::string* attach_msg);
  private:
  const std::string& _internal_attach_msg() const;
  void _internal_set_attach_msg(const std::string& value);
  std::string* _internal_mutable_attach_msg();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // .IM.BaseDefine.UserInfo friend_info = 4;
  bool has_friend_info() const;
  private:
  bool _internal_has_friend_info() const;
  public:
  void clear_friend_info();
  const ::IM::BaseDefine::UserInfo& friend_info() const;
  ::IM::BaseDefine::UserInfo* release_friend_info();
  ::IM::BaseDefine::UserInfo* mutable_friend_info();
  void set_allocated_friend_info(::IM::BaseDefine::UserInfo* friend_info);
  private:
  const ::IM::BaseDefine::UserInfo& _internal_friend_info() const;
  ::IM::BaseDefine::UserInfo* _internal_mutable_friend_info();
  public:
  void unsafe_arena_set_allocated_friend_info(
      ::IM::BaseDefine::UserInfo* friend_info);
  ::IM::BaseDefine::UserInfo* unsafe_arena_release_friend_info();

  // uint32 notify_value = 3;
  void clear_notify_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 notify_value() const;
  void set_notify_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_notify_value() const;
  void _internal_set_notify_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipAddNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::IM::BaseDefine::UserInfo* friend_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 notify_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendShipListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipListReq) */ {
 public:
  inline IMFriendShipListReq() : IMFriendShipListReq(nullptr) {};
  virtual ~IMFriendShipListReq();

  IMFriendShipListReq(const IMFriendShipListReq& from);
  IMFriendShipListReq(IMFriendShipListReq&& from) noexcept
    : IMFriendShipListReq() {
    *this = ::std::move(from);
  }

  inline IMFriendShipListReq& operator=(const IMFriendShipListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipListReq& operator=(IMFriendShipListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipListReq* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipListReq*>(
               &_IMFriendShipListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IMFriendShipListReq& a, IMFriendShipListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipListReq* New() const final {
    return CreateMaybeMessage<IMFriendShipListReq>(nullptr);
  }

  IMFriendShipListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipListReq& from);
  void MergeFrom(const IMFriendShipListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipListReq";
  }
  protected:
  explicit IMFriendShipListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyidFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // string myid = 1;
  void clear_myid();
  const std::string& myid() const;
  void set_myid(const std::string& value);
  void set_myid(std::string&& value);
  void set_myid(const char* value);
  void set_myid(const char* value, size_t size);
  std::string* mutable_myid();
  std::string* release_myid();
  void set_allocated_myid(std::string* myid);
  private:
  const std::string& _internal_myid() const;
  void _internal_set_myid(const std::string& value);
  std::string* _internal_mutable_myid();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr myid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendShipListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipListRsp) */ {
 public:
  inline IMFriendShipListRsp() : IMFriendShipListRsp(nullptr) {};
  virtual ~IMFriendShipListRsp();

  IMFriendShipListRsp(const IMFriendShipListRsp& from);
  IMFriendShipListRsp(IMFriendShipListRsp&& from) noexcept
    : IMFriendShipListRsp() {
    *this = ::std::move(from);
  }

  inline IMFriendShipListRsp& operator=(const IMFriendShipListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipListRsp& operator=(IMFriendShipListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipListRsp* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipListRsp*>(
               &_IMFriendShipListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IMFriendShipListRsp& a, IMFriendShipListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipListRsp* New() const final {
    return CreateMaybeMessage<IMFriendShipListRsp>(nullptr);
  }

  IMFriendShipListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipListRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipListRsp& from);
  void MergeFrom(const IMFriendShipListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipListRsp";
  }
  protected:
  explicit IMFriendShipListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  int user_list_size() const;
  private:
  int _internal_user_list_size() const;
  public:
  void clear_user_list();
  ::IM::BaseDefine::UserInfo* mutable_user_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_list();
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_list(int index) const;
  ::IM::BaseDefine::UserInfo* _internal_add_user_list();
  public:
  const ::IM::BaseDefine::UserInfo& user_list(int index) const;
  ::IM::BaseDefine::UserInfo* add_user_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendGetUnAgreeListReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendGetUnAgreeListReq) */ {
 public:
  inline IMFriendGetUnAgreeListReq() : IMFriendGetUnAgreeListReq(nullptr) {};
  virtual ~IMFriendGetUnAgreeListReq();

  IMFriendGetUnAgreeListReq(const IMFriendGetUnAgreeListReq& from);
  IMFriendGetUnAgreeListReq(IMFriendGetUnAgreeListReq&& from) noexcept
    : IMFriendGetUnAgreeListReq() {
    *this = ::std::move(from);
  }

  inline IMFriendGetUnAgreeListReq& operator=(const IMFriendGetUnAgreeListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendGetUnAgreeListReq& operator=(IMFriendGetUnAgreeListReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendGetUnAgreeListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendGetUnAgreeListReq* internal_default_instance() {
    return reinterpret_cast<const IMFriendGetUnAgreeListReq*>(
               &_IMFriendGetUnAgreeListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IMFriendGetUnAgreeListReq& a, IMFriendGetUnAgreeListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendGetUnAgreeListReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendGetUnAgreeListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendGetUnAgreeListReq* New() const final {
    return CreateMaybeMessage<IMFriendGetUnAgreeListReq>(nullptr);
  }

  IMFriendGetUnAgreeListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendGetUnAgreeListReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendGetUnAgreeListReq& from);
  void MergeFrom(const IMFriendGetUnAgreeListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendGetUnAgreeListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendGetUnAgreeListReq";
  }
  protected:
  explicit IMFriendGetUnAgreeListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendGetUnAgreeListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendGetUnAgreeListRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendGetUnAgreeListRsp) */ {
 public:
  inline IMFriendGetUnAgreeListRsp() : IMFriendGetUnAgreeListRsp(nullptr) {};
  virtual ~IMFriendGetUnAgreeListRsp();

  IMFriendGetUnAgreeListRsp(const IMFriendGetUnAgreeListRsp& from);
  IMFriendGetUnAgreeListRsp(IMFriendGetUnAgreeListRsp&& from) noexcept
    : IMFriendGetUnAgreeListRsp() {
    *this = ::std::move(from);
  }

  inline IMFriendGetUnAgreeListRsp& operator=(const IMFriendGetUnAgreeListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendGetUnAgreeListRsp& operator=(IMFriendGetUnAgreeListRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendGetUnAgreeListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendGetUnAgreeListRsp* internal_default_instance() {
    return reinterpret_cast<const IMFriendGetUnAgreeListRsp*>(
               &_IMFriendGetUnAgreeListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IMFriendGetUnAgreeListRsp& a, IMFriendGetUnAgreeListRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendGetUnAgreeListRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendGetUnAgreeListRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendGetUnAgreeListRsp* New() const final {
    return CreateMaybeMessage<IMFriendGetUnAgreeListRsp>(nullptr);
  }

  IMFriendGetUnAgreeListRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendGetUnAgreeListRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendGetUnAgreeListRsp& from);
  void MergeFrom(const IMFriendGetUnAgreeListRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendGetUnAgreeListRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendGetUnAgreeListRsp";
  }
  protected:
  explicit IMFriendGetUnAgreeListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  int user_list_size() const;
  private:
  int _internal_user_list_size() const;
  public:
  void clear_user_list();
  ::IM::BaseDefine::UserInfo* mutable_user_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_list();
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_list(int index) const;
  ::IM::BaseDefine::UserInfo* _internal_add_user_list();
  public:
  const ::IM::BaseDefine::UserInfo& user_list(int index) const;
  ::IM::BaseDefine::UserInfo* add_user_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendGetUnAgreeListRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendShipUpdateRelationReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipUpdateRelationReq) */ {
 public:
  inline IMFriendShipUpdateRelationReq() : IMFriendShipUpdateRelationReq(nullptr) {};
  virtual ~IMFriendShipUpdateRelationReq();

  IMFriendShipUpdateRelationReq(const IMFriendShipUpdateRelationReq& from);
  IMFriendShipUpdateRelationReq(IMFriendShipUpdateRelationReq&& from) noexcept
    : IMFriendShipUpdateRelationReq() {
    *this = ::std::move(from);
  }

  inline IMFriendShipUpdateRelationReq& operator=(const IMFriendShipUpdateRelationReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipUpdateRelationReq& operator=(IMFriendShipUpdateRelationReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipUpdateRelationReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipUpdateRelationReq* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipUpdateRelationReq*>(
               &_IMFriendShipUpdateRelationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IMFriendShipUpdateRelationReq& a, IMFriendShipUpdateRelationReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipUpdateRelationReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipUpdateRelationReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipUpdateRelationReq* New() const final {
    return CreateMaybeMessage<IMFriendShipUpdateRelationReq>(nullptr);
  }

  IMFriendShipUpdateRelationReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipUpdateRelationReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipUpdateRelationReq& from);
  void MergeFrom(const IMFriendShipUpdateRelationReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipUpdateRelationReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipUpdateRelationReq";
  }
  protected:
  explicit IMFriendShipUpdateRelationReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUpdateOprationFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 update_opration = 3;
  void clear_update_opration();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_opration() const;
  void set_update_opration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_opration() const;
  void _internal_set_update_opration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipUpdateRelationReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_opration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendShipUpdateRelationRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipUpdateRelationRes) */ {
 public:
  inline IMFriendShipUpdateRelationRes() : IMFriendShipUpdateRelationRes(nullptr) {};
  virtual ~IMFriendShipUpdateRelationRes();

  IMFriendShipUpdateRelationRes(const IMFriendShipUpdateRelationRes& from);
  IMFriendShipUpdateRelationRes(IMFriendShipUpdateRelationRes&& from) noexcept
    : IMFriendShipUpdateRelationRes() {
    *this = ::std::move(from);
  }

  inline IMFriendShipUpdateRelationRes& operator=(const IMFriendShipUpdateRelationRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipUpdateRelationRes& operator=(IMFriendShipUpdateRelationRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipUpdateRelationRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipUpdateRelationRes* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipUpdateRelationRes*>(
               &_IMFriendShipUpdateRelationRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(IMFriendShipUpdateRelationRes& a, IMFriendShipUpdateRelationRes& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipUpdateRelationRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipUpdateRelationRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipUpdateRelationRes* New() const final {
    return CreateMaybeMessage<IMFriendShipUpdateRelationRes>(nullptr);
  }

  IMFriendShipUpdateRelationRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipUpdateRelationRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipUpdateRelationRes& from);
  void MergeFrom(const IMFriendShipUpdateRelationRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipUpdateRelationRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipUpdateRelationRes";
  }
  protected:
  explicit IMFriendShipUpdateRelationRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kAttachDataFieldNumber = 20,
    kUpdateStatusFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string friend_id = 2;
  void clear_friend_id();
  const std::string& friend_id() const;
  void set_friend_id(const std::string& value);
  void set_friend_id(std::string&& value);
  void set_friend_id(const char* value);
  void set_friend_id(const char* value, size_t size);
  std::string* mutable_friend_id();
  std::string* release_friend_id();
  void set_allocated_friend_id(std::string* friend_id);
  private:
  const std::string& _internal_friend_id() const;
  void _internal_set_friend_id(const std::string& value);
  std::string* _internal_mutable_friend_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // uint32 update_status = 3;
  void clear_update_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 update_status() const;
  void set_update_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_update_status() const;
  void _internal_set_update_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipUpdateRelationRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friend_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 update_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendShipSearchReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipSearchReq) */ {
 public:
  inline IMFriendShipSearchReq() : IMFriendShipSearchReq(nullptr) {};
  virtual ~IMFriendShipSearchReq();

  IMFriendShipSearchReq(const IMFriendShipSearchReq& from);
  IMFriendShipSearchReq(IMFriendShipSearchReq&& from) noexcept
    : IMFriendShipSearchReq() {
    *this = ::std::move(from);
  }

  inline IMFriendShipSearchReq& operator=(const IMFriendShipSearchReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipSearchReq& operator=(IMFriendShipSearchReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipSearchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipSearchReq* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipSearchReq*>(
               &_IMFriendShipSearchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(IMFriendShipSearchReq& a, IMFriendShipSearchReq& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipSearchReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipSearchReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipSearchReq* New() const final {
    return CreateMaybeMessage<IMFriendShipSearchReq>(nullptr);
  }

  IMFriendShipSearchReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipSearchReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipSearchReq& from);
  void MergeFrom(const IMFriendShipSearchReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipSearchReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipSearchReq";
  }
  protected:
  explicit IMFriendShipSearchReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserNickFieldNumber = 2,
    kUserNameFieldNumber = 3,
    kAttachDataFieldNumber = 20,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string user_nick = 2;
  void clear_user_nick();
  const std::string& user_nick() const;
  void set_user_nick(const std::string& value);
  void set_user_nick(std::string&& value);
  void set_user_nick(const char* value);
  void set_user_nick(const char* value, size_t size);
  std::string* mutable_user_nick();
  std::string* release_user_nick();
  void set_allocated_user_nick(std::string* user_nick);
  private:
  const std::string& _internal_user_nick() const;
  void _internal_set_user_nick(const std::string& value);
  std::string* _internal_mutable_user_nick();
  public:

  // string user_name = 3;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipSearchReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// -------------------------------------------------------------------

class IMFriendShipSearchRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:IM.Friend.IMFriendShipSearchRes) */ {
 public:
  inline IMFriendShipSearchRes() : IMFriendShipSearchRes(nullptr) {};
  virtual ~IMFriendShipSearchRes();

  IMFriendShipSearchRes(const IMFriendShipSearchRes& from);
  IMFriendShipSearchRes(IMFriendShipSearchRes&& from) noexcept
    : IMFriendShipSearchRes() {
    *this = ::std::move(from);
  }

  inline IMFriendShipSearchRes& operator=(const IMFriendShipSearchRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMFriendShipSearchRes& operator=(IMFriendShipSearchRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IMFriendShipSearchRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFriendShipSearchRes* internal_default_instance() {
    return reinterpret_cast<const IMFriendShipSearchRes*>(
               &_IMFriendShipSearchRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IMFriendShipSearchRes& a, IMFriendShipSearchRes& b) {
    a.Swap(&b);
  }
  inline void Swap(IMFriendShipSearchRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMFriendShipSearchRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMFriendShipSearchRes* New() const final {
    return CreateMaybeMessage<IMFriendShipSearchRes>(nullptr);
  }

  IMFriendShipSearchRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMFriendShipSearchRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IMFriendShipSearchRes& from);
  void MergeFrom(const IMFriendShipSearchRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMFriendShipSearchRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IM.Friend.IMFriendShipSearchRes";
  }
  protected:
  explicit IMFriendShipSearchRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserListFieldNumber = 2,
    kUserIdFieldNumber = 1,
    kAttachDataFieldNumber = 20,
  };
  // repeated .IM.BaseDefine.UserInfo user_list = 2;
  int user_list_size() const;
  private:
  int _internal_user_list_size() const;
  public:
  void clear_user_list();
  ::IM::BaseDefine::UserInfo* mutable_user_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
      mutable_user_list();
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_list(int index) const;
  ::IM::BaseDefine::UserInfo* _internal_add_user_list();
  public:
  const ::IM::BaseDefine::UserInfo& user_list(int index) const;
  ::IM::BaseDefine::UserInfo* add_user_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
      user_list() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes attach_data = 20;
  void clear_attach_data();
  const std::string& attach_data() const;
  void set_attach_data(const std::string& value);
  void set_attach_data(std::string&& value);
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  std::string* mutable_attach_data();
  std::string* release_attach_data();
  void set_allocated_attach_data(std::string* attach_data);
  private:
  const std::string& _internal_attach_data() const;
  void _internal_set_attach_data(const std::string& value);
  std::string* _internal_mutable_attach_data();
  public:

  // @@protoc_insertion_point(class_scope:IM.Friend.IMFriendShipSearchRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo > user_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attach_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_IM_2eFriendship_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMFriendShipAddReq

// string myid = 1;
inline void IMFriendShipAddReq::clear_myid() {
  myid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddReq::myid() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddReq.myid)
  return _internal_myid();
}
inline void IMFriendShipAddReq::set_myid(const std::string& value) {
  _internal_set_myid(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddReq.myid)
}
inline std::string* IMFriendShipAddReq::mutable_myid() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddReq.myid)
  return _internal_mutable_myid();
}
inline const std::string& IMFriendShipAddReq::_internal_myid() const {
  return myid_.Get();
}
inline void IMFriendShipAddReq::_internal_set_myid(const std::string& value) {
  
  myid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddReq::set_myid(std::string&& value) {
  
  myid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddReq.myid)
}
inline void IMFriendShipAddReq::set_myid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  myid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddReq.myid)
}
inline void IMFriendShipAddReq::set_myid(const char* value,
    size_t size) {
  
  myid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddReq.myid)
}
inline std::string* IMFriendShipAddReq::_internal_mutable_myid() {
  
  return myid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddReq::release_myid() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddReq.myid)
  return myid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddReq::set_allocated_myid(std::string* myid) {
  if (myid != nullptr) {
    
  } else {
    
  }
  myid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), myid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddReq.myid)
}

// string friend_id = 2;
inline void IMFriendShipAddReq::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddReq::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddReq.friend_id)
  return _internal_friend_id();
}
inline void IMFriendShipAddReq::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddReq.friend_id)
}
inline std::string* IMFriendShipAddReq::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddReq.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& IMFriendShipAddReq::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void IMFriendShipAddReq::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddReq::set_friend_id(std::string&& value) {
  
  friend_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddReq.friend_id)
}
inline void IMFriendShipAddReq::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddReq.friend_id)
}
inline void IMFriendShipAddReq::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddReq.friend_id)
}
inline std::string* IMFriendShipAddReq::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddReq::release_friend_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddReq.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddReq::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddReq.friend_id)
}

// string friend_nickname = 3;
inline void IMFriendShipAddReq::clear_friend_nickname() {
  friend_nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddReq::friend_nickname() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddReq.friend_nickname)
  return _internal_friend_nickname();
}
inline void IMFriendShipAddReq::set_friend_nickname(const std::string& value) {
  _internal_set_friend_nickname(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddReq.friend_nickname)
}
inline std::string* IMFriendShipAddReq::mutable_friend_nickname() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddReq.friend_nickname)
  return _internal_mutable_friend_nickname();
}
inline const std::string& IMFriendShipAddReq::_internal_friend_nickname() const {
  return friend_nickname_.Get();
}
inline void IMFriendShipAddReq::_internal_set_friend_nickname(const std::string& value) {
  
  friend_nickname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddReq::set_friend_nickname(std::string&& value) {
  
  friend_nickname_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddReq.friend_nickname)
}
inline void IMFriendShipAddReq::set_friend_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_nickname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddReq.friend_nickname)
}
inline void IMFriendShipAddReq::set_friend_nickname(const char* value,
    size_t size) {
  
  friend_nickname_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddReq.friend_nickname)
}
inline std::string* IMFriendShipAddReq::_internal_mutable_friend_nickname() {
  
  return friend_nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddReq::release_friend_nickname() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddReq.friend_nickname)
  return friend_nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddReq::set_allocated_friend_nickname(std::string* friend_nickname) {
  if (friend_nickname != nullptr) {
    
  } else {
    
  }
  friend_nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddReq.friend_nickname)
}

// string attach_msg = 4;
inline void IMFriendShipAddReq::clear_attach_msg() {
  attach_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddReq::attach_msg() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddReq.attach_msg)
  return _internal_attach_msg();
}
inline void IMFriendShipAddReq::set_attach_msg(const std::string& value) {
  _internal_set_attach_msg(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddReq.attach_msg)
}
inline std::string* IMFriendShipAddReq::mutable_attach_msg() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddReq.attach_msg)
  return _internal_mutable_attach_msg();
}
inline const std::string& IMFriendShipAddReq::_internal_attach_msg() const {
  return attach_msg_.Get();
}
inline void IMFriendShipAddReq::_internal_set_attach_msg(const std::string& value) {
  
  attach_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddReq::set_attach_msg(std::string&& value) {
  
  attach_msg_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddReq.attach_msg)
}
inline void IMFriendShipAddReq::set_attach_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddReq.attach_msg)
}
inline void IMFriendShipAddReq::set_attach_msg(const char* value,
    size_t size) {
  
  attach_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddReq.attach_msg)
}
inline std::string* IMFriendShipAddReq::_internal_mutable_attach_msg() {
  
  return attach_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddReq::release_attach_msg() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddReq.attach_msg)
  return attach_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddReq::set_allocated_attach_msg(std::string* attach_msg) {
  if (attach_msg != nullptr) {
    
  } else {
    
  }
  attach_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddReq.attach_msg)
}

// bytes attach_data = 20;
inline void IMFriendShipAddReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddReq.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipAddReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddReq.attach_data)
}
inline std::string* IMFriendShipAddReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipAddReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipAddReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddReq.attach_data)
}
inline void IMFriendShipAddReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddReq.attach_data)
}
inline void IMFriendShipAddReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddReq.attach_data)
}
inline std::string* IMFriendShipAddReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddReq.attach_data)
}

// -------------------------------------------------------------------

// IMFriendShipAddRsp

// string user_id = 1;
inline void IMFriendShipAddRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddRsp.user_id)
  return _internal_user_id();
}
inline void IMFriendShipAddRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddRsp.user_id)
}
inline std::string* IMFriendShipAddRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFriendShipAddRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFriendShipAddRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddRsp.user_id)
}
inline void IMFriendShipAddRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddRsp.user_id)
}
inline void IMFriendShipAddRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddRsp.user_id)
}
inline std::string* IMFriendShipAddRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddRsp.user_id)
}

// uint32 result_code = 2;
inline void IMFriendShipAddRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFriendShipAddRsp::_internal_result_code() const {
  return result_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFriendShipAddRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddRsp.result_code)
  return _internal_result_code();
}
inline void IMFriendShipAddRsp::_internal_set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_code_ = value;
}
inline void IMFriendShipAddRsp::set_result_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_code(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddRsp.result_code)
}

// string result_string = 3;
inline void IMFriendShipAddRsp::clear_result_string() {
  result_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddRsp::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddRsp.result_string)
  return _internal_result_string();
}
inline void IMFriendShipAddRsp::set_result_string(const std::string& value) {
  _internal_set_result_string(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddRsp.result_string)
}
inline std::string* IMFriendShipAddRsp::mutable_result_string() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddRsp.result_string)
  return _internal_mutable_result_string();
}
inline const std::string& IMFriendShipAddRsp::_internal_result_string() const {
  return result_string_.Get();
}
inline void IMFriendShipAddRsp::_internal_set_result_string(const std::string& value) {
  
  result_string_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddRsp::set_result_string(std::string&& value) {
  
  result_string_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddRsp.result_string)
}
inline void IMFriendShipAddRsp::set_result_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_string_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddRsp.result_string)
}
inline void IMFriendShipAddRsp::set_result_string(const char* value,
    size_t size) {
  
  result_string_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddRsp.result_string)
}
inline std::string* IMFriendShipAddRsp::_internal_mutable_result_string() {
  
  return result_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddRsp::release_result_string() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddRsp.result_string)
  return result_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddRsp::set_allocated_result_string(std::string* result_string) {
  if (result_string != nullptr) {
    
  } else {
    
  }
  result_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddRsp.result_string)
}

// .IM.BaseDefine.UserInfo friend_info = 4;
inline bool IMFriendShipAddRsp::_internal_has_friend_info() const {
  return this != internal_default_instance() && friend_info_ != nullptr;
}
inline bool IMFriendShipAddRsp::has_friend_info() const {
  return _internal_has_friend_info();
}
inline const ::IM::BaseDefine::UserInfo& IMFriendShipAddRsp::_internal_friend_info() const {
  const ::IM::BaseDefine::UserInfo* p = friend_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::BaseDefine::UserInfo*>(
      &::IM::BaseDefine::_UserInfo_default_instance_);
}
inline const ::IM::BaseDefine::UserInfo& IMFriendShipAddRsp::friend_info() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddRsp.friend_info)
  return _internal_friend_info();
}
inline void IMFriendShipAddRsp::unsafe_arena_set_allocated_friend_info(
    ::IM::BaseDefine::UserInfo* friend_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_info_);
  }
  friend_info_ = friend_info;
  if (friend_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Friend.IMFriendShipAddRsp.friend_info)
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipAddRsp::release_friend_info() {
  
  ::IM::BaseDefine::UserInfo* temp = friend_info_;
  friend_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipAddRsp::unsafe_arena_release_friend_info() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddRsp.friend_info)
  
  ::IM::BaseDefine::UserInfo* temp = friend_info_;
  friend_info_ = nullptr;
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipAddRsp::_internal_mutable_friend_info() {
  
  if (friend_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::UserInfo>(GetArena());
    friend_info_ = p;
  }
  return friend_info_;
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipAddRsp::mutable_friend_info() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddRsp.friend_info)
  return _internal_mutable_friend_info();
}
inline void IMFriendShipAddRsp::set_allocated_friend_info(::IM::BaseDefine::UserInfo* friend_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_info_);
  }
  if (friend_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_info)->GetArena();
    if (message_arena != submessage_arena) {
      friend_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_info, submessage_arena);
    }
    
  } else {
    
  }
  friend_info_ = friend_info;
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddRsp.friend_info)
}

// bytes attach_data = 20;
inline void IMFriendShipAddRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddRsp.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipAddRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddRsp.attach_data)
}
inline std::string* IMFriendShipAddRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipAddRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipAddRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddRsp.attach_data)
}
inline void IMFriendShipAddRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddRsp.attach_data)
}
inline void IMFriendShipAddRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddRsp.attach_data)
}
inline std::string* IMFriendShipAddRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFriendShipAddNotify

// string from_user_id = 1;
inline void IMFriendShipAddNotify::clear_from_user_id() {
  from_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddNotify::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddNotify.from_user_id)
  return _internal_from_user_id();
}
inline void IMFriendShipAddNotify::set_from_user_id(const std::string& value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddNotify.from_user_id)
}
inline std::string* IMFriendShipAddNotify::mutable_from_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddNotify.from_user_id)
  return _internal_mutable_from_user_id();
}
inline const std::string& IMFriendShipAddNotify::_internal_from_user_id() const {
  return from_user_id_.Get();
}
inline void IMFriendShipAddNotify::_internal_set_from_user_id(const std::string& value) {
  
  from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddNotify::set_from_user_id(std::string&& value) {
  
  from_user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddNotify.from_user_id)
}
inline void IMFriendShipAddNotify::set_from_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddNotify.from_user_id)
}
inline void IMFriendShipAddNotify::set_from_user_id(const char* value,
    size_t size) {
  
  from_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddNotify.from_user_id)
}
inline std::string* IMFriendShipAddNotify::_internal_mutable_from_user_id() {
  
  return from_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddNotify::release_from_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddNotify.from_user_id)
  return from_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddNotify::set_allocated_from_user_id(std::string* from_user_id) {
  if (from_user_id != nullptr) {
    
  } else {
    
  }
  from_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddNotify.from_user_id)
}

// string to_user_id = 2;
inline void IMFriendShipAddNotify::clear_to_user_id() {
  to_user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddNotify::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddNotify.to_user_id)
  return _internal_to_user_id();
}
inline void IMFriendShipAddNotify::set_to_user_id(const std::string& value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddNotify.to_user_id)
}
inline std::string* IMFriendShipAddNotify::mutable_to_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddNotify.to_user_id)
  return _internal_mutable_to_user_id();
}
inline const std::string& IMFriendShipAddNotify::_internal_to_user_id() const {
  return to_user_id_.Get();
}
inline void IMFriendShipAddNotify::_internal_set_to_user_id(const std::string& value) {
  
  to_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddNotify::set_to_user_id(std::string&& value) {
  
  to_user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddNotify.to_user_id)
}
inline void IMFriendShipAddNotify::set_to_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddNotify.to_user_id)
}
inline void IMFriendShipAddNotify::set_to_user_id(const char* value,
    size_t size) {
  
  to_user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddNotify.to_user_id)
}
inline std::string* IMFriendShipAddNotify::_internal_mutable_to_user_id() {
  
  return to_user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddNotify::release_to_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddNotify.to_user_id)
  return to_user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddNotify::set_allocated_to_user_id(std::string* to_user_id) {
  if (to_user_id != nullptr) {
    
  } else {
    
  }
  to_user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddNotify.to_user_id)
}

// uint32 notify_value = 3;
inline void IMFriendShipAddNotify::clear_notify_value() {
  notify_value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFriendShipAddNotify::_internal_notify_value() const {
  return notify_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFriendShipAddNotify::notify_value() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddNotify.notify_value)
  return _internal_notify_value();
}
inline void IMFriendShipAddNotify::_internal_set_notify_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  notify_value_ = value;
}
inline void IMFriendShipAddNotify::set_notify_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_notify_value(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddNotify.notify_value)
}

// .IM.BaseDefine.UserInfo friend_info = 4;
inline bool IMFriendShipAddNotify::_internal_has_friend_info() const {
  return this != internal_default_instance() && friend_info_ != nullptr;
}
inline bool IMFriendShipAddNotify::has_friend_info() const {
  return _internal_has_friend_info();
}
inline const ::IM::BaseDefine::UserInfo& IMFriendShipAddNotify::_internal_friend_info() const {
  const ::IM::BaseDefine::UserInfo* p = friend_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::IM::BaseDefine::UserInfo*>(
      &::IM::BaseDefine::_UserInfo_default_instance_);
}
inline const ::IM::BaseDefine::UserInfo& IMFriendShipAddNotify::friend_info() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddNotify.friend_info)
  return _internal_friend_info();
}
inline void IMFriendShipAddNotify::unsafe_arena_set_allocated_friend_info(
    ::IM::BaseDefine::UserInfo* friend_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_info_);
  }
  friend_info_ = friend_info;
  if (friend_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IM.Friend.IMFriendShipAddNotify.friend_info)
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipAddNotify::release_friend_info() {
  
  ::IM::BaseDefine::UserInfo* temp = friend_info_;
  friend_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipAddNotify::unsafe_arena_release_friend_info() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddNotify.friend_info)
  
  ::IM::BaseDefine::UserInfo* temp = friend_info_;
  friend_info_ = nullptr;
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipAddNotify::_internal_mutable_friend_info() {
  
  if (friend_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::UserInfo>(GetArena());
    friend_info_ = p;
  }
  return friend_info_;
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipAddNotify::mutable_friend_info() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddNotify.friend_info)
  return _internal_mutable_friend_info();
}
inline void IMFriendShipAddNotify::set_allocated_friend_info(::IM::BaseDefine::UserInfo* friend_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_info_);
  }
  if (friend_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend_info)->GetArena();
    if (message_arena != submessage_arena) {
      friend_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_info, submessage_arena);
    }
    
  } else {
    
  }
  friend_info_ = friend_info;
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddNotify.friend_info)
}

// string attach_msg = 5;
inline void IMFriendShipAddNotify::clear_attach_msg() {
  attach_msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddNotify::attach_msg() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddNotify.attach_msg)
  return _internal_attach_msg();
}
inline void IMFriendShipAddNotify::set_attach_msg(const std::string& value) {
  _internal_set_attach_msg(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddNotify.attach_msg)
}
inline std::string* IMFriendShipAddNotify::mutable_attach_msg() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddNotify.attach_msg)
  return _internal_mutable_attach_msg();
}
inline const std::string& IMFriendShipAddNotify::_internal_attach_msg() const {
  return attach_msg_.Get();
}
inline void IMFriendShipAddNotify::_internal_set_attach_msg(const std::string& value) {
  
  attach_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddNotify::set_attach_msg(std::string&& value) {
  
  attach_msg_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddNotify.attach_msg)
}
inline void IMFriendShipAddNotify::set_attach_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddNotify.attach_msg)
}
inline void IMFriendShipAddNotify::set_attach_msg(const char* value,
    size_t size) {
  
  attach_msg_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddNotify.attach_msg)
}
inline std::string* IMFriendShipAddNotify::_internal_mutable_attach_msg() {
  
  return attach_msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddNotify::release_attach_msg() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddNotify.attach_msg)
  return attach_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddNotify::set_allocated_attach_msg(std::string* attach_msg) {
  if (attach_msg != nullptr) {
    
  } else {
    
  }
  attach_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddNotify.attach_msg)
}

// bytes attach_data = 20;
inline void IMFriendShipAddNotify::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipAddNotify::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipAddNotify.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipAddNotify::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipAddNotify.attach_data)
}
inline std::string* IMFriendShipAddNotify::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipAddNotify.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipAddNotify::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipAddNotify::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipAddNotify::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipAddNotify.attach_data)
}
inline void IMFriendShipAddNotify::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipAddNotify.attach_data)
}
inline void IMFriendShipAddNotify::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipAddNotify.attach_data)
}
inline std::string* IMFriendShipAddNotify::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipAddNotify::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipAddNotify.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipAddNotify::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipAddNotify.attach_data)
}

// -------------------------------------------------------------------

// IMFriendShipListReq

// string myid = 1;
inline void IMFriendShipListReq::clear_myid() {
  myid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipListReq::myid() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipListReq.myid)
  return _internal_myid();
}
inline void IMFriendShipListReq::set_myid(const std::string& value) {
  _internal_set_myid(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipListReq.myid)
}
inline std::string* IMFriendShipListReq::mutable_myid() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipListReq.myid)
  return _internal_mutable_myid();
}
inline const std::string& IMFriendShipListReq::_internal_myid() const {
  return myid_.Get();
}
inline void IMFriendShipListReq::_internal_set_myid(const std::string& value) {
  
  myid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipListReq::set_myid(std::string&& value) {
  
  myid_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipListReq.myid)
}
inline void IMFriendShipListReq::set_myid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  myid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipListReq.myid)
}
inline void IMFriendShipListReq::set_myid(const char* value,
    size_t size) {
  
  myid_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipListReq.myid)
}
inline std::string* IMFriendShipListReq::_internal_mutable_myid() {
  
  return myid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipListReq::release_myid() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipListReq.myid)
  return myid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipListReq::set_allocated_myid(std::string* myid) {
  if (myid != nullptr) {
    
  } else {
    
  }
  myid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), myid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipListReq.myid)
}

// bytes attach_data = 20;
inline void IMFriendShipListReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipListReq.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipListReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipListReq.attach_data)
}
inline std::string* IMFriendShipListReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipListReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipListReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipListReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipListReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipListReq.attach_data)
}
inline void IMFriendShipListReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipListReq.attach_data)
}
inline void IMFriendShipListReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipListReq.attach_data)
}
inline std::string* IMFriendShipListReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipListReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipListReq.attach_data)
}

// -------------------------------------------------------------------

// IMFriendShipListRsp

// string user_id = 1;
inline void IMFriendShipListRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipListRsp.user_id)
  return _internal_user_id();
}
inline void IMFriendShipListRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipListRsp.user_id)
}
inline std::string* IMFriendShipListRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipListRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFriendShipListRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFriendShipListRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipListRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipListRsp.user_id)
}
inline void IMFriendShipListRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipListRsp.user_id)
}
inline void IMFriendShipListRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipListRsp.user_id)
}
inline std::string* IMFriendShipListRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipListRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipListRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipListRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipListRsp.user_id)
}

// repeated .IM.BaseDefine.UserInfo user_list = 2;
inline int IMFriendShipListRsp::_internal_user_list_size() const {
  return user_list_.size();
}
inline int IMFriendShipListRsp::user_list_size() const {
  return _internal_user_list_size();
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipListRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipListRsp.user_list)
  return user_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMFriendShipListRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Friend.IMFriendShipListRsp.user_list)
  return &user_list_;
}
inline const ::IM::BaseDefine::UserInfo& IMFriendShipListRsp::_internal_user_list(int index) const {
  return user_list_.Get(index);
}
inline const ::IM::BaseDefine::UserInfo& IMFriendShipListRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipListRsp.user_list)
  return _internal_user_list(index);
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipListRsp::_internal_add_user_list() {
  return user_list_.Add();
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipListRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Friend.IMFriendShipListRsp.user_list)
  return _internal_add_user_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMFriendShipListRsp::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Friend.IMFriendShipListRsp.user_list)
  return user_list_;
}

// bytes attach_data = 20;
inline void IMFriendShipListRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipListRsp.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipListRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipListRsp.attach_data)
}
inline std::string* IMFriendShipListRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipListRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipListRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipListRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipListRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipListRsp.attach_data)
}
inline void IMFriendShipListRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipListRsp.attach_data)
}
inline void IMFriendShipListRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipListRsp.attach_data)
}
inline std::string* IMFriendShipListRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipListRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFriendGetUnAgreeListReq

// string user_id = 1;
inline void IMFriendGetUnAgreeListReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendGetUnAgreeListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendGetUnAgreeListReq.user_id)
  return _internal_user_id();
}
inline void IMFriendGetUnAgreeListReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendGetUnAgreeListReq.user_id)
}
inline std::string* IMFriendGetUnAgreeListReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendGetUnAgreeListReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFriendGetUnAgreeListReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFriendGetUnAgreeListReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendGetUnAgreeListReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendGetUnAgreeListReq.user_id)
}
inline void IMFriendGetUnAgreeListReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendGetUnAgreeListReq.user_id)
}
inline void IMFriendGetUnAgreeListReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendGetUnAgreeListReq.user_id)
}
inline std::string* IMFriendGetUnAgreeListReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendGetUnAgreeListReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendGetUnAgreeListReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendGetUnAgreeListReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendGetUnAgreeListReq.user_id)
}

// bytes attach_data = 20;
inline void IMFriendGetUnAgreeListReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendGetUnAgreeListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendGetUnAgreeListReq.attach_data)
  return _internal_attach_data();
}
inline void IMFriendGetUnAgreeListReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendGetUnAgreeListReq.attach_data)
}
inline std::string* IMFriendGetUnAgreeListReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendGetUnAgreeListReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendGetUnAgreeListReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendGetUnAgreeListReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendGetUnAgreeListReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendGetUnAgreeListReq.attach_data)
}
inline void IMFriendGetUnAgreeListReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendGetUnAgreeListReq.attach_data)
}
inline void IMFriendGetUnAgreeListReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendGetUnAgreeListReq.attach_data)
}
inline std::string* IMFriendGetUnAgreeListReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendGetUnAgreeListReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendGetUnAgreeListReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendGetUnAgreeListReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendGetUnAgreeListReq.attach_data)
}

// -------------------------------------------------------------------

// IMFriendGetUnAgreeListRsp

// string user_id = 1;
inline void IMFriendGetUnAgreeListRsp::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendGetUnAgreeListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendGetUnAgreeListRsp.user_id)
  return _internal_user_id();
}
inline void IMFriendGetUnAgreeListRsp::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendGetUnAgreeListRsp.user_id)
}
inline std::string* IMFriendGetUnAgreeListRsp::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendGetUnAgreeListRsp.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFriendGetUnAgreeListRsp::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFriendGetUnAgreeListRsp::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendGetUnAgreeListRsp::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendGetUnAgreeListRsp.user_id)
}
inline void IMFriendGetUnAgreeListRsp::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendGetUnAgreeListRsp.user_id)
}
inline void IMFriendGetUnAgreeListRsp::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendGetUnAgreeListRsp.user_id)
}
inline std::string* IMFriendGetUnAgreeListRsp::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendGetUnAgreeListRsp::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendGetUnAgreeListRsp.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendGetUnAgreeListRsp::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendGetUnAgreeListRsp.user_id)
}

// repeated .IM.BaseDefine.UserInfo user_list = 2;
inline int IMFriendGetUnAgreeListRsp::_internal_user_list_size() const {
  return user_list_.size();
}
inline int IMFriendGetUnAgreeListRsp::user_list_size() const {
  return _internal_user_list_size();
}
inline ::IM::BaseDefine::UserInfo* IMFriendGetUnAgreeListRsp::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendGetUnAgreeListRsp.user_list)
  return user_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMFriendGetUnAgreeListRsp::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Friend.IMFriendGetUnAgreeListRsp.user_list)
  return &user_list_;
}
inline const ::IM::BaseDefine::UserInfo& IMFriendGetUnAgreeListRsp::_internal_user_list(int index) const {
  return user_list_.Get(index);
}
inline const ::IM::BaseDefine::UserInfo& IMFriendGetUnAgreeListRsp::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendGetUnAgreeListRsp.user_list)
  return _internal_user_list(index);
}
inline ::IM::BaseDefine::UserInfo* IMFriendGetUnAgreeListRsp::_internal_add_user_list() {
  return user_list_.Add();
}
inline ::IM::BaseDefine::UserInfo* IMFriendGetUnAgreeListRsp::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Friend.IMFriendGetUnAgreeListRsp.user_list)
  return _internal_add_user_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMFriendGetUnAgreeListRsp::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Friend.IMFriendGetUnAgreeListRsp.user_list)
  return user_list_;
}

// bytes attach_data = 20;
inline void IMFriendGetUnAgreeListRsp::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendGetUnAgreeListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendGetUnAgreeListRsp.attach_data)
  return _internal_attach_data();
}
inline void IMFriendGetUnAgreeListRsp::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendGetUnAgreeListRsp.attach_data)
}
inline std::string* IMFriendGetUnAgreeListRsp::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendGetUnAgreeListRsp.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendGetUnAgreeListRsp::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendGetUnAgreeListRsp::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendGetUnAgreeListRsp::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendGetUnAgreeListRsp.attach_data)
}
inline void IMFriendGetUnAgreeListRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendGetUnAgreeListRsp.attach_data)
}
inline void IMFriendGetUnAgreeListRsp::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendGetUnAgreeListRsp.attach_data)
}
inline std::string* IMFriendGetUnAgreeListRsp::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendGetUnAgreeListRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendGetUnAgreeListRsp.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendGetUnAgreeListRsp::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendGetUnAgreeListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFriendShipUpdateRelationReq

// string user_id = 1;
inline void IMFriendShipUpdateRelationReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipUpdateRelationReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipUpdateRelationReq.user_id)
  return _internal_user_id();
}
inline void IMFriendShipUpdateRelationReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipUpdateRelationReq.user_id)
}
inline std::string* IMFriendShipUpdateRelationReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipUpdateRelationReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFriendShipUpdateRelationReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFriendShipUpdateRelationReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipUpdateRelationReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipUpdateRelationReq.user_id)
}
inline void IMFriendShipUpdateRelationReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipUpdateRelationReq.user_id)
}
inline void IMFriendShipUpdateRelationReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipUpdateRelationReq.user_id)
}
inline std::string* IMFriendShipUpdateRelationReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipUpdateRelationReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipUpdateRelationReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipUpdateRelationReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipUpdateRelationReq.user_id)
}

// string friend_id = 2;
inline void IMFriendShipUpdateRelationReq::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipUpdateRelationReq::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipUpdateRelationReq.friend_id)
  return _internal_friend_id();
}
inline void IMFriendShipUpdateRelationReq::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipUpdateRelationReq.friend_id)
}
inline std::string* IMFriendShipUpdateRelationReq::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipUpdateRelationReq.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& IMFriendShipUpdateRelationReq::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void IMFriendShipUpdateRelationReq::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipUpdateRelationReq::set_friend_id(std::string&& value) {
  
  friend_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipUpdateRelationReq.friend_id)
}
inline void IMFriendShipUpdateRelationReq::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipUpdateRelationReq.friend_id)
}
inline void IMFriendShipUpdateRelationReq::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipUpdateRelationReq.friend_id)
}
inline std::string* IMFriendShipUpdateRelationReq::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipUpdateRelationReq::release_friend_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipUpdateRelationReq.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipUpdateRelationReq::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipUpdateRelationReq.friend_id)
}

// uint32 update_opration = 3;
inline void IMFriendShipUpdateRelationReq::clear_update_opration() {
  update_opration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFriendShipUpdateRelationReq::_internal_update_opration() const {
  return update_opration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFriendShipUpdateRelationReq::update_opration() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipUpdateRelationReq.update_opration)
  return _internal_update_opration();
}
inline void IMFriendShipUpdateRelationReq::_internal_set_update_opration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  update_opration_ = value;
}
inline void IMFriendShipUpdateRelationReq::set_update_opration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_opration(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipUpdateRelationReq.update_opration)
}

// bytes attach_data = 20;
inline void IMFriendShipUpdateRelationReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipUpdateRelationReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipUpdateRelationReq.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipUpdateRelationReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipUpdateRelationReq.attach_data)
}
inline std::string* IMFriendShipUpdateRelationReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipUpdateRelationReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipUpdateRelationReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipUpdateRelationReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipUpdateRelationReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipUpdateRelationReq.attach_data)
}
inline void IMFriendShipUpdateRelationReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipUpdateRelationReq.attach_data)
}
inline void IMFriendShipUpdateRelationReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipUpdateRelationReq.attach_data)
}
inline std::string* IMFriendShipUpdateRelationReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipUpdateRelationReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipUpdateRelationReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipUpdateRelationReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipUpdateRelationReq.attach_data)
}

// -------------------------------------------------------------------

// IMFriendShipUpdateRelationRes

// string user_id = 1;
inline void IMFriendShipUpdateRelationRes::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipUpdateRelationRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipUpdateRelationRes.user_id)
  return _internal_user_id();
}
inline void IMFriendShipUpdateRelationRes::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipUpdateRelationRes.user_id)
}
inline std::string* IMFriendShipUpdateRelationRes::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipUpdateRelationRes.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFriendShipUpdateRelationRes::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFriendShipUpdateRelationRes::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipUpdateRelationRes::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipUpdateRelationRes.user_id)
}
inline void IMFriendShipUpdateRelationRes::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipUpdateRelationRes.user_id)
}
inline void IMFriendShipUpdateRelationRes::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipUpdateRelationRes.user_id)
}
inline std::string* IMFriendShipUpdateRelationRes::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipUpdateRelationRes::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipUpdateRelationRes.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipUpdateRelationRes::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipUpdateRelationRes.user_id)
}

// string friend_id = 2;
inline void IMFriendShipUpdateRelationRes::clear_friend_id() {
  friend_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipUpdateRelationRes::friend_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipUpdateRelationRes.friend_id)
  return _internal_friend_id();
}
inline void IMFriendShipUpdateRelationRes::set_friend_id(const std::string& value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipUpdateRelationRes.friend_id)
}
inline std::string* IMFriendShipUpdateRelationRes::mutable_friend_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipUpdateRelationRes.friend_id)
  return _internal_mutable_friend_id();
}
inline const std::string& IMFriendShipUpdateRelationRes::_internal_friend_id() const {
  return friend_id_.Get();
}
inline void IMFriendShipUpdateRelationRes::_internal_set_friend_id(const std::string& value) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipUpdateRelationRes::set_friend_id(std::string&& value) {
  
  friend_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipUpdateRelationRes.friend_id)
}
inline void IMFriendShipUpdateRelationRes::set_friend_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipUpdateRelationRes.friend_id)
}
inline void IMFriendShipUpdateRelationRes::set_friend_id(const char* value,
    size_t size) {
  
  friend_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipUpdateRelationRes.friend_id)
}
inline std::string* IMFriendShipUpdateRelationRes::_internal_mutable_friend_id() {
  
  return friend_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipUpdateRelationRes::release_friend_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipUpdateRelationRes.friend_id)
  return friend_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipUpdateRelationRes::set_allocated_friend_id(std::string* friend_id) {
  if (friend_id != nullptr) {
    
  } else {
    
  }
  friend_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friend_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipUpdateRelationRes.friend_id)
}

// uint32 update_status = 3;
inline void IMFriendShipUpdateRelationRes::clear_update_status() {
  update_status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFriendShipUpdateRelationRes::_internal_update_status() const {
  return update_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IMFriendShipUpdateRelationRes::update_status() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipUpdateRelationRes.update_status)
  return _internal_update_status();
}
inline void IMFriendShipUpdateRelationRes::_internal_set_update_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  update_status_ = value;
}
inline void IMFriendShipUpdateRelationRes::set_update_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_update_status(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipUpdateRelationRes.update_status)
}

// bytes attach_data = 20;
inline void IMFriendShipUpdateRelationRes::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipUpdateRelationRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipUpdateRelationRes.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipUpdateRelationRes::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipUpdateRelationRes.attach_data)
}
inline std::string* IMFriendShipUpdateRelationRes::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipUpdateRelationRes.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipUpdateRelationRes::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipUpdateRelationRes::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipUpdateRelationRes::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipUpdateRelationRes.attach_data)
}
inline void IMFriendShipUpdateRelationRes::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipUpdateRelationRes.attach_data)
}
inline void IMFriendShipUpdateRelationRes::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipUpdateRelationRes.attach_data)
}
inline std::string* IMFriendShipUpdateRelationRes::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipUpdateRelationRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipUpdateRelationRes.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipUpdateRelationRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipUpdateRelationRes.attach_data)
}

// -------------------------------------------------------------------

// IMFriendShipSearchReq

// string user_id = 1;
inline void IMFriendShipSearchReq::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipSearchReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipSearchReq.user_id)
  return _internal_user_id();
}
inline void IMFriendShipSearchReq::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipSearchReq.user_id)
}
inline std::string* IMFriendShipSearchReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipSearchReq.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFriendShipSearchReq::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFriendShipSearchReq::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipSearchReq::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipSearchReq.user_id)
}
inline void IMFriendShipSearchReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipSearchReq.user_id)
}
inline void IMFriendShipSearchReq::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipSearchReq.user_id)
}
inline std::string* IMFriendShipSearchReq::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipSearchReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipSearchReq.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipSearchReq::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipSearchReq.user_id)
}

// string user_nick = 2;
inline void IMFriendShipSearchReq::clear_user_nick() {
  user_nick_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipSearchReq::user_nick() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipSearchReq.user_nick)
  return _internal_user_nick();
}
inline void IMFriendShipSearchReq::set_user_nick(const std::string& value) {
  _internal_set_user_nick(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipSearchReq.user_nick)
}
inline std::string* IMFriendShipSearchReq::mutable_user_nick() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipSearchReq.user_nick)
  return _internal_mutable_user_nick();
}
inline const std::string& IMFriendShipSearchReq::_internal_user_nick() const {
  return user_nick_.Get();
}
inline void IMFriendShipSearchReq::_internal_set_user_nick(const std::string& value) {
  
  user_nick_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipSearchReq::set_user_nick(std::string&& value) {
  
  user_nick_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipSearchReq.user_nick)
}
inline void IMFriendShipSearchReq::set_user_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_nick_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipSearchReq.user_nick)
}
inline void IMFriendShipSearchReq::set_user_nick(const char* value,
    size_t size) {
  
  user_nick_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipSearchReq.user_nick)
}
inline std::string* IMFriendShipSearchReq::_internal_mutable_user_nick() {
  
  return user_nick_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipSearchReq::release_user_nick() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipSearchReq.user_nick)
  return user_nick_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipSearchReq::set_allocated_user_nick(std::string* user_nick) {
  if (user_nick != nullptr) {
    
  } else {
    
  }
  user_nick_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_nick,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipSearchReq.user_nick)
}

// string user_name = 3;
inline void IMFriendShipSearchReq::clear_user_name() {
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipSearchReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipSearchReq.user_name)
  return _internal_user_name();
}
inline void IMFriendShipSearchReq::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipSearchReq.user_name)
}
inline std::string* IMFriendShipSearchReq::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipSearchReq.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& IMFriendShipSearchReq::_internal_user_name() const {
  return user_name_.Get();
}
inline void IMFriendShipSearchReq::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipSearchReq::set_user_name(std::string&& value) {
  
  user_name_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipSearchReq.user_name)
}
inline void IMFriendShipSearchReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipSearchReq.user_name)
}
inline void IMFriendShipSearchReq::set_user_name(const char* value,
    size_t size) {
  
  user_name_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipSearchReq.user_name)
}
inline std::string* IMFriendShipSearchReq::_internal_mutable_user_name() {
  
  return user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipSearchReq::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipSearchReq.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipSearchReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipSearchReq.user_name)
}

// bytes attach_data = 20;
inline void IMFriendShipSearchReq::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipSearchReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipSearchReq.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipSearchReq::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipSearchReq.attach_data)
}
inline std::string* IMFriendShipSearchReq::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipSearchReq.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipSearchReq::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipSearchReq::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipSearchReq::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipSearchReq.attach_data)
}
inline void IMFriendShipSearchReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipSearchReq.attach_data)
}
inline void IMFriendShipSearchReq::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipSearchReq.attach_data)
}
inline std::string* IMFriendShipSearchReq::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipSearchReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipSearchReq.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipSearchReq::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipSearchReq.attach_data)
}

// -------------------------------------------------------------------

// IMFriendShipSearchRes

// string user_id = 1;
inline void IMFriendShipSearchRes::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipSearchRes::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipSearchRes.user_id)
  return _internal_user_id();
}
inline void IMFriendShipSearchRes::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipSearchRes.user_id)
}
inline std::string* IMFriendShipSearchRes::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipSearchRes.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& IMFriendShipSearchRes::_internal_user_id() const {
  return user_id_.Get();
}
inline void IMFriendShipSearchRes::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipSearchRes::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipSearchRes.user_id)
}
inline void IMFriendShipSearchRes::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipSearchRes.user_id)
}
inline void IMFriendShipSearchRes::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipSearchRes.user_id)
}
inline std::string* IMFriendShipSearchRes::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipSearchRes::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipSearchRes.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipSearchRes::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipSearchRes.user_id)
}

// repeated .IM.BaseDefine.UserInfo user_list = 2;
inline int IMFriendShipSearchRes::_internal_user_list_size() const {
  return user_list_.size();
}
inline int IMFriendShipSearchRes::user_list_size() const {
  return _internal_user_list_size();
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipSearchRes::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipSearchRes.user_list)
  return user_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >*
IMFriendShipSearchRes::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Friend.IMFriendShipSearchRes.user_list)
  return &user_list_;
}
inline const ::IM::BaseDefine::UserInfo& IMFriendShipSearchRes::_internal_user_list(int index) const {
  return user_list_.Get(index);
}
inline const ::IM::BaseDefine::UserInfo& IMFriendShipSearchRes::user_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipSearchRes.user_list)
  return _internal_user_list(index);
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipSearchRes::_internal_add_user_list() {
  return user_list_.Add();
}
inline ::IM::BaseDefine::UserInfo* IMFriendShipSearchRes::add_user_list() {
  // @@protoc_insertion_point(field_add:IM.Friend.IMFriendShipSearchRes.user_list)
  return _internal_add_user_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IM::BaseDefine::UserInfo >&
IMFriendShipSearchRes::user_list() const {
  // @@protoc_insertion_point(field_list:IM.Friend.IMFriendShipSearchRes.user_list)
  return user_list_;
}

// bytes attach_data = 20;
inline void IMFriendShipSearchRes::clear_attach_data() {
  attach_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IMFriendShipSearchRes::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Friend.IMFriendShipSearchRes.attach_data)
  return _internal_attach_data();
}
inline void IMFriendShipSearchRes::set_attach_data(const std::string& value) {
  _internal_set_attach_data(value);
  // @@protoc_insertion_point(field_set:IM.Friend.IMFriendShipSearchRes.attach_data)
}
inline std::string* IMFriendShipSearchRes::mutable_attach_data() {
  // @@protoc_insertion_point(field_mutable:IM.Friend.IMFriendShipSearchRes.attach_data)
  return _internal_mutable_attach_data();
}
inline const std::string& IMFriendShipSearchRes::_internal_attach_data() const {
  return attach_data_.Get();
}
inline void IMFriendShipSearchRes::_internal_set_attach_data(const std::string& value) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IMFriendShipSearchRes::set_attach_data(std::string&& value) {
  
  attach_data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IM.Friend.IMFriendShipSearchRes.attach_data)
}
inline void IMFriendShipSearchRes::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:IM.Friend.IMFriendShipSearchRes.attach_data)
}
inline void IMFriendShipSearchRes::set_attach_data(const void* value,
    size_t size) {
  
  attach_data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IM.Friend.IMFriendShipSearchRes.attach_data)
}
inline std::string* IMFriendShipSearchRes::_internal_mutable_attach_data() {
  
  return attach_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IMFriendShipSearchRes::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Friend.IMFriendShipSearchRes.attach_data)
  return attach_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IMFriendShipSearchRes::set_allocated_attach_data(std::string* attach_data) {
  if (attach_data != nullptr) {
    
  } else {
    
  }
  attach_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attach_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IM.Friend.IMFriendShipSearchRes.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Friend
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IM_2eFriendship_2eproto
