package com.tenth.space.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.tenth.space.DB.entity.CommentEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CommentInfo.
*/
public class CommentDao extends AbstractDao<CommentEntity, Long> {

    public static final String TABLENAME = "CommentInfo";

    /**
     * Properties of entity CommentEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CommentId = new Property(1, int.class, "commentId", false, "COMMENT_ID");
        public final static Property FromSessionId = new Property(2, int.class, "fromSessionId", false, "FROM_SESSION_ID");
        public final static Property MsgData = new Property(3, String.class, "msgData", false, "MSG_DATA");
        public final static Property MsgType = new Property(4, String.class, "msgType", false, "MSG_TYPE");
        public final static Property AvatarUrl = new Property(5, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property NickName = new Property(6, String.class, "nickName", false, "NICK_NAME");
        public final static Property Writer_user_id = new Property(7, Long.class, "writer_user_id", false, "WRITER_USER_ID");
        public final static Property Created = new Property(8, int.class, "created", false, "CREATED");
        public final static Property Updated = new Property(9, int.class, "updated", false, "UPDATED");
    };


    public CommentDao(DaoConfig config) {
        super(config);
    }
    
    public CommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CommentInfo' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'COMMENT_ID' INTEGER NOT NULL UNIQUE ," + // 1: commentId
                "'FROM_SESSION_ID' INTEGER NOT NULL ," + // 2: fromSessionId
                "'MSG_DATA' TEXT NOT NULL ," + // 3: msgData
                "'MSG_TYPE' TEXT NOT NULL ," + // 4: msgType
                "'AVATAR_URL' TEXT," + // 5: avatarUrl
                "'NICK_NAME' TEXT," + // 6: nickName
                "'WRITER_USER_ID' INTEGER," + // 7: writer_user_id
                "'CREATED' INTEGER NOT NULL ," + // 8: created
                "'UPDATED' INTEGER NOT NULL );"); // 9: updated
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CommentInfo_COMMENT_ID ON CommentInfo" +
                " (COMMENT_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CommentInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CommentEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCommentId());
        stmt.bindLong(3, entity.getFromSessionId());
        stmt.bindString(4, entity.getMsgData());
        stmt.bindString(5, entity.getMsgType());
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(6, avatarUrl);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        Long writer_user_id = entity.getWriter_user_id();
        if (writer_user_id != null) {
            stmt.bindLong(8, writer_user_id);
        }
        stmt.bindLong(9, entity.getCreated());
        stmt.bindLong(10, entity.getUpdated());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CommentEntity readEntity(Cursor cursor, int offset) {
        CommentEntity entity = new CommentEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // commentId
            cursor.getInt(offset + 2), // fromSessionId
            cursor.getString(offset + 3), // msgData
            cursor.getString(offset + 4), // msgType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatarUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickName
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // writer_user_id
            cursor.getInt(offset + 8), // created
            cursor.getInt(offset + 9) // updated
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CommentEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCommentId(cursor.getInt(offset + 1));
        entity.setFromSessionId(cursor.getInt(offset + 2));
        entity.setMsgData(cursor.getString(offset + 3));
        entity.setMsgType(cursor.getString(offset + 4));
        entity.setAvatarUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWriter_user_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setCreated(cursor.getInt(offset + 8));
        entity.setUpdated(cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CommentEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CommentEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
